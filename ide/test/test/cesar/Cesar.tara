dsl Konos

Service(description = "Cesar Ops Service") restCesar as REST(host = "", basePath = "", port = "{port}")
	AuthenticatedWithToken
	Resource(path = "/systems") systems
		Get(description = "List of systems")
			Response as Text
			Exception(BadRequest)
	Resource(path = "/systems/:system") System
		Put(description = "Create new system version")
			Parameter(in = path) system as Text
			Parameter(in = query) system_version as Text
			Response
			Exception(BadRequest)
		Post(description = "Update system")
			Parameter(in = path) system as Text
			Parameter(in = query) enabled as LongInteger
			Response
			Exception(BadRequest)
	Resource(path = "/systems/:system/:version") SystemVersion
		Get(description = "A system of specific version")
			Parameter(in = path) system as Text
			Parameter(in = path) version as Text
			Response as Object(schema = SystemSchema)
			Exception(BadRequest)
	Resource(path = "/snapshot/:id/opinions/download") downloadSnapshotOpinions
		Get (description="Download opinions at some instant")
			Parameter(in = path) id as Text
			Parameter(in = query) username as Text
			Parameter(in = query) date2 as Date
			Parameter(in = query) date as DateTime
			Parameter(in = query) language as Text
			Parameter(in = query) from as LongInteger
			Parameter(in = query) to as LongInteger
			Response as File
			Exception(code = Unauthorized)
	Resource(path = "/servers") servers
		Get(description = "List of servers")
			Response as Text
			Exception(BadRequest)
		Post(description = "Create server")
			Parameter(in = query) url as Text
			Response as DateTime
			Exception (BadRequest)
	Resource(path = "/servers/:server") server
		Get(description = "List of servers")
			Parameter(in = path) server as Text
			Response as Text
			Exception(BadRequest)
		Post(description = "Update server")
			Parameter(in = path) server as Text
			Response as Text
			Exception(BadRequest)
		Delete(description = "Delete server") deleteServer
			Parameter(in = path) server as Text
			Redirect
			Exception(BadRequest)
	Resource(path = "/deploy") deploySystem
		Post(description = "Deploy system") deploySystem
			Parameter(in = body) system as Object(SystemSchema)
			Response as Object(schema = Parameter)

	Schema SystemSchema
		Attribute name as Text
		Attribute artifact as Text
		Attribute parameter as Object(Parameter) List
		Schema artifactory
			Attribute id as Text
			Attribute url as Text
			Attribute user as Text
			Attribute password as Text

Schema Parameter
	Attribute name as Text
	Attribute type as Text
	Attribute value as Text


Schema Command
	Attribute operation as Text
	AttributeMap parameters

Schema CommandExecuted
	Attribute ts as DateTime
	Attribute commandName as Text
	Attribute remarks as Text
	Attribute deviceId as Text
	Attribute consulVersion as Text

Schema Status
	Attribute deviceId as Text
	Attribute ts as DateTime
	Attribute consulVersion as Text
	Attribute temperature as Real
	Attribute battery as Real
	Attribute cpuUsage as Real
	Attribute isPlugged as Bool
	Attribute isScreenOn as Bool

Schema SystemSchema
	Attribute id as Text
	Attribute jmxPort as Integer
	Attribute publicURL as Text
	Schema(multiple = false) Packaging
		Attribute artifact as Text
		Attribute classpathPrefix as Text
		Schema Parameter
			Attribute name as Text
			Attribute value as Text

	Schema Artifactory
		Attribute id as Text
		Attribute url as Text
		Attribute user as Text
		Attribute password as Text

	Schema(multiple = false) Runtime
		Attribute serverName as Text
		Attribute managementPort as Integer
		Attribute ip as Text
		Attribute port as Integer

Schema ServerSchema
	Attribute name as Text
	Attribute ip as Text
	Attribute performance as Text
	Schema(multiple = false) RemoteConnection
		Attribute url as Text
		Attribute port as Integer
		Attribute user as Text

Schema Boot
	Attribute ts as DateTime
	Attribute deviceId as Text
	Attribute consulVersion as Text

Schema Crash
	Attribute ts as DateTime
	Attribute app as Text
	Attribute appVersion as Text
	Attribute deviceId as Text
	Attribute stack as Text
	Attribute consulVersion as Text

Task scheduleServerLogging as CronTrigger(pattern = "0 0/2 * * * *", mean = "everyTwoMinutes")
	timeZone = "Atlantic/Canary"

Task scheduleSystemLogging as CronTrigger(pattern = "0 * * * * *", mean = "everyMinute")

//Task directoryChecker as DirectorySentinel(directory = "/sample/", events = OnModify OnCreate


Service(title = "cesar", favicon = "/images/icon.png") cesarUi as UI(port = "9000")
	Authentication(by = "{federationUrl}")
	Resource("/") homePage as DisplayPage(cesarDesktop) Root Confidential
	Resource("/error") errorPage as DisplayPage(errorDisplay)
	Use("io.intino.amidas.box.PlatformUi")



Client datalake as Ness(url = "{datalake}", user = "{user}", password = "{password}", domain = "", clientID = "cesar")
	Mounter(InfrastructureOperation, "cesar")
	Mounter(empty, "consul") serverStatus
	Mounter(empty, "consul") serverLog
	Mounter(empty, "consul") serverUpgrade

	Mounter(empty, "consul") feederStatus
	Mounter(empty, "consul") feederLog
	Mounter(empty, "consul") feederUpgrade

	Mounter(empty, "consul") deviceStatus
	Mounter(empty, "consul") deviceBoot
	Mounter(empty, "consul") deviceUpgrade
	Mounter(empty, "consul") deviceCrash

	Mounter(empty, "consul") systemLog
	Mounter(empty, "consul") systemStatus

Schema InfrastructureOperation
	Attribute ts as DateTime
	Attribute operation as Text
	Attribute user as Text
	Attribute objectType as Text
	Attribute objectID as Text
	Attribute parameters as Text List
	Attribute words as Word(values = "a" "b" "c") List
	Attribute palabra as Word(values = "d" "e" "f")

Display cesarDesktop
Display errorDisplay


Panel(label = "Project") projectPanel
	Views
		View("dashboard") as MoldContainer(projectDashboard)

Mold(modelClass = "java.lang.Object") projectDashboard

Catalog("Devices", itemClass = "io.intino.cesar.graph.Device") deviceCatalog
	Toolbar > TaskSelection("remove elements", polymerIcon = "icons:remove")
	Events > OnClickItem > OpenPanel(projectPanel)
	Views
		View("List", mold = projectDashboard) list as ListContainer
		View("Charts", display = "cesarOlap") cesarOlap as DisplayContainer
	Content
		Grouping(label = "by Status") statusCategorization
