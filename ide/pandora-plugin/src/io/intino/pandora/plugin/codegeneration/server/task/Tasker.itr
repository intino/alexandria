def type(tasker)
	package $package+ValidPackage;

	import $package+ValidPackage.$box+FirstUpperCase~Box;
	import io.intino.pandora.scheduling.PandoraTasker;
	import io.intino.pandora.scheduling.directory.PandoraDirectorySentinel;
	import $package+ValidPackage.scheduling.*;
	import org.quartz.*;
	import java.util.LinkedHashSet;
	import java.util.Map;
	import java.util.Set;

	import static org.quartz.JobBuilder.newJob;
	import static org.quartz.CronScheduleBuilder.*;
	import static org.quartz.TriggerBuilder.newTrigger;

	public class $name+firstUpperCase+SnakeCaseToCamelCase~Tasks {

		private $name+firstUpperCase+SnakeCaseToCamelCase~Tasks() {

		}

		public static void init(PandoraTasker tasker, $box+FirstUpperCase~Box box) {
			JobDetail job;
			try {
				$task+init...[$NL]
				tasker.startSchedules();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

		private static Set<Trigger> newSet(Trigger... triggers) {
			LinkedHashSet<Trigger> set = new LinkedHashSet<>();
			java.util.Collections.addAll(set, triggers);
			return set;
		}
	}
end

def type(task) type(DirectorySentinelTask) trigger(init)
	tasker.watchDirectory("$name", new java.io.File("$file"), (f, e) -> { try {
			$package.actions.$name+SnakeCaseToCamelCase~Action action = new $package.actions.$name+SnakeCaseToCamelCase~Action();
			action.box = box;
			action.directory = f.toURI().toURL();
			action.event = e;
			action.execute();
		} catch(java.io.IOException ignored) {}
		}, $event+fullPath...[, ]);
end

def trigger(fullPath)
	PandoraDirectorySentinel.Event.$value
end
def type(task) trigger(init)
	job = newJob($name+SnakeCaseToCamelCase~Task.class).withIdentity("$name").build();
	job.getJobDataMap().put("box", box);
	tasker.scheduleJob(job, newSet($job...[, ]), true);
end

def type(cronTrigger) trigger(job)
	newTrigger().withIdentity("$name").withSchedule(cronSchedule("$pattern")).build()
end

def type(oneBoot) trigger(job)
	newTrigger().startNow().build()
end