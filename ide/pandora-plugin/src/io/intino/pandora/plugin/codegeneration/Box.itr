def type(box)
	package $package;

    import java.util.LinkedHashMap;
    import java.util.logging.Logger;
    import java.util.Map;
    import java.util.UUID;
	[$hasREST~import io.intino.pandora.server.PandoraSpark;]
    [import tara.magritte.Graph;$tara+import]

    public class $name+FirstUpperCase~Box extends [$parentPackage.pandora.$parent+FirstUpperCase~Box?io.intino.pandora.Box] {
		private static Logger LOG = Logger.getGlobal();
		[$hasParent?protected $name+FirstUpperCase~Configuration configuration;]
    	[$hasParent?protected Map<String, Object> map = new LinkedHashMap<>();]
		[$service+field...[$NL]]
		[$channel+field...[$NL]]
		[$process+field...[$NL]]

		private String graphID;

		public $name+firstUpperCase~Box($name+firstUpperCase~Configuration configuration) {
			[$hasParent~super(configuration);
			]this.configuration = configuration;[
			$service+setup...[$NL]][
			$activity+setup...[$NL]]
		}


		public $tara+FirstUpperCase~Box(Graph graph, $tara+FirstUpperCase~Configuration configuration) {
			[$hasParent~super(configuration);
			]map.put(graphID = UUID.randomUUID().toString(), graph);
			this.configuration = configuration;[
			$service+setup...[$NL]][
			$activity+setup...[$NL]]
		}

		public Graph graph() {
			return (Graph) map().get(graphID);
		}

		protected Map<String, Object> map() {
			return map;
		}

    	public $name+firstUpperCase~Configuration configuration() {
			return ($name+firstUpperCase~Configuration) configuration;
		}

		$service+getter...[$NL]

    	public <T> T get(Class<T> tClass) {
    		return (T) map().values().stream().filter(tClass::isInstance).findFirst().orElse(null);
    	}


    	public <T> T get(String object, Class<T> tClass) {
    		return (T) map().get(object);
    	}

    	public $name+firstUpperCase~Box put(String name, Object object) {
    		map().put(name, object);
    		return this;
    	}

    	public void init() {[
    		$parent+parentInit~super.init();? ]
			initActivities();
			initRESTServices();
			initJMSServices();
			initChannels();
			initProcesses();
    	}

		private void initRESTServices() {
			$service+rest...[$NL]
		}

		private void initJMSServices() {
			[javax.jms.Connection connection;
			$service+jms...[$NL]]
		}

		private void initActivities() {
			$activity...[$NL]
		}

		private void initChannels() {
			[try {
				javax.jms.Connection connection;
				$channel+init...[$NL]
			} catch (javax.jms.JMSException e) {
				LOG.severe(e.getMessage());
			}]
		}

		private void initProcesses() {
			$process+process...[$NL]
		}

		public void stopJMSServices() {

		}

    }
end


def type(activity) trigger(setup)
	io.intino.pandora.server.activity.ActivityPandoraSpark.setup(configuration().$name+firstLowerCase~Configuration.port[, configuration().$name+firstLowerCase~Configuration.webDirectory], configuration().$name+firstLowerCase~Configuration.authService);
end

def type(service & rest) trigger(setup)
	io.intino.pandora.server.activity.ActivityPandoraSpark.setup(configuration().$name+firstLowerCase~Configuration.port[, configuration().$name+firstLowerCase~Configuration.webDirectory], null);
end

def type(channel) trigger(init)
	connection = new org.apache.activemq.ActiveMQConnectionFactory(configuration().$name+firstLowerCase~Configuration.user, configuration().$name+firstLowerCase~Configuration.password, configuration().$name+firstLowerCase~Configuration.url).createConnection();
	[$durable
	]connection.start();
	$name+firstUpperCase~Channel.init(connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE), this);
end

def trigger(durable)
	connection.setClientID(configuration().$value+firstLowerCase~Configuration.clientID);
end
def type(service & rest) trigger(rest)
	$name+FirstUpperCase~Resources.setup(io.intino.pandora.server.activity.ActivityPandoraSpark.instance(), this);
end

def type(activity) trigger(activity)
	$name+FirstUpperCase~Activity.init(io.intino.pandora.server.activity.ActivityPandoraSpark.instance(), this);
end

def type(service & jms) trigger(jms)
	try {
		connection = new org.apache.activemq.ActiveMQConnectionFactory(configuration().$name+firstLowerCase~Configuration.user, configuration().$name+firstLowerCase~Configuration.password, configuration().$name+firstLowerCase~Configuration.url).createConnection();
		connection.start();
		this.$name+firstLowerCase = new $name+firstUpperCase~JMSService(connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE), this);
	} catch (javax.jms.JMSException e) {
		LOG.severe(e.getMessage());
	}
end

def type(service & jms) trigger(field)
	private $name+firstUpperCase~JMSService $name+firstlowerCase;
end

def type(service & jms) trigger(getter)
	public $name+firstUpperCase~JMSService $name+firstlowerCase() {
		return $name+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def type(service)
end


def type(process) trigger(init)
	//TODO
end

def trigger(import)
end

def trigger(parentInit)
end
