package io.intino.pandora.plugin.codegeneration.accessor.ui;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class Gulpfile_jsTemplate extends Template {

	protected Gulpfile_jsTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new Gulpfile_jsTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "configuration"))).add(literal("'use strict';\n\n// libraries\nconst gulp = require('gulp');\nconst $ = require('gulp-load-plugins')();\nconst del = require('del');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst path = require('path');\nconst concat = require('gulp-concat');\nconst eventStream = require('event-stream');\nconst console = require('gulp-util');\n\nconst InstallPath = '../")).add(mark("appModule")).add(literal("/res/www/")).add(mark("activityName", "lowercase")).add(literal("';\nconst OutputPath = '../out/production/")).add(mark("appModule")).add(literal("/www/")).add(mark("activityName", "lowercase")).add(literal("';\nconst WatchPort = 35")).add(mark("port")).add(literal(";\n\n// root tasks\ngulp.task('default', cb => {\n\trunSequence('clean', 'package', 'install', cb);\n});\n\ngulp.task('dev', cb => {\n\trunSequence('default', 'watch', cb);\n});\n\ngulp.task('deploy', cb => {\n\trunSequence('clean', 'package', 'obfuscate', 'install', cb);\n});\n\n// sub tasks\ngulp.task('clean', () => { return del([compilePath(), packagePath()]); });\n\ngulp.task('package', cb => {\n\trunSequence('compile', 'union', cb);\n});\n\ngulp.task('compile', cb => {\n\trunSequence('prepare-compile', 'do-compile', cb);\n});\n\ngulp.task('prepare-compile', cb => {\n\treturn eventStream.concat(\n\t\tgulp.src('app/fonts/**/*').pipe(gulp.dest(compilePath(\"/fonts\"))),\n\t\tgulp.src('app/styles/**/*').pipe(gulp.dest(compilePath(\"/styles\"))),\n\t\tgulp.src('app/bower_components/**/*').pipe(gulp.dest(compilePath(\"/bower_components\"))),\n\t\tgulp.src('app/widgets/**/*').pipe(gulp.dest(compilePath(\"/widgets\"))),\n\t\tgulp.src('app/widgets.html').pipe(gulp.dest(compilePath()))\n\t);\n});\n\ngulp.task('do-compile', cb => {\n\treturn gulp.src(compilePath('/widgets.html'))\n\t\t.pipe($.vulcanize({\n\t\t\tstripComments: true,\n\t\t\tinlineCss: true,\n\t\t\tinlineScripts: true\n\t\t}))\n\t\t.pipe($.replace('<iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\/iron-a11y-keys>', '<!-- commented by sumus to fix important events bug <iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\/iron-a11y-keys>-->')) // fix important paper-chip bug\n\t\t.pipe(gulp.dest(packagePath()))\n\t\t.pipe($.size({title: 'vulcanize'}));\n});\n\ngulp.task('union', cb => {\n\treturn eventStream.concat(\n\t\tunionFonts('app/fonts/**/*', packagePath(\"/fonts\")),\n\t\tunionStyles('app/styles/**/*', packagePath(\"/styles\")),\n\t\tgulp.src('app/styles/**/*').pipe(gulp.dest(packagePath(\"/styles\"))),\n\t\tunionImages('app/images/**/*', packagePath(\"/images\")),\n\t\tgulp.src(['app/*.{html,js}', '!app/widgets.html', '!**/.DS_Store']).pipe(gulp.dest(packagePath(''))),\n\t\tunionBower()\n\t);\n});\n\ngulp.task('install', ['resolve-url-dependencies'], () => {\n\tdel([installPath(), outputPath()]);\n\n\treturn eventStream.concat(\n\t\tgulp.src([packagePath('/**/*')], { dot: true }).pipe(gulp.dest(installPath())),\n\t\tgulp.src([packagePath('/**/*')], { dot: true }).pipe(gulp.dest(outputPath()))\n\t);\n});\n\ngulp.task('resolve-url-dependencies', () => {\n\treturn gulp.src([packagePath('*.html'), '!' + packagePath('/widgets.html')])\n\t\t.pipe($.replace('src=\"', 'src=\"$url/'))\n\t\t.pipe($.replace('href=\"', 'href=\"$url/'))\n\t\t.pipe(gulp.dest(packagePath()));\n});\n\ngulp.task('watch', () => {\n\tconst tasksToLaunch = ['refresh-dev-server'];\n\n\tgulp.watch(['app/**/*.html'], tasksToLaunch);\n\tgulp.watch(['app/styles/**/*.css'], tasksToLaunch);\n\tgulp.watch(['app/widgets/**/*.css'], tasksToLaunch);\n\tgulp.watch(['app/widgets/**/*.html'], tasksToLaunch);\n\tgulp.watch(['app/images/**/*'], tasksToLaunch);\n\n\tgulp.src('app/fonts/**/*').pipe(gulp.dest(compilePath(\"/fonts\")));\n\t$.livereload.listen({ port: WatchPort, basePath: '.' });\n});\n\ngulp.task('refresh-dev-server', ['default', 'refresh-browser']);\ngulp.task('refresh-browser', () => gulp.src(outputPath('/*.html')).pipe($.livereload()));\n\ngulp.task('obfuscate', () => {\n\treturn gulp.src(packagePath('/widgets.html'))\n\t\t.pipe($.htmlmin({\n\t\t\tcollapseWhitespace: true,\n\t\t\tremoveComments: true,\n\t\t\tremoveTagWhitespace: true,\n\t\t\tminifyCSS: true,\n\t\t\tminifyJS: true\n\t\t}))\n\t\t.pipe(gulp.dest(packagePath()));\n});\n\n// constants\nconst CompileDirectory = '.comp';\nconst PackageDirectory = '.dist';\n\nconst packagePath = subpath => !subpath ? PackageDirectory : path.join(PackageDirectory, subpath);\nconst compilePath = subpath => !subpath ? CompileDirectory : path.join(CompileDirectory, subpath);\nconst installPath = subpath => !subpath ? InstallPath : path.join(InstallPath, subpath);\nconst outputPath = subpath => !subpath ? OutputPath : path.join(OutputPath, subpath);\n\nconst unionBower = () => {\n\treturn gulp.src(['app/bower_components/{jquery,webcomponentsjs,moment,numeral,promise-polyfill}/**/*',\n\t\t'app/bower_components/{cotton-cookies,cotton-push}/*.js'])\n\t\t.pipe(gulp.dest(packagePath('bower_components')));\n};\n\nconst unionStyles = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe($.changed(src, {extension: '.html'}))\n\t\t.pipe($.changed(src, {extension: '.css'}))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.minifyCss())\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: src}));\n};\n\nconst unionImages = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe($.imagemin({\n\t\t\tprogressive: true,\n\t\t\tinterlaced: true\n\t\t}))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'images'}));\n};\n\nconst unionFonts = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'fonts'}));\n};\n\nrequire('web-component-tester').gulp.init(gulp);"))
		);
		return this;
	}
}