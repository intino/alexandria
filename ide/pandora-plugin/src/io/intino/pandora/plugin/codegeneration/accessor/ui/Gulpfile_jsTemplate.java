package io.intino.pandora.plugin.codegeneration.accessor.ui;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class Gulpfile_jsTemplate extends Template {

	protected Gulpfile_jsTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new Gulpfile_jsTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "configuration"))).add(literal("'use strict';\n\n// Include Gulp & tools we'll use\nconst gulp = require('gulp');\nconst $ = require('gulp-load-plugins')();\nconst del = require('del');\nconst runSequence = require('run-sequence');\nconst merge = require('merge-stream');\nconst path = require('path');\n\nconst INSTALL_PATH = '../")).add(mark("appModule")).add(literal("/res/www/")).add(mark("activityName", "lowercase")).add(literal("';\nconst OUTPUT_PATH = '../out/production/")).add(mark("appModule")).add(literal("/www/")).add(mark("activityName", "lowercase")).add(literal("';\n\nconst AUTOPREFIXER_BROWSERS = [\n\t'ie >= 10',\n\t'ie_mob >= 10',\n\t'ff >= 30',\n\t'chrome >= 34',\n\t'safari >= 7',\n\t'opera >= 23',\n\t'ios >= 7',\n\t'android >= 4.4',\n\t'bb >= 10'\n];\n\nconst DIST = 'dist';\n\nconst dist = subpath => !subpath ? DIST : path.join(DIST, subpath);\n\nconst styleTask = (stylesPath, srcs) => {\n\treturn gulp.src(srcs.map(src => path.join('app', stylesPath, src)))\n.pipe($.changed(stylesPath, {extension: '.css'}))\n\t\t.pipe($.autoprefixer(AUTOPREFIXER_BROWSERS))\n\t\t.pipe(gulp.dest('.tmp/' + stylesPath))\n\t\t.pipe($.minifyCss())\n\t\t.pipe(gulp.dest(dist(stylesPath)))\n\t\t.pipe($.size({title: stylesPath}));\n};\n\nconst lint = src => {\n\treturn gulp.src(src)\n\t\t.pipe($.eslint())\n\t\t.pipe($.eslint.format())\n\t\t.pipe($.eslint.failAfterError());\n};\n\nconst transpile = srcs => {\n\treturn gulp.src(srcs)\n\t\t.pipe($.sourcemaps.init())\n\t\t.pipe($.if('*.html', $.crisper({scriptInHead: false})))\n\t\t.pipe($.if('*.js', $.babel({presets: ['es2015']})))\n\t\t.pipe($.sourcemaps.write('.'))\n\t\t.pipe(gulp.dest('.tmp/'))\n\t\t.pipe(gulp.dest(dist()));\n};\n\nconst imageOptimizeTask = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe($.imagemin({\n\t\t\tprogressive: true,\n\t\t\tinterlaced: true\n\t\t}))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'images'}));\n};\n\nconst optimizeHtmlTask = (src, dest) => {\n\treturn gulp.src(src)\n\t\t.pipe($.if('*.js', $.uglify({preserveComments: 'none'})))\n\t\t.pipe($.if('*.css', $.minifyCss()))\n\t\t.pipe($.useref())\n\t\t.pipe($.if('*.html', $.htmlmin({\n\t\t\tquotes: true,\n\t\t\tempty: true,\n\t\t\tspare: true\n\t\t})))\n\t\t.pipe(gulp.dest(dest))\n\t\t.pipe($.size({title: 'html'}));\n};\n\ngulp.task('styles', () => styleTask('styles', ['**/*.css']));\n\ngulp.task('widgets', () => styleTask('widgets', ['**/*.css']));\n\ngulp.task('images', () => imageOptimizeTask('app/images/**/*', dist('images')));\n\ngulp.task('transpile', () => transpile(['app/**/*.{js,html}', '!app/bower_components/**/*'")).add(expression().add(literal(", ")).add(mark("page", "transpile").multiple(", "))).add(literal("]));\n\ngulp.task('lint', () => lint(['app/scripts/**/*.js', 'app/widgets/**/*.html', 'gulpfile.js']));\n\n// Copy all bower_components over to help js task and vulcanize work together\ngulp.task('bowertotmp', () => gulp.src(['app/bower_components/**/*']).pipe(gulp.dest('.tmp/bower_components/')));\n\n// Copy all files at the root level (app)\ngulp.task('copy', () => {\n\tconst app = gulp.src([\n\t\t'app/*',\n\t\t'!app/widgets',\n\t\t'!app/bower_components',\n\t\t'!**/.DS_Store'\n\t], {dot: true}).pipe(gulp.dest(dist()));\n\n// Copy over only the bower_components we need\n// These are things which cannot be vulcanized\nconst bower = gulp.src([\n\t'app/bower_components/{jquery,webcomponentsjs,moment,numeral,promise-polyfill}/**/*',\n\t'app/bower_components/{cotton-cookies,cotton-push}/*.js'\n]).pipe(gulp.dest(dist('bower_components')));\n\nreturn merge(app, bower)\n\t.pipe($.size({title: 'copy'}));\n});\n\n// Copy web fonts to dist\ngulp.task('fonts', () => {\n\treturn gulp.src(['app/fonts/**'])\n\t\t.pipe(gulp.dest(dist('fonts')))\n\t\t.pipe($.size({title: 'fonts'}));\n});\n\n// Scan your HTML for assets & optimize them\ngulp.task('html', () => optimizeHtmlTask([dist('/**/*.html'), '!' + dist('/{widgets,test}/**/*.html')], dist()));\n\n// Vulcanize granular configuration\ngulp.task('vulcanize', () => {\n\tdel([dist() + '/widgets']);\n\n\treturn gulp.src('.tmp/elements.html')\n\t\t.pipe($.vulcanize({\n\t\t\tstripComments: true,\n\t\t\tinlineCss: true,\n\t\t\tinlineScripts: true\n\t\t}))\n\t\t.pipe($.htmlmin({\n\t\t\tcollapseWhitespace: true,\n\t\t\tremoveComments: true,\n\t\t\tremoveTagWhitespace: true,\n\t\t\tminifyCSS: true,\n\t\t\tminifyJS: true\n\t\t}))\n\t\t.pipe($.replace('<iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>', '<!-- commented by sumus to fix important events bug <iron-a11y-keys target=\"{{}}\" keys=\"space enter\" on-keys-pressed=\"toggleOpened\"><\\/iron-a11y-keys>-->')) // fix important paper-chip bug\n\t\t.pipe(gulp.dest(dist('')))\n\t\t.pipe($.size({title: 'vulcanize'}));\n});\n\ngulp.task('resolve-dependencies-url', () => {\n\treturn gulp.src([")).add(mark("page", "resolve").multiple(", ")).add(literal("])\n\t\t.pipe($.replace('src=\"', 'src=\"$url/'))\n\t\t.pipe($.replace('href=\"', 'href=\"$url/'))\n\t\t.pipe(gulp.dest(dist()));\n});\n\ngulp.task('refresh-dev-server', ['package'], () => runSequence('install', 'refresh-browser'));\n\ngulp.task('refresh-browser', () => gulp.src([")).add(mark("page", "refresh").multiple(", ")).add(literal("]).pipe($.livereload()));\n\ngulp.task('clean', () => del(['.tmp', dist()]));\n\ngulp.task('package', cb => {\n\trunSequence('bowertotmp', ['copy', 'styles'], 'widgets', /*'lint', */'transpile', ['images', 'fonts', 'html'], 'vulcanize', 'resolve-dependencies-url', cb);\n});\n\ngulp.task('install', () => {\n\tdel([INSTALL_PATH, OUTPUT_PATH]);\n\tgulp.src(['dist/**/*'], { dot: true }).pipe(gulp.dest(INSTALL_PATH));\n\tgulp.src(['dist/**/*'], { dot: true }).pipe(gulp.dest(OUTPUT_PATH));\n});\n\n// Watch files for changes & reload\ngulp.task('watch', () => {\n\tgulp.watch(['app/**/*.html'], ['refresh-dev-server']);\n\tgulp.watch(['app/styles/**/*.css'], ['styles', 'refresh-dev-server']);\n\tgulp.watch(['app/widgets/**/*.css'], ['widgets', 'refresh-dev-server']);\n\tgulp.watch(['app/widgets/**/*.html'], ['widgets', 'refresh-dev-server']);\n\tgulp.watch(['app/images/**/*'], ['refresh-dev-server']);\n\n$.livereload.listen({\n\tport: 35729,\n\tbasePath: '.'\n});\n});\n\ngulp.task('default', cb => {\n\trunSequence('clean', 'package', 'install', cb);\n});\n\ngulp.task('dev', cb => {\n\trunSequence('default', 'watch', cb);\n});\n\ngulp.task('deploy', cb => {\n\trunSequence('default', 'test:local', cb);\n});\n\nrequire('web-component-tester').gulp.init(gulp);")),
			rule().add((condition("type", "page")), (condition("trigger", "resolve"))).add(literal("dist('")).add(mark("name")).add(literal(".html')")),
			rule().add((condition("type", "page")), (condition("trigger", "refresh"))).add(literal("OUTPUT_PATH + '/")).add(mark("name")).add(literal(".html'")),
			rule().add((condition("type", "page")), (condition("trigger", "transpile"))).add(literal("'!app/")).add(mark("name")).add(literal(".html'"))
		);
		return this;
	}
}