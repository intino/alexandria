def type(configuration)
	'use strict';

	// libraries
	const gulp = require('gulp');
	const $$ = require('gulp-load-plugins')();
	const del = require('del');
	const runSequence = require('run-sequence');
	const merge = require('merge-stream');
	const path = require('path');
	const concat = require('gulp-concat');
	const eventStream = require('event-stream');
	const console = require('gulp-util');

	const InstallPath = '../$appModule/res/www/$activityName+lowercase';
	const OutputPath = '../out/production/$appModule/www/$activityName+lowercase';
	const WatchPort = 35$port;

	// root tasks
	gulp.task('default', cb => {
		runSequence('clean', 'package', 'install', cb);
	});

	gulp.task('dev', cb => {
		runSequence('default', 'watch', cb);
	});

	gulp.task('deploy', cb => {
		runSequence('clean', 'package', 'obfuscate', 'install', cb);
	});

	// sub tasks
	gulp.task('clean', () => { return del($[compilePath(), packagePath()]); });

	gulp.task('package', cb => {
		runSequence('compile', 'union', cb);
	});

	gulp.task('compile', cb => {
		runSequence('prepare-compile', 'do-compile', cb);
	});

	gulp.task('prepare-compile', cb => {
		return eventStream.concat(
			gulp.src('src/fonts/**/*').pipe(gulp.dest(compilePath("/fonts"))),
			gulp.src('src/styles/**/*').pipe(gulp.dest(compilePath("/styles"))),
			gulp.src('src/widgets/**/*').pipe(gulp.dest(compilePath("/widgets"))),
			gulp.src('src/widgets.html').pipe(gulp.dest(compilePath())),
			gulp.src('gen/**/*').pipe(gulp.dest(compilePath("/gen")))
		);
	});

	gulp.task('do-compile', cb => {
		return gulp.src(compilePath('/widgets.html'))
			.pipe($$.vulcanize({
				stripComments: true,
				inlineCss: true,
				inlineScripts: true
			}))
			.pipe($$.replace('<iron-a11y-keys target="{{}}" keys="space enter" on-keys-pressed="toggleOpened"><\\/iron-a11y-keys>', '<!-- commented by sumus to fix important events bug <iron-a11y-keys target="{{}}" keys="space enter" on-keys-pressed="toggleOpened"><\\/iron-a11y-keys>-->')) // fix important paper-chip bug
			.pipe(gulp.dest(packagePath()))
			.pipe($$.size({title: 'vulcanize'}));
	});

	gulp.task('union', cb => {
		return eventStream.concat(
			unionFonts('src/fonts/**/*', packagePath("/fonts")),
			unionStyles('src/styles/**/*', packagePath("/styles")),
			gulp.src('src/styles/**/*').pipe(gulp.dest(packagePath("/styles"))),
			unionImages('src/images/**/*', packagePath("/images")),
			gulp.src($['src/*.{html,js}', '!src/widgets.html', '!**/.DS_Store']).pipe(gulp.dest(packagePath(''))),
			unionGen()
		);
	});

	gulp.task('install', $['resolve-url-dependencies'], () => {
		del($[installPath(), outputPath()]);

		return eventStream.concat(
			gulp.src($[packagePath('/**/*')], { dot: true }).pipe(gulp.dest(installPath())),
			gulp.src($[packagePath('/**/*')], { dot: true }).pipe(gulp.dest(outputPath()))
		);
	});

	gulp.task('resolve-url-dependencies', () => {
		return gulp.src($[packagePath('*.html'), '!' + packagePath('/widgets.html')])
			.pipe($$.replace('src="', 'src="$$url/'))
			.pipe($$.replace('href="', 'href="$$url/'))
			.pipe(gulp.dest(packagePath()));
	});

	gulp.task('watch', () => {
		const tasksToLaunch = $['refresh-dev-server'];

		gulp.watch($['src/**/*.html'], tasksToLaunch);
		gulp.watch($['src/styles/**/*.css'], tasksToLaunch);
		gulp.watch($['src/widgets/**/*.css'], tasksToLaunch);
		gulp.watch($['src/widgets/**/*.html'], tasksToLaunch);
		gulp.watch($['src/images/**/*'], tasksToLaunch);

		gulp.src('src/fonts/**/*').pipe(gulp.dest(compilePath("/fonts")));
		$$.livereload.listen({ port: WatchPort, basePath: '.' });
	});

	gulp.task('refresh-dev-server', $['default', 'refresh-browser']);
	gulp.task('refresh-browser', () => gulp.src(outputPath('/*.html')).pipe($$.livereload()));

	gulp.task('obfuscate', () => {
		return gulp.src(packagePath('/widgets.html'))
			.pipe($$.htmlmin({
				collapseWhitespace: true,
				removeComments: true,
				removeTagWhitespace: true,
				minifyCSS: true,
				minifyJS: true
			}))
			.pipe(gulp.dest(packagePath()));
	});

	// constants
	const CompileDirectory = '.comp';
	const PackageDirectory = '.dist';

	const packagePath = subpath => !subpath ? PackageDirectory : path.join(PackageDirectory, subpath);
	const compilePath = subpath => !subpath ? CompileDirectory : path.join(CompileDirectory, subpath);
	const installPath = subpath => !subpath ? InstallPath : path.join(InstallPath, subpath);
	const outputPath = subpath => !subpath ? OutputPath : path.join(OutputPath, subpath);

	const unionGen = () => {
		return gulp.src($['gen/{jquery,webcomponentsjs,moment,numeral,promise-polyfill}/**/*',
			'gen/{cotton-cookies,cotton-push}/*.js'])
			.pipe(gulp.dest(packagePath('gen')));
	};

	const unionStyles = (src, dest) => {
		return gulp.src(src)
			.pipe($$.changed(src, {extension: '.html'}))
			.pipe($$.changed(src, {extension: '.css'}))
			.pipe(gulp.dest(dest))
			.pipe($$.minifyCss())
			.pipe(gulp.dest(dest))
			.pipe($$.size({title: src}));
	};

	const unionImages = (src, dest) => {
		return gulp.src(src)
			.pipe($$.imagemin({
				progressive: true,
				interlaced: true
			}))
			.pipe(gulp.dest(dest))
			.pipe($$.size({title: 'images'}));
	};

	const unionFonts = (src, dest) => {
		return gulp.src(src)
			.pipe(gulp.dest(dest))
			.pipe($$.size({title: 'fonts'}));
	};

	require('web-component-tester').gulp.init(gulp);
end