def type(request)
	package $package.requests;

	import io.intino.pandora.exceptions.*;
	import $package.*;
	import com.google.gson.Gson;
	import io.intino.pandora.Box;
	import io.intino.pandora.jms.RequestConsumer;
	import java.util.List;

	import javax.jms.*;
	$schemaImport

	public class $name+firstUpperCase~Request implements RequestConsumer {

		private $box+firstUpperCase~Box box;

		public $name+firstUpperCase~Request($box+firstUpperCase~Box box) {
			this.box = box;
		}

		public void consume(Session session, Message request) {
			[$exception+try
				]$call[
			$exception+catch]
		}

		private $package.actions.$name+firstUpperCase~Action actionFor(Message message) {
			final $package.actions.$name+firstUpperCase~Action action = new $package.actions.$name+firstUpperCase~Action();
			action.box = this.box;[
			try {
				$parameter+assign...[$NL]
			} catch (JMSException e) {
				e.printStackTrace();
			}]
			return action;
		}
		[
		private Message responseMessage(Session session, String responseId, $returnType response) {
			try {
				$returnMessageType~Message message = session.create$returnMessageType~Message();
				message.setJMSCorrelationID(responseId);
				$returnMessageType+return
				return message;
			} catch (JMSException e) {
				e.printStackTrace();
				return null;
			}
		}]
	}
end

def attribute(Bytes) trigger(return)
	message.writeBytes(toByteArray(response));
end

def trigger(return)
	message.set$value(new Gson().toJson(response));
end

def !type(void) trigger(call)
	response(session, replyTo(request), responseMessage(session, idOf(request), actionFor(request).execute()));
end

def trigger(call)
	actionFor(request).execute();
end

def trigger(try)
	try {
end

def trigger(catch)
	} catch (PandoraException e) {
		response(session, replyTo(request), exceptionMessage(session, idOf(request), e));
	}
end

def type(parameter & FileData) trigger(assign)
    byte$[] data = new byte$[(int) ((BytesMessage) message).getBodyLength()];
    ((BytesMessage) message).readBytes(data);
	action.$name+SnakeCaseToCamelCase+firstLowerCase = toInputStream(data);
end

def type(parameter & objectData) trigger(assign)
	action.$name+SnakeCaseToCamelCase+firstLowerCase = new Gson().fromJson(((TextMessage) message).getText(), $type.class);
end

def type(parameter & List) trigger(assign)
	action.$name+SnakeCaseToCamelCase+firstLowerCase = new Gson().fromJson(message.getStringProperty("$name"),  new com.google.gson.reflect.TypeToken<java.util.ArrayList<$type>>(){}.getType());
end

def type(parameter) trigger(assign)
	action.$name+SnakeCaseToCamelCase+firstLowerCase = message.get$type+format~Property("$name");
end

def attribute(Integer) trigger(format)
	Int
end

def type(schemaImport)
	import $package.schemas.*;
end