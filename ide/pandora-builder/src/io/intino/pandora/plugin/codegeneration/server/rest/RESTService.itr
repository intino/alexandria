def type(server)
	package $package+ValidPackage;

	import io.intino.pandora.server.PandoraSpark;
	import $package+ValidPackage.resources.*;
	import io.intino.pandora.Box;
	import io.intino.pandora.server.security.DefaultSecurityManager;

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Resources {

		public static void setup(PandoraSpark server, $box+FirstUpperCase~Box box) {
			$box+firstUpperCase~Configuration.$name+firstUpperCase~Configuration configuration = box.configuration().$name+firstLowerCase~Configuration;;
			$secure
			$resource...[$NL]
		}
	}
end

def type(secure)
	server.secure(new DefaultSecurityManager(new java.io.File("$file"), "$password"));
end

def type(resource)
	server.route($path+format).$method+firstlowerCase((manager) -> new $operation+firstUpperCase~$name+firstUpperCase~Resource(box, manager).execute());
end

def type(path) trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", configuration.$value)
end