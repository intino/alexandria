def type(widget & accessible)
	var $name+FirstUpperCase~ProxyBehaviors = $name+FirstUpperCase~ProxyBehaviors || {};

	$name+FirstUpperCase~ProxyBehaviors.Requester = {

		registerPersonifiedDisplay : function(value) {
			this.carry("registerPersonifiedDisplay", { "value" : value });
		}

	};
end

def type(widget)
	var $name+FirstUpperCase~Behaviors = $name+FirstUpperCase~Behaviors || {};

    $name+FirstUpperCase~Behaviors.Requester = {

        $request...[,$NL]

    };
end


def type(parameter & addressable) trigger(request)
	route$name+firstUpperCase : function(fromDisplay, value) {
		if (this.display == null || fromDisplay == null || fromDisplay.id != this.display.id) return;
		this.carry("$name", { "value" : value });
	},
	$name : function(value) {
		var pathsElement = this.querySelector("$widget+camelCaseToSnakeCase~-routes");
		if (pathsElement == null) pathsElement = this.parentElement.querySelector("$widget+camelCaseToSnakeCase~-routes")
		pathsElement.$name(value);
	}
end


def type(addressable) !type(parameter) trigger(request)
	route$name+firstUpperCase : function(fromDisplay) {
		if (this.display == null || fromDisplay == null || fromDisplay.id != this.display.id) return;
		this.carry("$name");
	},
	$name : function() {
		var pathsElement = this.querySelector("$widget+camelCaseToSnakeCase~-routes");
		if (pathsElement == null) pathsElement = this.parentElement.querySelector("$widget+camelCaseToSnakeCase~-routes")
		pathsElement.$name();
	}
end

def type(parameter) trigger(request)
	$name : function(value) {
		this.$method("$name", { "value" : value });
	}
end


def trigger(request)
	$name : function([$parameterSignature]) {
		this.$method("$name"[, $parameter]);
	}
end

def trigger(parameter)

end


def attribute(Asset) trigger(method)
	download
end

def trigger(method)
	carry
end