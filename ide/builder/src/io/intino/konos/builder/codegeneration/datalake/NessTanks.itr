def type(tanks)
	package $package+validPackage.ness;

	import io.intino.konos.jms.TopicConsumer;
	import io.intino.konos.jms.TopicProducer;
	import io.intino.konos.datalake.Ness;
	import io.intino.konos.jms.Consumer;
	import io.intino.konos.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	[$tankImport]
	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.HashMap;

	public class NessTanks {
		$tank+field...[$NL]

		public static void registerTanks($box+firstUppercase~Box box) {
			$tank+assign...[$NL]
			final String clientID = box.configuration().nessConfiguration().clientID;
			$tank+subscribe...[$NL]
		}

		public static List<io.intino.konos.datalake.Datalake.Tank> tanks() {
			List<io.intino.konos.datalake.Datalake.Tank> tanks = new ArrayList<>();
			$tank+add...[$NL]
			return tanks;
		}

		$tank+getter...[$NL$NL]

		$tank+class...[$NL$NL]

		public static void unregister() {
			$tank+unregister...[$NL]
		}

		private static boolean isRegisterOnly(Message message) {
			try {
				return message.getBooleanProperty(io.intino.konos.datalake.Datalake.REGISTER_ONLY);
			} catch (JMSException e) {
				return false;
			}
		}
	}
end

def type(tank) trigger(unregister)
	$name.unregister();
end

def type(tank) trigger(field)
	private static io.intino.konos.datalake.Datalake.Tank $name;
end

def type(tank) trigger(assign)
	$name = box.datalake().add($messageType+format);
	$name.handler(new $name+FirstUpperCase~Handler(box));
end

def type(tank) trigger(add)
	tanks.add(NessTanks.$name);
end

def type(tank) trigger(getter)
	public static io.intino.konos.datalake.Datalake.Tank $name() {
		return NessTanks.$name;
	}
end

def type(tank) trigger(subscribe)
	$name.flow(clientID != null ? clientID + "-$name" : null);
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def trigger(customType)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(format)
	"$name"[$custom...[]]
end

def trigger(quoted)
	"$value"
end

def trigger(custom)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(tank) trigger(class)
	public static class $name+snakeCaseToCamelCase+FirstUpperCase~Handler implements io.intino.konos.datalake.MessageHandler {
		private final $box+firstUppercase~Box box;

		public $name+snakeCaseToCamelCase+FirstUpperCase~Handler($box+firstUppercase~Box box) {
			this.box = box;
		}

		public void handle(io.intino.ness.inl.Message m) {
			$name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler tank = new $name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler();
			tank.box = box;
			tank.message = m;
			try {
				tank.execute();
			} catch(Throwable e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);
			}
		}
	}
end

def trigger(replace)
	.replace("{$value}", configuration().$conf+firstLowerCase~Configuration.$value+validname+firstLowerCase)
end

def trigger(tankImport)
	import $value+validPackage.ness.messagehandlers.*;
end