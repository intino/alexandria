def type(tanks)
	package $package+validPackage.ness;

	import io.intino.konos.jms.TopicConsumer;
	import io.intino.konos.jms.TopicProducer;
	import io.intino.konos.jms.Consumer;
	import io.intino.konos.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	[$tankImport]
	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;

	public class NessTanks {
		$tank+field...[$NL]

		public static void registerTanks($box+firstUppercase~Box box) {
			$tank+assign...[$NL]
			$tank+subscribe...[$NL]
		}

		$tank+getter...[$NL$NL]

		$tank+class...[$NL$NL]

		private static boolean isRegisterOnly(Message message) {
			try {
				return message.getBooleanProperty(io.intino.konos.datalake.Ness.REGISTER_ONLY);
			} catch (JMSException e) {
				return false;
			}
		}
	}
end

def type(tank) trigger(field)
	private static io.intino.konos.datalake.Ness.Tank $name;
end

def type(tank) trigger(assign)
	$name = box.datalake().tank($messageType+format);
end

def type(tank) trigger(getter)
	public static io.intino.konos.datalake.Ness.Tank $name() {
		return NessTanks.$name;
	}
end

def type(tank) trigger(subscribe)
	$name.flow(new $name+snakeCaseToCamelCase+FirstUpperCase~Subscriptor(box), box.configuration().nessConfiguration().clientID + "-$name");
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def trigger(customType)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(tank) trigger(class)
	private static class $name+snakeCaseToCamelCase+FirstUpperCase~Subscriptor implements io.intino.konos.datalake.Ness.TankFlow {
		private final $box+firstUppercase~Box box;

		$name+snakeCaseToCamelCase+FirstUpperCase~Subscriptor($box+firstUppercase~Box box) {
			this.box = box;
		}

		@Override
		public void consume(Message message) {
			box.datalake().lastMessage(java.time.Instant.now());
			if (isRegisterOnly(message)) return;
			String text = Consumer.textFrom(message);
			$name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler tank = new $name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler();
			tank.box = box;
			tank.message = io.intino.ness.Inl.load(text).get(0);
			tank.execute();
		}
	}
end

def trigger(replace)
	.replace("{$value}", configuration().$conf+firstLowerCase~Configuration.$value+validname+firstLowerCase)
end

def trigger(tankImport)
	import $value+validPackage.ness.messagehandlers.*;
end