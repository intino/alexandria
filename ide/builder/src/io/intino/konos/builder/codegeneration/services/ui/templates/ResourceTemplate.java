package io.intino.konos.builder.codegeneration.services.ui.templates;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class ResourceTemplate extends Template {

	protected ResourceTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new ResourceTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "resource & accessibleDisplay"))).add(literal("package ")).add(mark("package", "validPackage")).add(literal(".ui.resources;\n\nimport ")).add(mark("package", "validPackage")).add(literal(".")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box;\nimport ")).add(mark("package", "validPackage")).add(literal(".ui.pages.")).add(mark("name", "firstUpperCase")).add(literal("ProxyPage;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.exceptions.Unauthorized;\nimport io.intino.alexandria.ui.Soul;\nimport io.intino.alexandria.ui.displays.notifiers.AlexandriaDisplayNotifierProvider;\nimport io.intino.alexandria.ui.services.auth.exceptions.CouldNotObtainInfo;\nimport io.intino.alexandria.ui.services.push.UIClient;\nimport io.intino.alexandria.ui.services.push.UISession;\n\nimport java.util.function.Function;\n\npublic class ")).add(mark("name", "firstUpperCase")).add(literal("ProxyResource extends io.intino.alexandria.ui.spark.resources.ProxyResource {\n\tprivate final ")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box box;\n\n\tpublic ")).add(mark("name", "firstUpperCase")).add(literal("ProxyResource(")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box box, io.intino.alexandria.ui.spark.UISparkManager manager, AlexandriaDisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t\tthis.box = box;\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\tfillBrowser(manager, session());\n\t\tfillDeviceParameter();\n\t\ttry {\n\t\t\tif (!isLogged(accessToken()))\n\t\t\t\tthrow new Unauthorized(\"user is not logged\");\n\n\t\t\tauthenticate(session(), accessToken());\n\t\t\trender();\n\t\t} catch (CouldNotObtainInfo couldNotObtainInfo) {\n\t\t\tthrow new Unauthorized(\"user is not logged\");\n\t\t} catch (Throwable error) {\n\t\t\tthrow new Unauthorized(\"could not render component\");\n\t\t}\n\t}\n\n\tprivate void render() {\n\t\tUIClient client = client();\n\n\t\t")).add(mark("name", "firstUpperCase")).add(literal("ProxyPage page = new ")).add(mark("name", "firstUpperCase")).add(literal("ProxyPage();\n\t\tpage.session = session();\n\t\tpage.session.browser().requestUrl(manager.requestUrl());\n\t\tpage.session.whenLogin(new Function<String, String>() {\n\t\t\t@Override\n\t\t\tpublic String apply(String baseUrl) {\n\t\t\t\treturn ")).add(mark("name", "firstUpperCase")).add(literal("ProxyResource.this.authenticate(baseUrl);\n\t\t\t}\n\t\t});\n\t\tpage.session.whenLogout(b -> logout());\n\t\tpage.box = box;\n\t\tpage.clientId = client.id();\n\t\tpage.googleApiKey = \"\";\n\t\tpage.device = parameterValue(\"device\");\n\t\t")).add(mark("parameter").multiple("\n")).add(literal("\n\n\t\tSoul soul = soul();\n\t\tif (soul != null) {\n\t\t\tpage.soul = soul;\n\t\t\tpage.execute();\n\t\t\treturn;\n\t\t}\n\n\t\tsoul = new Soul(page.session) {\n\t\t\t@Override\n\t\t\tpublic void personify() {\n\t\t\t\tSoul soul = this;\n\t\t\t\taddRegisterDisplayListener(display -> {\n\t\t\t\t\tdisplay.inject(notifier(page.session, client, display));\n\t\t\t\t\tdisplay.inject(page.session);\n\t\t\t\t\tdisplay.inject(soul);\n\t\t\t\t\tdisplay.inject(() -> soul);\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t\tclient.soul(soul);\n\t\tpage.soul = soul;\n\t\tpage.execute();\n\t\tbox.registerSoul(client.id(), soul);\n\n\t\tmanager.write(\"OK\");\n\t}\n}")),
			rule().add((condition("type", "resource"))).add(literal("package ")).add(mark("package", "validPackage")).add(literal(".ui.resources;\n\nimport ")).add(mark("package", "validPackage")).add(literal(".")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box;\nimport ")).add(mark("package", "validPackage")).add(literal(".ui.pages.")).add(mark("name", "firstUpperCase")).add(literal("Page;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.ui.displays.notifiers.AlexandriaDisplayNotifierProvider;\n\nimport java.util.Base64;\nimport java.util.UUID;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\n\npublic class ")).add(mark("name", "firstUpperCase")).add(literal("Resource extends io.intino.alexandria.ui.spark.resources.")).add(expression().add(mark("editor"))).add(literal("Resource {\n\tprivate final ")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box box;\n\n\tpublic ")).add(mark("name", "firstUpperCase")).add(literal("Resource(")).add(mark("box", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box box, io.intino.alexandria.ui.spark.UISparkManager manager, AlexandriaDisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t\tthis.box = box;\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\tsuper.execute();\n\t\tfillDeviceParameter();\n\t\t")).add(expression().add(mark("confidential")).add(literal("\n")).add(literal("\t\tif (isLogged()) render();")).add(literal("\n")).add(literal("\t\telse authenticate();")).or(expression().add(literal("render();")))).add(literal("\n\t}\n\n\tprivate void render() {\n\t\tString clientId = UUID.randomUUID().toString();\n\t\t")).add(mark("name", "firstUpperCase")).add(literal("Page page = new ")).add(mark("name", "firstUpperCase")).add(literal("Page();\n\t\tpage.session = manager.currentSession();\n\t\tpage.session.browser().requestUrl(manager.requestUrl());\n\t\tpage.session.whenLogin(new Function<String, String>() {\n\t\t\t@Override\n\t\t\tpublic String apply(String baseUrl) {\n\t\t\t\treturn ")).add(mark("name", "firstUpperCase")).add(literal("Resource.this.authenticate(baseUrl);\n\t\t\t}\n\t\t});\n\t\tpage.session.whenLogout(b -> logout());\n\t\tpage.box = box;\n\t\tpage.clientId = clientId;\n\t\t")).add(expression().add(literal("page.googleApiKey = ")).add(mark("googleApiKey", "format")).add(literal(";"))).add(literal("\n\t\tpage.device = parameterValue(\"device\");\n\t\tpage.token = parameterValue(\"token\");")).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("editor", "parameters"))).add(literal("\n\t\t")).add(mark("parameter").multiple("\n")).add(literal("\n\t\tmanager.pushService().onOpen(client -> {\n\t\t\tif (!client.id().equals(page.clientId))\n\t\t\t\treturn false;\n\n\t\t\tif (client.soul() != null)\n\t\t\t\treturn false;\n\n\t\t\tio.intino.alexandria.ui.Soul soul = page.prepareSoul(client);\n\t\t\tsoul.onRedirect((location) -> manager.redirect(location));\n\t\t\tsoul.addRegisterDisplayListener(display -> {\n\t\t\t\tdisplay.inject(notifier(page.session, client, display));\n\t\t\t\tdisplay.inject(page.session);\n\t\t\t\tdisplay.inject(soul);\n\t\t\t\tdisplay.inject(() -> soul);\n\t\t\t});\n\t\t\tclient.soul(soul);\n\n\t\t\tbox.registerSoul(clientId, soul);\n\n\t\t\treturn true;\n\t\t});\n\n\t\tmanager.pushService().onClose(clientId).execute(new Consumer<io.intino.alexandria.ui.services.push.UIClient>() {\n\t\t\t@Override\n\t\t\tpublic void accept(io.intino.alexandria.ui.services.push.UIClient client) {\n\t\t\t\tbox.soul(client.id()).ifPresent(s -> s.destroy());\n\t\t\t\tbox.unRegisterSoul(client.id());\n\t\t\t\tmanager.unRegister(client);\n\t\t\t}\n\t\t});\n\n\t\tmanager.write(page.execute());\n\t}\n\n}")),
			rule().add((condition("trigger", "parameters"))).add(literal("page.document = loadDocument();\npage.permission = loadPermission();")),
			rule().add((condition("type", "parameter"))).add(literal("page.")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal(" = parameterValue(\"")).add(mark("name")).add(literal("\");")),
			rule().add((condition("type", "googleApiKey")), (condition("trigger", "format"))).add(literal("\"")).add(mark("name")).add(literal("\"")).add(expression().add(mark("custom").multiple(""))),
			rule().add((condition("trigger", "custom"))).add(literal(".replace(\"{")).add(mark("value")).add(literal("}\", box.configuration().get(\"")).add(mark("value")).add(literal("\"))"))
		);
		return this;
	}
}