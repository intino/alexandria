def type(operation & download) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.Download().execute((element, options, selfId, session) -> $owner+FirstUpperCase.Toolbar.download(box, (Catalog) element, options, selfId, session)).mode("$mode").name("$name")[.title("$title")][.alexandriaIcon("$icon"]));
end

def type(operation & downloadselection) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.DownloadSelection().execute((element, option, selection, selfId, session) -> $owner+FirstUpperCase.Toolbar.downloadSelection(box, (Catalog) element, option, selfId, (java.util.List<$itemClass>)(Object) selection, session)).mode("$mode").name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & export) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.Export().execute((element, from, to, selfId, session) -> $owner+FirstUpperCase.Toolbar.export(box, (Catalog) element, from, to, selfId, session)).mode("$mode").name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & exportselection) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.ExportSelection().execute((element, from, to, selection, selfId, session) -> $owner+FirstUpperCase.Toolbar.exportSelection(box, (Catalog) element, from, to, (java.util.List<$itemClass>)(Object) selection, selfId, session)).mode("$mode").name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & task) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.Task().execute((element, selfId, session) -> $owner+FirstUpperCase.Toolbar.task(box, (Catalog) element, selfId, session))[.confirmText("$confirmText")].mode("$mode").name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & taskselection) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.TaskSelection().execute((element, option, selection, selfId, session) -> $owner+FirstUpperCase.Toolbar.taskSelection(box, (Catalog) element, option, (java.util.List<$itemClass>)(Object)selection, selfId, session))[.confirmText("$confirmText")].mode("$mode").name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & groupingselection) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.GroupingSelection().mode("$mode")[.name("$name")][.title("$title")][.alexandriaIcon("$icon"))];
end

def type(operation & openDialog) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.OpenDialog().dialogType("$dialog").dialogBuilder((session) -> $package+validPackage.dialogs.Dialogs.dialogFor(box, "$dialog")).mode("$mode").name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & openCatalog) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.OpenCatalog()[.filter($openCatalogOperationFilter)].position("$position").catalogDisplayBuilder((session) -> (io.intino.konos.alexandria.ui.displays.AlexandriaAbstractCatalog) Displays.displayFor(box, "$openCatalog")).catalog((io.intino.konos.alexandria.ui.model.Catalog) Displays.displayFor(box, "$openCatalog").element()).views(java.util.Arrays.asList($view+quoted...[, ])).width($width).height($height).mode("$mode").name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & opencatalogselection) trigger(operation)
	result.add(new io.intino.konos.alexandria.ui.model.toolbar.OpenCatalogSelection().execution((element, selection, openCatalogSelection, selfId, session) -> $owner+FirstUpperCase.Toolbar.openCatalogSelection(box, (Catalog) element, (java.util.List<$itemClass>)(Object)selection, (java.util.List<Object>)openCatalogSelection, selfId, session))[.filter($openCatalogSelectionOperationFilter)].position("$position").selection("$selection").catalogDisplayBuilder((session) -> (io.intino.konos.alexandria.ui.displays.AlexandriaAbstractCatalog) Displays.displayFor(box, "$openCatalog")).catalog((io.intino.konos.alexandria.ui.model.Catalog) Displays.displayFor(box, "$openCatalog").element()).views(java.util.Arrays.asList($view+quoted...[, ])).width($width).height($height).mode("$mode").name("$name").title("$title").alexandriaIcon("$icon"));
end

def trigger(openCatalogOperationFilter)
	(context, object, session) -> $owner+FirstUpperCase.Toolbar.openCatalogFilter(box, ($ownerClass) context, object, session)
end

def trigger(openCatalogSelectionOperationFilter)
	(context, selection, object, session) -> $owner+FirstUpperCase.Toolbar.openCatalogSelectionFilter(box, (Catalog) context, (java.util.List<$itemClass>)(Object)selection, object, session)
end