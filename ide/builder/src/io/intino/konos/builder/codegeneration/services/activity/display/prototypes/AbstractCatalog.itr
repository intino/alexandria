def type(catalog & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaCatalog;
    import io.intino.konos.alexandria.activity.model.AbstractView;
    import io.intino.konos.alexandria.activity.model.Catalog;
    import io.intino.konos.alexandria.activity.model.TemporalCatalog;
    import io.intino.konos.alexandria.activity.model.Mold;
    import io.intino.konos.alexandria.activity.model.Toolbar;
    import io.intino.konos.alexandria.activity.model.catalog.arrangement.Arrangement;
    import io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping;
    import io.intino.konos.alexandria.activity.model.catalog.views.DisplayView;
    import io.intino.konos.alexandria.activity.model.catalog.events.OnClickRecord;
    import io.intino.konos.alexandria.activity.model.catalog.views.GridView;
    import io.intino.konos.alexandria.activity.model.catalog.views.ListView;
    import io.intino.konos.alexandria.activity.model.catalog.views.MapView;
    import io.intino.konos.alexandria.activity.model.TimeScale;
    import io.intino.konos.alexandria.activity.model.toolbar.*;

    import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~Notifier;

    import java.util.ArrayList;
    import java.util.List;

    public abstract class Abstract$name+FirstUpperCase extends io.intino.konos.alexandria.activity.displays.Alexandria[Temporal$mode]Catalog<$name+FirstUpperCase~Notifier> {

    	public Abstract$name+FirstUpperCase($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildCatalog(box));
    	}

    	private static [io.intino.konos.alexandria.activity.model.Temporal$mode+empty]Catalog buildCatalog($box+firstUpperCase~Box box) {
    		io.intino.konos.alexandria.activity.model.[Temporal$mode+empty]Catalog catalog = new io.intino.konos.alexandria.activity.model.[Temporal$mode+empty]Catalog();
			catalog.objectsLoader((scope, condition[, $mode+timerange], session) -> (java.util.List<Object>)(Object) $name+firstUpperCase.Source.$type+shortType+firstLowerCase~List(box, scope, condition[, $mode+timerange], session));[
			$mode+setMode][
            $temporalFilter][
			$range][
			catalog.scales(new ArrayList<TimeScale>() {{ $scale+scaleAdd...[; ] }});][
			$hasMagazineView][
			catalog.events(new io.intino.konos.alexandria.activity.model.catalog.Events().onClickRecord(new OnClickRecord().$event));][
			$hasArrangements][
			$groupingselection][
			$toolbar+empty~catalog.toolbar(buildToolbar(box));][
			catalog.name("$name")][.label("$label")];
			catalog.objectLoader((id, session) -> $name+firstUpperCase.Source.$type+shortType+firstLowerCase(box, id, session))
				.objectIdLoader(object -> $name+firstUpperCase.Source.$type+shortType+firstLowerCase~Id(box, ($type)object))
				.objectNameLoader(object -> $name+firstUpperCase.Source.$type+shortType+firstLowerCase~Name(box, ($type) object));
    		buildViews(box).forEach(v -> catalog.add(v));
    		buildArrangements(box).forEach(a -> catalog.add(a));
    		return catalog;
    	}
    	[
		$toolbar
		]
		private static java.util.List<AbstractView> buildViews($box+firstUpperCase~Box box) {
			List<AbstractView> result = new ArrayList<>();
			$view+add...[$NL]
			return result;
		}

    	private static java.util.List<Arrangement> buildArrangements($box+firstUpperCase~Box box) {
    		List<Arrangement> arrangements = new ArrayList<>();
    		$arrangement+add...[$NL]
    		return arrangements;
    	}
    }
end

def trigger(empty)
end

def trigger(setMode)
	catalog.type(TemporalCatalog.Type.$value+firstUpperCase);
end

def trigger(temporalFilter)
	catalog.temporalFilter(new io.intino.konos.alexandria.activity.model.catalog.TemporalFilter().enabledLoader($temporalFilterEnabled).visibilityLoader($temporalFilterVisible));
end

def attribute(conditional) trigger(temporalFilterEnabled)
	(c, scope, session) -> $catalog+FirstUpperCase.TemporalFilter.enable(box, c, scope, session)
end

def attribute(always) trigger(temporalFilterEnabled)
	(c, scope, session) -> true
end

def attribute(never) trigger(temporalFilterEnabled)
	(c, scope, session) -> false
end

def attribute(conditional) trigger(temporalFilterVisible)
	(c, scope, session) -> $catalog+FirstUpperCase.TemporalFilter.visible(box, c, scope, session)
end

def attribute(always) trigger(temporalFilterVisible)
	(c, scope, session) -> true
end

def attribute(never) trigger(temporalFilterVisible)
	(c, scope, session) -> false
end

def trigger(range)
	catalog.rangeLoader(session -> $catalog+FirstUpperCase.Temporal.range(box, session));
	catalog.objectCreatedLoader(object -> $catalog+FirstUpperCase.Source.$type+shortType+firstLowerCase~Created(box, ($type) object));
end

def trigger(timeRange)
	range
end

def trigger(scaleAdd)
	add(TimeScale.$value+FirstUpperCase);
end

def trigger(groupingSelection)
	catalog.clusterManager((element, grouping, group, session) -> $name+firstUpperCase.Arrangements.createGroup(box, element, grouping, group, session));
end

def trigger(hasMagazineView)
	catalog.rootObjectLoader((objectList, range, session) -> $name+firstUpperCase.Source.root$type+shortType+firstUpperCase(box, (java.util.List<$type>)(Object)objectList[, $mode+timerange], session));
	catalog.defaultObjectLoader((id, range, session) -> $name+firstUpperCase.Source.default$type+shortType+firstUpperCase(box, id[, $mode+timerange], session));
end

def trigger(hasArrangements)
	catalog.arrangementFiltererLoader((session) -> $name+firstUpperCase.Arrangements.filterer(box, session));
end

def trigger(toolbar)
	private static io.intino.konos.alexandria.activity.model.Toolbar buildToolbar($box+firstUpperCase~Box box) {
		io.intino.konos.alexandria.activity.model.Toolbar toolbar = new Toolbar();
		toolbar.canSearch($canSearch);
		$operation...[$NL]
		return toolbar;
	}
end

def type(openDialog) trigger(event)
	openDialog(new io.intino.konos.alexandria.activity.model.catalog.events.OpenDialog()[.height($height)][.width($width)].dialogType("$dialog").dialogBuilder((item, session) -> {
		io.intino.konos.alexandria.activity.displays.AlexandriaDialog dialog = $package+validPackage.dialogs.Dialogs.dialogFor(box, "$dialog");
		dialog.target(item);
		return dialog;
	}))
end

def type(openPanel) trigger(event)
	openPanel(new io.intino.konos.alexandria.activity.model.catalog.events.OpenPanel()
		[.breadcrumbs($breadCrumbs)]
		.panel((io.intino.konos.alexandria.activity.model.Panel) Displays.displayFor(box, "$panel").element()))
end

def type(openCatalog) trigger(event)
	openCatalog(new io.intino.konos.alexandria.activity.model.catalog.events.OpenCatalog()
		[.itemLoader($openCatalogLoader)]
		[.filter($openCatalogFilter)]
		.catalog((io.intino.konos.alexandria.activity.model.Catalog) Displays.displayFor(box, "$catalog").element()))
end

def trigger(breadCrumbs)
	(object, session) -> $catalog+FirstUpperCase.Events.onOpenPanelBreadcrumbs(box, ($type) object, session)
end

def trigger(openCatalogLoader)
	(element, sender, session) -> $catalog+FirstUpperCase.Events.onOpenCatalog(box, element, ($type) sender, session)
end

def trigger(openCatalogFilter)
	(element, sender, item, session) -> $catalog+FirstUpperCase.Events.onOpenCatalogFilter(box, element, ($type) sender, item, session)
end

def type(operation & download) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Download().execute((element, option, session) -> $catalog+FirstUpperCase.Toolbar.download(box, element, option, session)).name("$name")[.title("$title")][.alexandriaIcon("$icon"]));
end

def type(operation & export) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Export().execute((element, from, to, session) -> $catalog+FirstUpperCase.Toolbar.export(box, element, from, to, session)).name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & openDialog) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.OpenDialog().dialogType("$dialog").dialogBuilder((session) -> $package+validPackage.dialogs.Dialogs.dialogFor(box, "$dialog")).name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & task) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Task().execute((element, from, to, session) -> $catalog+FirstUpperCase.Toolbar.task(box, element, from, to, session)).name("$name")[.title("$title")][.alexandriaIcon("$icon")]);
end

def type(operation & downloadselection) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.DownloadSelection().execute((element, option, selection, session) -> $catalog+firstUpperCase.Toolbar.downloadSelection(box, element, option, (java.util.List<$type>)(Object)selection, session)).name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & exportselection) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.ExportSelection().execute((element, from, to, selection, session) -> $catalog+firstUpperCase.Toolbar.exportSelection(box, element, from, to, (java.util.List<$type>)(Object)selection, session)).name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(operation & groupingselection) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.GroupingSelection()[.name("$name")][.title("$title")][.alexandriaIcon("$icon"))];
end

def type(operation & taskselection) trigger(operation)
	toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.TaskSelection().execute((element, option, selection, session) -> $catalog+firstUpperCase.Toolbar.taskSelection(box, element, option, (java.util.List<$type>)(Object)selection, session)).name("$name").title("$title").alexandriaIcon("$icon"));
end

def type(listview) trigger(add)
	result.add(new io.intino.konos.alexandria.activity.model.catalog.views.ListView()[.noRecordsMessage("$noRecordMessage")][.width($width)].mold((io.intino.konos.alexandria.activity.model.Mold) $package.displays.Displays.displayFor(box, "$mold").element()).name("$name")[.label("$label")]);
end

def type(gridview) trigger(add)
	result.add(new io.intino.konos.alexandria.activity.model.catalog.views.GridView()[.noRecordsMessage("$noRecordMessage")][.width($width)].mold((io.intino.konos.alexandria.activity.model.Mold) $package.displays.Displays.displayFor(box, "$mold").element()).name("$name")[.label("$label")]);
end

def type(mapview) trigger(add)
	result.add(new io.intino.konos.alexandria.activity.model.catalog.views.MapView()[.center(new io.intino.konos.alexandria.activity.model.catalog.views.MapView.Center().latitude($latitude).longitude($longitude))][.$zoom].mold((Mold) Displays.displayFor(box, "$mold").element()).name("$name").label("$label"));
end

def type(magazineview) trigger(add)
	result.add(new io.intino.konos.alexandria.activity.model.catalog.views.MagazineView()[.noRecordMessage("$noRecordMessage")][.width($width)].mold((Mold) Displays.displayFor(box, "$mold").element()).name("$name").label("$label"));
end

def type(displayview) trigger(add)
	result.add(new io.intino.konos.alexandria.activity.model.catalog.views.DisplayView()
		.scopeManager((display, scope) -> $catalog+FirstUpperCase.Views.$display+firstLowerCase~Scope(box, display, scope))[
		.hideNavigator($hideNavigator)]
		.displayLoader((context, loadingListener, instantListener, session) -> $catalog+FirstUpperCase.Views.$display+firstLowerCase(box, (io.intino.konos.alexandria.activity.model.Element)context, loadingListener, instantListener, session))
		.name("$name").label("$label"));
end

def type(sorting) trigger(add)
	arrangements.add(new io.intino.konos.alexandria.activity.model.catalog.arrangement.Sorting().comparator((object1, object2) -> $catalog+FirstUpperCase.Arrangements.$name+FirstLowerCase~Comparator(($type)object1, ($type)object2)).name("$name").label("$label"));
end

def type(grouping) trigger(add)
	arrangements.add(new io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping()[.histogram(io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping.Histogram.$histogram)].groups((objects, session) -> $catalog+FirstUpperCase.Arrangements.$name+FirstLowerCase(box, (List<$type>)(Object)objects, session)).name("$name")[.label("$label")]);
end

def trigger(zoom)
	zoom(new io.intino.konos.alexandria.activity.model.catalog.views.MapView.Zoom()[.defaultZoom($default)][.max($max)][.min($min)])
end