def type(tanks)
	package $package+validPackage.datalake;

	import io.intino.alexandria.jms.TopicConsumer;
	import io.intino.alexandria.jms.TopicProducer;
	import io.intino.alexandria.nessaccessor.NessAccessor;
	import io.intino.alexandria.jms.Consumer;
	import io.intino.alexandria.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	[$tankImport]
	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.HashMap;

	public class Datalake {
		$tank+field...[$NL]

		public static void registerTanks($box+firstUppercase~Box box) {
			final String clientID = $clientId;
			$tank+assign...[$NL]
			$tank+subscribe...[$NL]
		}

		public static List<io.intino.ness.core.Datalake.EventStore.Tank> all() {
			List<io.intino.ness.core.Datalake.EventStore.Tank> tanks = new ArrayList<>();
			$tank+add...[$NL]
			return tanks;
		}

		public static List<io.intino.ness.core.Datalake.EventStore.Tank> byName(List<String> names) {
			return all().stream().filter(t -> names.contains(t.name())).collect(java.util.stream.Collectors.toList());
		}

		public static io.intino.ness.core.Datalake.EventStore.Tank byName(String type) {
			return all().stream().filter(t -> type.equals(t.name())).findFirst().orElse(null);
		}

		$tank+getter...[$NL$NL]

		$tank+class...[$NL$NL]

		public static void unsubscribeAll(NessAccessor accessor) {
			$tank+unsubscribe...[$NL]
		}
	}
end

def type(custom) trigger(clientId)
	box.configuration().get("$value");
end

def trigger(clientId)
	"$value"
end

def type(tank) trigger(unsubscribe)
	accessor.eventStore().unsubscribe($name+firstLowerCase);
end

def type(tank) trigger(field)
	private static io.intino.ness.core.Datalake.EventStore.Tank $name+firstLowerCase;
end

def type(tank) trigger(assign)
	$name+firstLowerCase = box.nessAccessor().eventStore().tank("$messageType+lowerCase");
end

def type(tank) trigger(add)
	tanks.add(Datalake.$name+firstLowerCase);
end

def type(tank) trigger(getter)
	public static io.intino.ness.core.Datalake.EventStore.Tank $name+firstLowerCase() {
		return Datalake.$name+firstLowerCase;
	}
end

def type(tank) type(mounter | input) trigger(subscribe)
	box.nessAccessor().eventStore().subscribe($name+firstLowerCase).using(clientID != null ? clientID + "-$name+lowerCase" : null, new AgentDeleteHandler(box));
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def type(tank & mounter) trigger(class)
	public static class $name+snakeCaseToCamelCase+FirstUpperCase~Handler implements io.intino.ness.core.Datalake.EventStore.MessageHandler {
		private final $box+firstUppercase~Box box;

		public $name+snakeCaseToCamelCase+FirstUpperCase~Handler($box+firstUppercase~Box box) {
			this.box = box;
		}

		public void handle(io.intino.alexandria.inl.Message m) {
			try {
				$name+snakeCaseToCamelCase+FirstUpperCase~Mounter mounter = new $name+snakeCaseToCamelCase+FirstUpperCase~Mounter();
				mounter.box = box;
				mounter.$type+typeName = $type+load;
				mounter.execute();
			} catch(Throwable e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).error(e.getMessage(), e);
			}
		}
	}
end

def type(tank & input) trigger(class)
	public static class $name+snakeCaseToCamelCase+FirstUpperCase~Handler implements io.intino.ness.core.Datalake.EventStore.MessageHandler {
		private final $box+firstUppercase~Box box;

		public $name+snakeCaseToCamelCase+FirstUpperCase~Handler($box+firstUppercase~Box box) {
			this.box = box;
		}

		public void handle(io.intino.alexandria.inl.Message m) {
			try {
				$handler...[$NL]
			} catch(Throwable e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).error(e.getMessage(), e);
			}
		}
	}
end


def trigger(handler)
	$processPackage+lowerCase.$processName+snakeCaseToCamelCase+FirstUpperCase~Process $processName+snakeCaseToCamelCase+FirstLowerCase = new $processPackage+lowerCase.$processName+snakeCaseToCamelCase+FirstUpperCase~Process();
	$processName+snakeCaseToCamelCase+FirstLowerCase.box = box;
	$processName+snakeCaseToCamelCase+FirstLowerCase.$type+typeName = $type+load;
	$processName+snakeCaseToCamelCase+FirstLowerCase.outputs = java.util.Arrays.asList($output+quoted+lowercase...[, ]);
	$processName+snakeCaseToCamelCase+FirstLowerCase.execute();
end

def trigger(replace)
	.replace("{$value}", configuration().$conf+firstLowerCase~Configuration.$value+validname+firstLowerCase)
end

def trigger(tankImport)
	import $value+validPackage.datalake.mounters.*;
end

def type(schema) trigger(load)
	io.intino.alexandria.inl.Inl.fromMessage(m, $package.schemas.$name+FirstUpperCase.class)
end

def trigger(load)
	m
end

def type(schema) trigger(typeName)
	$name+firstLowerCase
end

def trigger(typeName)
	message
end

def trigger(quoted)
	"$value"
end