def type(display & accessible)
import Notifier from "./Notifier";

export default class $name+firstUpperCase~Notifier extends Notifier {

    constructor(element) {
        super(element);
        this.setup();
    };

    setup() {
    	super.setup();
		if (this.element == null || this.pushLinked) return;
		this.when("refreshBaseUrl").toSelf().execute((parameters) => this.element.refreshBaseUrl(parameters.v));
		this.when("refreshError").toSelf().execute((parameters) => this.element.refreshError(parameters.v));
		this.pushLinked = true;
    };
}
end

def type(display)
import Notifier from "./Notifier";

export default class $name+firstUpperCase~Notifier extends Notifier {

    constructor(element) {
        super(element);
        this.setup();
    };

    setup() {
		super.setup();
		if (this.element == null || this.pushLinked) return;
		$notification...[$NL]
		this.pushLinked = true;
    };
}
end

def trigger(notification)
	this.when("$name")[$target].execute(([$parameter+call]) => this.element.$name([$parameter+value]));
end

def type(parameter) trigger(call)
	parameters
end

def type(parameter) trigger(value)
	parameters.v
end

def attribute(Display) trigger(target)
	.toSelf()
end

def trigger(target)
end