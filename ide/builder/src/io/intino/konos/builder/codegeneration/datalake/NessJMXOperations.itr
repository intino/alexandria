def type(interface)
	package $package+validPackage.ness;

	import io.intino.konos.jmx.Description;
	import io.intino.konos.jmx.Parameters;

	public interface NessOperationsMBean {
		@Description("Shows information about the available operations")
		@Parameters({})
		java.util.List<String> help();

    	@Description("Starts remount mode to reproduce events coming from datalake")
		@Parameters({})
    	boolean reflow();
    }
end

def type(operations) !type(interface)
	package $package+validPackage.ness;

	import $package+validPackage.$box+FirstUpperCase~Box;
    import io.intino.konos.jmx.JMXServer;
	import io.intino.konos.datalake.Ness;
    import io.intino.tara.magritte.Graph;
    import io.intino.tara.magritte.RemounterGraph;
    import io.intino.tara.magritte.Store;
    import io.intino.tara.magritte.stores.FileSystemStore;
    import org.apache.commons.io.FileUtils;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import java.io.IOException;
    import java.time.Instant;
	import java.util.*;

	import static org.slf4j.Logger.ROOT_LOGGER_NAME;
    import static java.time.temporal.ChronoUnit.SECONDS;

	public class NessOperations implements NessOperationsMBean {

		private static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);
    	private final $box+FirstUpperCase~Box box;
    	private final ReflowAssistant assistant;
    	private int processed = 0;
		private Ness.ReflowSession session;

    	public NessOperations($box+FirstUpperCase~Box box) {
    		this.box = box;
    		this.assistant = new $package+validPackage.ness.ReflowAssistant(box);
    	}

    	public java.util.List<String> help() {
			java.util.List<String> operations = new java.util.ArrayList<>();
			operations.add("boolean reflow():Starts remount mode to reproduce events coming from datalake");
			return operations;
		}

		public boolean reflow() {
			logger.info("Starting Reflow...");
			assistant.before();
			$package+validPackage.ness.NessTanks.unregister();
			this.session = box.datalake().reflow(assistant.blockSize(), new $package+validPackage.ness.NessTanks(), assistant.tanks().toArray(new Ness.Tank$[0]));
			box.datalake().lastMessage(null);
			box.datalake().reset();
			final Graph graph = assistant.graph();
			try {
				if (graph.store() instanceof FileSystemStore) FileUtils.deleteDirectory(((FileSystemStore) graph.store()).directory());
				final RemounterGraph original = (RemounterGraph) new RemounterGraph(graph.store()).loadStashes(assistant.coreStashes());
				allowWriting(original, false);
				Graph clone = original.realClone();
				box.put(clone);
				this.session.next();
				timerTask(clone).run();
			} catch (IOException e) {
				logger.error(e.getMessage(), e);
				return false;
			}
			return true;
		}

		private TimerTask timerTask(Graph clone) {
			return new TimerTask() {
				@Override
				public void run() {
					Graph newClone = write(clone);
					if (finished()) {
						doWrite(clone);
						onFinish(clone);
					} else new Timer("Reflow task", true).schedule(timerTask(newClone), 5000);
				}
			};
		}

		private Graph write(Graph clone) {
			if (box.datalake().receivedMessages() < assistant.blockSize()) return clone;
			Graph result = doWrite(clone);
			box.datalake().reset();
			this.session.next();
			return result;
		}

		private Graph doWrite(Graph clone) {
			logger.info("processed " + (processed += box.datalake().receivedMessages()));
			session.pause();
			allowWriting(clone, true);
			assistant.saveGraph(clone);
			final Graph newClone = new RemounterGraph(clone.store()).loadStashes(assistant.coreStashes());
			allowWriting(newClone, false);
			box.put(newClone);
			session.play();
			return newClone;
		}

		private void allowWriting(Graph original, boolean flag) {
			if (original.store() instanceof FileSystemStore) ((FileSystemStore) original.store()).allowWriting(flag);
		}

		private void onFinish(Graph clone) {
			session.finish();
			box.put(new Graph(clone.store()).loadStashes(assistant.coreStashes()));
			assistant.after();
			logger.info("Reflow finished successfully!");
		}

		private boolean finished() {
			return box.datalake().lastMessage() != null && box.datalake().lastMessage().until(Instant.now(), SECONDS) > 120;
		}

		public static JMXServer init($box+FirstUpperCase~Box box) {
			JMXServer server = new JMXServer(Collections.singletonMap("$package.ness.NessOperations", new Object$[]{box}));
			server.init();
			return server;
		}
	}
end