def type(interface)
	package $package+validPackage.ness;

	import io.intino.konos.jmx.Description;
	import io.intino.konos.jmx.Parameters;

	public interface NessOperationsMBean {
		@Description("Shows information about the available operations")
		@Parameters({})
		java.util.List<String> help();

    	@Description("Starts remount mode to reproduce events coming from datalake")
		@Parameters({})
    	boolean reflow();
    }
end

def type(operations) !type(interface)
	package $package+validPackage.ness;

	import $package+validPackage.$box+FirstUpperCase~Box;
    import io.intino.konos.jmx.JMXServer;
    import io.intino.tara.magritte.Graph;
    import io.intino.tara.magritte.RemounterGraph;
    import io.intino.tara.magritte.Store;
    import io.intino.tara.magritte.stores.FileSystemStore;
    import org.apache.commons.io.FileUtils;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;
	import java.io.IOException;
    import java.time.Instant;
	import java.util.*;

	import static org.slf4j.Logger.ROOT_LOGGER_NAME;
    import static java.time.temporal.ChronoUnit.SECONDS;

	public class NessOperations implements NessOperationsMBean {

		private static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);
    	private final $box+FirstUpperCase~Box box;
    	private final GraphProvider provider;

    	public NessOperations($box+FirstUpperCase~Box box) {
    		this.box = box;
    		this.provider = new $package+validPackage.ness.GraphProvider(box);
    	}

    	public java.util.List<String> help() {
			java.util.List<String> operations = new java.util.ArrayList<>();
			operations.add("boolean reflow():Starts remount mode to reproduce events coming from datalake");
			return operations;
		}

    	public boolean reflow() {
			logger.info("Starting Reflow...");
			box.close();
			box.datalake().lastMessage(null);
			final Graph graph = provider.graph();
			final Store oldStore = graph.store();
			try {
				if (oldStore instanceof FileSystemStore) FileUtils.deleteDirectory(((FileSystemStore) oldStore).directory());
				final RemounterGraph original = (RemounterGraph) new RemounterGraph(provider.store()).loadStashes(provider.coreStashes());
				allowWriting(original, false);
				Graph clone = original.realClone();
				box.put(clone);
				box.open();
				timerTask(clone).run();
			} catch (IOException e) {
				e.printStackTrace();
				return false;
			}
			return true;
		}

		private TimerTask timerTask(Graph clone) {
			return new TimerTask() {
				@Override
				public void run() {
					Graph newClone = write(clone);
					if (finished()) {
						doWrite(clone);
						onFinish();
					} else new Timer(true).schedule(timerTask(newClone), 5000);
				}
			};
		}

		private Graph write(Graph clone) {
			if (box.datalake().receivedMessages() < 1E4) return clone;
			box.datalake().reset();
			logger.info("Processed " + (processed += 1E4));
			return doWrite(clone);
		}

		private Graph doWrite(Graph clone) {
			box.close();
			allowWriting(clone, true);
			provider.saveGraph(clone);
			final Graph newClone = new RemounterGraph(provider.store()).loadStashes(provider.coreStashes());
			allowWriting(newClone, false);
			box.put(newClone);
			box.open();
			return newClone;
		}

		private void allowWriting(Graph original, boolean flag) {
			if (original.store() instanceof FileSystemStore) ((FileSystemStore) original.store()).allowWriting(flag);
		}

		private void onFinish() {
			box.close();
			box.put(new Graph(provider.store()).loadStashes(provider.coreStashes()));
			box.open();
			logger.info("Reflow Finished successfully...");
		}

		private boolean finished() {
			return box.datalake().lastMessage() != null && box.datalake().lastMessage().until(Instant.now(), SECONDS) > 5;
		}

		public static JMXServer init($box+FirstUpperCase~Box box) {
			JMXServer server = new JMXServer(Collections.singletonMap("$package.ness.NessOperations", new Object$[]{box}));
			server.init();
			return server;
		}
	}
end