def type(interface)
	package $package+validPackage.datalake;

	import io.intino.alexandria.jmx.Description;
	import io.intino.alexandria.jmx.Parameters;

	public interface NessOperationsMBean {
		@Description("Shows information about the available operations")
		@Parameters({})
		java.util.List<String> help();

    	@Description("Starts reflow mode to reproduce events coming from datalake")
		@Parameters({})
    	boolean reflow();
    }
end

def type(operations) !type(interface)
	package $package+validPackage.datalake;

	import io.intino.alexandria.inl.Message;
    import io.intino.alexandria.jmx.JMXServer;
    import io.intino.alexandria.logger.Logger;
    import io.intino.ness.core.Datalake.EventStore.MessageHandler;
    import io.intino.tara.magritte.Graph;
	import $package+validPackage.$box+FirstUpperCase~Box;

	import java.util.Collections;

	import static io.intino.ness.core.Datalake.EventStore.Reflow.Filter;

	public class NessOperations implements NessOperationsMBean {
		private final $box+FirstUpperCase~Box box;
		private final ReflowAssistant assistant;
		private int processed = 0;
		private io.intino.ness.core.Datalake.EventStore.Reflow session;
		private Graph graph;

		public NessOperations($box+FirstUpperCase~Box box) {
			this.box = box;
			this.assistant = new $package+validPackage.datalake.ReflowAssistant(box);
		}

		public java.util.List<String> help() {
			java.util.List<String> operations = new java.util.ArrayList<>();
			operations.add("boolean reflow():Starts reflow mode to reproduce events coming from datalake");
			operations.add("boolean reflow(String from):Starts reflow mode to reproduce events coming from datalake since the instant parameter");
			operations.add("boolean customReflow(String reflowConfiguration):Starts reflow mode to reproduce events coming from datalake since the instant parameter");
			return operations;
		}

		public boolean reflow() {
			return reflow(assistant.filter());
		}

		private boolean reflow(Filter filter) {
			Logger.info("Starting Reflow...");
			assistant.onStart();
			$package+validPackage.datalake.Datalake.unsubscribeAll(box.nessAccessor());
			this.session = box.nessAccessor().eventStore().reflow(filter);
			this.session.next(assistant.defaultBlockSize(), messageHandler());
			return true;
		}

		private MessageHandler messageHandler() {
			return new ReflowHandler();
		}

		public static JMXServer init($box+FirstUpperCase~Box box) {
			JMXServer server = new JMXServer(Collections.singletonMap("$package+validPackage.datalake.NessOperations", new Object$[]{box}));
			server.init();
			return server;
		}

		private class ReflowHandler implements MessageHandler, io.intino.ness.core.Datalake.EventStore.ReflowHandler {

			@Override
			public void handle(Message message) {
				Datalake.handlers().get(message.type().toLowerCase()).handle(message);
			}

			@Override
			public void onBlock(int processedMessages) {
				assistant.onBlock();
				Logger.info("Block processed - " + processedMessages + " messages processed");
				session.next(assistant.defaultBlockSize(), this);
			}

			@Override
			public void onFinish(int processedMessages) {
				//session.finish();
				assistant.onFinish();
				Datalake.registerTanks(box);
				Logger.info("Reflow finished - " + processedMessages + " messages processed");
			}
		}
	}
end