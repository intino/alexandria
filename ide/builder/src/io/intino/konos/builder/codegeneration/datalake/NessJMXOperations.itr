def type(interface)
	package $package+validPackage.ness;

	import io.intino.konos.jmx.Description;
	import io.intino.konos.jmx.Parameters;

	public interface NessOperationsMBean {
		@Description("Shows information about the available operations")
		@Parameters({})
		java.util.List<String> help();

    	@Description("Starts remount mode to reproduce events coming from datalake")
		@Parameters({})
    	boolean reflow();

    	@Description("Starts remount mode to reproduce events coming from datalake since instant parameter")
		@Parameters({})
		boolean reflow(String fromInstant);
    }
end

def type(operations) !type(interface)
	package $package+validPackage.ness;

	import io.intino.konos.datalake.MessageHandler;
	import io.intino.konos.datalake.ReflowDispatcher;
	import io.intino.konos.jmx.JMXServer;
	import io.intino.tara.magritte.Graph;
	import io.intino.tara.magritte.RemounterGraph;
	import io.intino.tara.magritte.stores.FileSystemStore;
	import org.apache.commons.io.FileUtils;
	import org.siani.adquiver.analytics.box.AnalyticsBox;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

	import java.io.IOException;
	import java.time.Instant;
	import java.util.Collections;

	import static org.slf4j.Logger.ROOT_LOGGER_NAME;

	public class NessOperations implements NessOperationsMBean {
		private static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);
		private final AnalyticsBox box;
		private final ReflowAssistant assistant;
		private int processed = 0;
		private io.intino.konos.datalake.Datalake.ReflowSession session;
		private Graph graph;

		public NessOperations(AnalyticsBox box) {
			this.box = box;
			this.assistant = new $package+validPackage.ness.ReflowAssistant(box);
		}

		public java.util.List<String> help() {
			java.util.List<String> operations = new java.util.ArrayList<>();
			operations.add("boolean reflow():Starts remount mode to reproduce events coming from datalake");
			return operations;
		}

		public boolean reflow(String from) {
			return reflow(Instant.parse(from));
		}

		public boolean reflow() {
			return reflow(Instant.MIN);
		}

		public boolean reflow(Instant from) {
			logger.info("Starting Reflow...");
			assistant.before();
			$package+validPackage.ness.NessTanks.unregister();
			this.session = box.datalake().reflow(assistant.blockSize(), new ReflowDispatcher(assistant.tanks(), onBlock(), onFinish()), from);
			final Graph graph = assistant.graph();
			try {
				if (graph.store() instanceof FileSystemStore && from.equals(Instant.MIN))
					FileUtils.deleteDirectory(((FileSystemStore) graph.store()).directory());
				final RemounterGraph original = (RemounterGraph) new RemounterGraph(graph.store()).loadStashes(assistant.coreStashes());
				allowWriting(original, false);
				this.graph = original.realClone();
				box.put(this.graph);
				this.session.next();
			} catch (IOException e) {
				logger.error(e.getMessage(), e);
				return false;
			}
			return true;
		}

		private MessageHandler onFinish() {
			return m -> {
				doWrite();
				session.finish();
				final Graph graph = new Graph(NessOperations.this.graph.store());
				allowWriting(graph, true);
				box.put(graph.loadStashes(assistant.coreStashes()));
				NessTanks.registerTanks(box);
				assistant.after();
				logger.info("Reflow finished - " + m.get("count") + " messages processed");
			};
		}

		private MessageHandler onBlock() {
			return m -> {
				doWrite();
				logger.info("Block processed - " + m.get("count") + " messages processed");
				session.next();
			};
		}

		private void doWrite() {
			session.pause();
			allowWriting(graph, true);
			assistant.saveGraph(graph);
			this.graph = new RemounterGraph(graph.store()).loadStashes(assistant.coreStashes());
			allowWriting(graph, false);
			box.put(graph);
			session.play();
		}

		private void allowWriting(Graph original, boolean flag) {
			if (original.store() instanceof FileSystemStore) ((FileSystemStore) original.store()).allowWriting(flag);
		}


		public static JMXServer init($box+FirstUpperCase~Box box) {
			JMXServer server = new JMXServer(Collections.singletonMap("$package.ness.NessOperations", new Object$[]{box}));
			server.init();
			return server;
		}
	}
end