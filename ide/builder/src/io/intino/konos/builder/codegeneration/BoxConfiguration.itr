def type(boxConfiguration)
	package $package;

	public class $name+SnakeCaseToCamelCase+firstUpperCase~Configuration extends [$parent~Configuration?io.intino.konos.BoxConfiguration] {

		$service+field...[$NL]

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration(String$[] args) {
			super(args);
			fillWithArgs();
		}

		private void fillWithArgs() {
			[if (this.store == null && args.get("graph.store") != null)
				$tara+empty~store = new java.io.File(args.remove("graph.store"));]
			$service+fill...[$NL][
			$service+auth...[$NL]]
		}

		[$tara+empty~public java.io.File store() {
			return this.store;
		}][

		$service...[$NL$NL]

		$service+confClass...[$NL$NL]]
	}
end

def type(service) trigger(field)
	$name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration;
end

def type(service & rest) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.port"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(toInt(args.remove("$name+firstLowerCase.port")), args.remove("$name+firstLowerCase.webDirectory")[, $custom+parameter...[, ]]);
end

def type(service & jms) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.url"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(args.remove("$name+firstLowerCase.url"), args.remove("$name+firstLowerCase.user"), args.remove("$name+firstLowerCase.password")[, $custom+parameter...[, ]]);
end

def type(service & bus) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.url"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(args.remove("$name+firstLowerCase.url"), args.remove("$name+firstLowerCase.user"), args.remove("$name+firstLowerCase.password"), args.remove("$name+firstLowerCase.clientID")[, $custom+parameter...[, ]], args.remove("$name+firstLowerCase.productionPaths"));
end

def type(service & channel) trigger(fill)
	set$name+snakeCaseToCamelCase+firstUpperCase~Configuration($custom+parameter...[, ]);
end

def type(service & slack) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.token"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(args.remove("$name+firstLowerCase.token"));
end

def type(service & activity) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.port"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(toInt(args.remove("$name+firstLowerCase.port")), args.remove("$name+firstLowerCase.webDirectory")[, $custom+parameter...[, ]]);
end

def type(service & jmx) trigger(fill)
	if (args.containsKey("$name+firstLowerCase.port"))
		$name+snakeCaseToCamelCase+firstLowerCase~Configuration(args.get("localhostIp"), toInt(args.remove("$name+firstLowerCase.port")));
end

def type(service & auth) type(rest | activity) trigger(auth)
	$name+snakeCaseToCamelCase+firstLowerCase~Configuration.authService = Setup.authService(this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.authServiceUrl());
end

def type(service) trigger(auth)
end

def type(service & rest) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public int port;
		public String webDirectory;
		$custom+field...[$NL]
	}
end

def type(service & jms) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public String url;
		public String user;
		public String password;
		$custom+field...[$NL]
	}
end

def type(service & channel) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		[public String clientID = "$clientID"];
		$custom+field...[$NL]
	}
end

def type(service & bus) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public String url;
		public String user;
		public String password;
		public String clientID;
		public java.util.List<String> productionPaths;
	}
end

def type(service & jmx) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public String localhostIP;
		public int port;
	}
end

def type(service & slack) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public String token;
	}
end

def type(service & activity) trigger(confClass)
	public static class $name+snakeCaseToCamelCase+firstUpperCase~Configuration {
		public int port;
		public String webDirectory;
		public io.intino.konos.server.activity.services.AuthService authService;
		$custom+field...[$NL]

		[public java.net.URL authServiceUrl() {
			try {
				return new java.net.URL("$auth"$custom+replace...[]);
			} catch (java.net.MalformedURLException e) {
				return null;
			}
		}]
	}
end

def type(custom) trigger(replace)
	.replace("{$name}", $name+validname+firstLowerCase)
end



def type(service & jms)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(String url, String user, String password[, $custom+signature...[, ]]) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.url = url;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.user = user;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.password = password;
		$custom+assign...[$NL]
		return this;
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end


def type(service & jmx)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(String localhostIP, int port) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.localhostIP = localhostIP;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.port = port;
		return this;
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end

def type(service & slack)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(String token) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.token = token;
		return this;
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end


def type(service & bus)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(String url, String user, String password, String clientID[, $custom+signature...[, ]], String... productionPaths) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.url = url;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.user = user;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.password = password;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.clientID = clientID;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.productionPaths = java.util.Arrays.asList(productionPaths);
		return this;
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end

def type(service & channel)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration set$name+snakeCaseToCamelCase+firstUpperCase~Configuration($custom+signature...[, ]) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		$custom+assign...[$NL]
		return this;
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end

def type(durable) trigger(assign)
	[$name+snakeCaseToCamelCase+firstLowerCase~Configuration.clientID ]
end

def type(service & rest)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(int port, String webDirectory[, $custom+signature...[, ]]) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.port = port;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory = webDirectory == null ? "www/" : webDirectory;

		$custom+assign...[$NL]
		return this;
	}

	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(int port[, $custom+signature...[, ]]) {
		return $name+snakeCaseToCamelCase+firstLowerCase~Configuration(port, "www/"[, $custom+name...[, ]]);
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return $name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end


def type(service & activity)
	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(int port, String webDirectory[, $custom+signature...[, ]]) {
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration = new $name+snakeCaseToCamelCase+firstUpperCase~Configuration();
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.port = port;
		this.$name+snakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory = webDirectory == null ? "www/" : webDirectory;
		$custom+assign...[$NL]
		return this;
	}

	public $configuration+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration(int port[, $custom+signature...[, ]]) {
		return $name+snakeCaseToCamelCase+firstLowerCase~Configuration(port, "www/"[, $custom+name...[, ]]);
	}

	public $name+snakeCaseToCamelCase+firstUpperCase~Configuration $name+snakeCaseToCamelCase+firstLowerCase~Configuration() {
		return $name+snakeCaseToCamelCase+firstLowerCase~Configuration;
	}
end

def type(custom) trigger(signature)
	$type $name+validname+firstLowerCase
end
def type(custom) trigger(name)
	$name+validname+firstLowerCase
end

def type(custom) trigger(field)
	public $type $name+validname+firstLowerCase;
end

def type(custom) trigger(assign)
	this.$conf+validname+firstLowerCase~Configuration.$name+validname+firstLowerCase = $name+validname+firstLowerCase;
end

def type(custom) trigger(parameter)
	args.remove("$conf+firstLowerCase.$name+validname+firstLowerCase")
end


def trigger(empty)
end
