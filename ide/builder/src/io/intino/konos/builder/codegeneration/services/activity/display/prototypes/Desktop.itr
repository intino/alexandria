def type(desktop & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaDesktop;
    import io.intino.konos.alexandria.activity.model.Desktop;
	import io.intino.konos.alexandria.activity.utils.Base64;
	import io.intino.konos.alexandria.activity.utils.IOUtils;

	import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~Notifier;

    import java.net.MalformedURLException;
    import java.net.URL;

	public abstract class Abstract$name+firstUpperCase extends AlexandriaDesktop<$name+firstUpperCase~Notifier> {

    	public Abstract$name+firstUpperCase($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildDesktop(box));
    	}

    	private static Desktop buildDesktop($box+firstUpperCase~Box box) {
    		Desktop desktop = new Desktop();
    		[desktop.title("$title");]
    		[desktop.subtitle("$subtitle");]
    		[desktop.logo(toBase64(Abstract$name+firstUpperCase.class.getResourceAsStream("$logo")));]
    		[desktop.favicon(toBase64(Abstract$name+firstUpperCase.class.getResourceAsStream("$favicon")));]
    		desktop.layoutDisplayProvider(() -> $package+validPackage.displays.$name+firstUpperCase.layout(box));
    		return desktop;
    	}

    	private static String toBase64(java.io.InputStream resource) {
			try {
				if (resource == null) return "";
				return "data:image/png;base64," + Base64.encode(toByteArray(resource));
			} catch (java.io.IOException e) {
				return "";
			}
		}

		private static byte$[] toByteArray(java.io.InputStream input) throws java.io.IOException {
			java.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();
			IOUtils.copy(input, output);
			return output.toByteArray();
		}
    }
end

def type(desktop)
	package $package.displays;

	import $package+validPackage.$box+firstUpperCase~Box;
	import io.intino.konos.alexandria.activity.displays.AlexandriaLayout;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

        public $name+FirstUpperCase($box+FisrtUpperCase~Box box) {
            super(box);
        }

		public static AlexandriaLayout layout($box+FisrtUpperCase~Box box) {
			return new $layout+FirstUpperCase(box);
		}
    }
end