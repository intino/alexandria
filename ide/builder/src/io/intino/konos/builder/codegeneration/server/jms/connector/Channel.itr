def type(channel)
	package $package+validPackage.bus;

	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	import io.intino.konos.jms.*;
	$schemaImport

	import javax.jms.*;

	public class $name+firstUppercase~Channel {

		public static void init(Session session, $box~Box box) {
			$box+firstUpperCase~Configuration.$name+firstUpperCase~Configuration configuration = box.configuration().$name+firstLowerCase~Configuration();
			$subscription...[$NL]
		}

		private static class $name+FirstUpperCase~Subscription implements Consumer {

            	private $box+firstUpperCase~Box box;

            	public $name+FirstUpperCase~Subscription($box+firstUpperCase~Box box) {
            		this.box = box;
            	}

            	public void consume(Message message) {
            		actionFor(message).execute();
            	}

            	private $package.actions.$name+firstUpperCase~Action actionFor(Message message) {
        			final $package.actions.$name+firstUpperCase~Action action = new $package.actions.$name+firstUpperCase~Action();
        			action.box = this.box;
        			action.message = textFrom(message);
        			return action;
        		}
		}
	}
end

def type(subscription)
	new $type~Consumer(session, $path+format).listen(new $name+firstUpperCase~Subscription(box)[, $durable]);
end

def type(durable) trigger(durable)
	configuration.clientID[$custom+replace...[]]
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def type(path) trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", configuration.$value+validname+firstLowerCase)
end


def type(schemaImport)
	import $package.schemas.*;
end