package io.intino.konos.builder.codegeneration;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class AbstractBoxTemplate extends Template {

	protected AbstractBoxTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new AbstractBoxTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "box"))).add(literal("package ")).add(mark("package")).add(literal(";\n\nimport java.util.LinkedHashMap;\nimport java.util.logging.Logger;\nimport java.util.Map;\nimport java.util.UUID;\nimport java.util.logging.ConsoleHandler;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n")).add(expression().add(mark("hasREST")).add(literal("import io.intino.konos.server.KonosSpark;"))).add(literal("\n")).add(expression().add(literal("import io.intino.tara.magritte.Graph;")).add(mark("tara", "import"))).add(literal("\n\npublic class Abstract")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box extends ")).add(expression().add(mark("parent")).add(literal("Box")).or(expression().add(literal("io.intino.konos.Box")))).add(literal(" {\n\tprivate static Logger LOG = Logger.getGlobal();\n\t")).add(expression().add(mark("hasParent")).or(expression().add(literal("protected ")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Configuration configuration;")))).add(expression().add(literal("\n")).add(literal("\t")).add(mark("service", "field").multiple("\n"))).add(expression().add(literal("\n")).add(literal("\t")).add(mark("dataLake", "field").multiple("\n"))).add(expression().add(literal("\n")).add(literal("\t")).add(mark("task", "field"))).add(literal("\n\n\tpublic Abstract")).add(expression().add(mark("tara", "SnakeCaseToCamelCase", "FirstUpperCase")).or(expression().add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")))).add(literal("Box(String[] args) {\n\t\tthis(new ")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Configuration(args));\n\n\t}\n\t\n\tpublic Abstract")).add(expression().add(mark("tara", "SnakeCaseToCamelCase", "FirstUpperCase")).or(expression().add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")))).add(literal("Box(")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Configuration configuration) {\n\t\t")).add(expression().add(mark("hasParent")).add(literal("super(configuration);"))).add(literal("\n\t\tinitLogger();\n\t\tconfiguration.args().entrySet().forEach((e) -> box.put(e.getKey(), e.getValue()));\n\t\t")).add(expression().add(mark("hasntParent")).add(literal("this.configuration = configuration;"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("service", "setup").multiple("\n"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("activity", "setup").multiple("\n"))).add(literal("\n\n\t}\n\t")).add(expression().add(mark("graph", "getter"))).add(literal("\n\n\t")).add(expression().add(mark("tara")).add(literal("protected abstract Graph initGraph();"))).add(literal("\n\n\tpublic ")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("Configuration configuration() {\n\t\treturn (")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("Configuration) configuration;\n\t}\n\t")).add(expression().add(literal("\n")).add(literal("\t")).add(mark("service", "getter").multiple("\n\n"))).add(literal("\n\n\t")).add(mark("dataLake", "getter").multiple("\n\n")).add(literal("\n\n\t")).add(mark("task", "getter").multiple("\n\n")).add(literal("\n\n\tpublic Abstract")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Box open() {")).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("tara", "hide")).add(literal("box.put(initGraph());"))).add(literal("\n\t\tinit();\n\t\tstart();\n\t\treturn this;\n\t}\n\n\tpublic void init() {")).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("parent", "parentInit")).add(literal("super.init();")).or(expression().add(literal(" ")))).add(literal("\n\t\tinitActivities();\n\t\tinitRESTServices();\n\t\tinitJMXServices();\n\t\tinitJMSServices();\n\t\tinitDataLake();\n\t\tinitTasks();\n\t\tinitSlackBots();\n\t}\n\n\tpublic void start() {\n\t}\n\n\tvoid close() {\n\t\tterminate();\n\t}\n\n\tprotected void terminate() {\n\t\t")).add(mark("service", "quit").multiple("\n")).add(literal("\n\t\t")).add(mark("dataLake", "quit").multiple("\n")).add(literal("\n\t}\n\tprivate void initRESTServices() {\n\t\t")).add(mark("service", "rest").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initJMSServices() {\n\t\t")).add(expression().add(mark("jms")).add(literal("javax.jms.Connection connection;"))).add(literal("\n\t\t")).add(mark("service", "jms").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initJMXServices() {\n\t\t")).add(mark("service", "jmx").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initSlackBots() {\n\t\t")).add(mark("service", "slack").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initActivities() {\n\t\t")).add(mark("activity").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initDataLake() {\n\t\t")).add(mark("dataLake", "init").multiple("\n")).add(literal("\n\t}\n\n\tprivate void initTasks() {\n\t\t")).add(mark("task", "init").multiple("\n")).add(literal("\n\t}\n\n\tpublic void stopJMSServices() {\n\n\t}\n\n\tprivate void initLogger() {\n\t\tfinal Logger logger = Logger.getGlobal();\n\t\tfinal ConsoleHandler handler = new ConsoleHandler();\n\t\thandler.setLevel(Level.INFO);\n\t\thandler.setFormatter(new io.intino.konos.LogFormatter(\"log\"));\n\t\tlogger.addHandler(handler);\n\t}\n}")),
			rule().add((condition("type", "graph")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("package")).add(literal(".")).add(mark("name")).add(literal("View view() {\n\treturn ((io.intino.tara.magritte.Graph) box().get(graphID)).view(")).add(mark("package")).add(literal(".")).add(mark("name")).add(literal("View.class);\n}")),
			rule().add((condition("type", "activity")), (condition("trigger", "setup"))).add(literal("io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.port")).add(expression().add(literal(", configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.webDirectory"))).add(literal(", configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.authService);")),
			rule().add((condition("type", "service & rest")), (condition("trigger", "setup"))).add(literal("io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.port")).add(expression().add(literal(", configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.webDirectory"))).add(literal(", null);")),
			rule().add((condition("type", "dataLake")), (condition("trigger", "init"))).add(literal("this.ness = new io.intino.konos.datalake.Ness(configuration().nessConfiguration().url, configuration().nessConfiguration().user, configuration().nessConfiguration().password, configuration().nessConfiguration().clientID);\nthis.ness.start();\nNessEvents.addHandlers((")).add(mark("configuration")).add(literal("Box) this);")),
			rule().add((condition("type", "service & jmx")), (condition("trigger", "jmx"))).add(literal("this.")).add(mark("name", "SnakeCaseToCamelCase", "FirstLowerCase")).add(literal(" = new JMX")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("().init(((")).add(mark("configuration")).add(literal("Box) this));")),
			rule().add((condition("type", "service & slack")), (condition("trigger", "slack"))).add(literal("if (configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration == null) return;\nthis.")).add(mark("name", "SnakeCaseToCamelCase", "FirstLowerCase")).add(literal(" = new ")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("SlackBot((")).add(mark("configuration")).add(literal("Box) this);")),
			rule().add((condition("type", "service & rest")), (condition("trigger", "rest"))).add(literal("if (configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration == null) return;\n")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Resources.setup(io.intino.konos.server.activity.ActivityKonosSpark.instance(), (")).add(mark("configuration")).add(literal("Box) this);")),
			rule().add((condition("type", "activity")), (condition("trigger", "activity"))).add(literal("if (configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration == null) return;\n")).add(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).add(literal("Activity.init(io.intino.konos.server.activity.ActivityKonosSpark.instance(), (")).add(mark("configuration")).add(literal("Box) this);")),
			rule().add((condition("type", "service & jms")), (condition("trigger", "jms"))).add(literal("if (configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration == null) return;\ntry {\n\tconnection = new org.apache.activemq.ActiveMQConnectionFactory(configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.user, configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.password, configuration().")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal("Configuration.url).createConnection();\n\tconnection.start();\n\tthis.")).add(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).add(literal(" = new ")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("Service(connection, (")).add(mark("configuration")).add(literal("Box) this);\n} catch (javax.jms.JMSException e) {\n\tLOG.severe(e.getMessage());\n}")),
			rule().add((condition("type", "service & jmx")), (condition("trigger", "field"))).add(literal("private io.intino.konos.jmx.JMXServer ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(";")),
			rule().add((condition("type", "service & slack")), (condition("trigger", "field"))).add(literal("private io.intino.konos.slack.Bot ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(";")),
			rule().add((condition("type", "service & jms")), (condition("trigger", "field"))).add(literal("private ")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("Service ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(";")),
			rule().add((condition("type", "task")), (condition("trigger", "field"))).add(literal("private io.intino.konos.scheduling.KonosTasker tasker = new io.intino.konos.scheduling.KonosTasker();")),
			rule().add((condition("type", "dataLake")), (condition("trigger", "field"))).add(literal("private io.intino.konos.datalake.Ness ness;")),
			rule().add((condition("type", "service & jms")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("Service ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal("() {\n\treturn ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(";\n}")),
			rule().add((condition("type", "dataLake")), (condition("trigger", "getter"))).add(literal("public io.intino.konos.datalake.Ness datalake() {\n\treturn this.ness;\n}")),
			rule().add((condition("type", "service & slack")), (condition("trigger", "getter"))).add(literal("public ")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("SlackBot ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal("() {\n\treturn (")).add(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).add(literal("SlackBot) ")).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(";\n}")),
			rule().add((condition("type", "service")), (condition("trigger", "getter"))),
			rule().add((condition("type", "service")), (condition("type", "rest | activity")), (condition("trigger", "quit"))).add(literal("spark.Spark.stop();")),
			rule().add((condition("type", "service")), (condition("type", "jms")), (condition("trigger", "quit"))).add(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).add(literal(".closeSession();")),
			rule().add((condition("type", "dataLake")), (condition("trigger", "quit"))).add(literal("ness.closeSession();")),
			rule().add((condition("type", "service")), (condition("trigger", "quit"))),
			rule().add((condition("type", "service"))),
			rule().add((condition("type", "task")), (condition("trigger", "init"))).add(literal("Tasks.init(this.tasker, (")).add(mark("configuration")).add(literal("Box) this);")),
			rule().add((condition("type", "task")), (condition("trigger", "getter"))).add(literal("public io.intino.konos.scheduling.KonosTasker tasker() {\n\treturn this.tasker;\n}")),
			rule().add((condition("trigger", "import"))),
			rule().add((condition("trigger", "parentInit"))),
			rule().add((condition("trigger", "hide")))
		);
		return this;
	}
}