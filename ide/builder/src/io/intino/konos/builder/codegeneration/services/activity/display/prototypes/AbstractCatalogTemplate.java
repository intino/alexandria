package io.intino.konos.builder.codegeneration.services.activity.display.prototypes;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class AbstractCatalogTemplate extends Template {

	protected AbstractCatalogTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new AbstractCatalogTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "catalog & gen"))).add(literal("package ")).add(mark("package")).add(literal(".displays;\n\nimport io.intino.konos.alexandria.activity.displays.AlexandriaCatalog;\nimport io.intino.konos.alexandria.activity.model.AbstractView;\nimport io.intino.konos.alexandria.activity.model.Catalog;\nimport io.intino.konos.alexandria.activity.model.Mold;\nimport io.intino.konos.alexandria.activity.model.Toolbar;\nimport io.intino.konos.alexandria.activity.model.catalog.arrangement.Arrangement;\nimport io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping;\nimport io.intino.konos.alexandria.activity.model.catalog.views.DisplayView;\nimport io.intino.konos.alexandria.activity.model.catalog.events.OnClickRecord;\nimport io.intino.konos.alexandria.activity.model.catalog.views.GridView;\nimport io.intino.konos.alexandria.activity.model.catalog.views.ListView;\nimport io.intino.konos.alexandria.activity.model.catalog.views.MapView;\nimport io.intino.konos.alexandria.activity.model.toolbar.*;\nimport ")).add(mark("package", "validPackage")).add(literal(".")).add(mark("box", "firstUpperCase")).add(literal("Box;\nimport ")).add(mark("package", "validPackage")).add(literal(".displays.notifiers.")).add(mark("name", "firstUpperCase")).add(literal("Notifier;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic abstract class Abstract")).add(mark("name", "FirstUpperCase")).add(literal(" extends AlexandriaCatalog<")).add(mark("name", "FirstUpperCase")).add(literal("Notifier> {\n\n\tpublic Abstract")).add(mark("name", "FirstUpperCase")).add(literal("(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\t\tsuper(box);\n\t\telement(buildCatalog(box));\n\t}\n\n\tprivate static Catalog buildCatalog(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\t\tio.intino.konos.alexandria.activity.model.Catalog catalog = new io.intino.konos.alexandria.activity.model.Catalog();\n\t\tcatalog.objectsLoader((scope, condition, username) -> (java.util.List<Object>)(Object) ")).add(mark("name", "firstUpperCase")).add(literal(".Source.")).add(mark("type", "shortType", "firstLowerCase")).add(literal("List(box, scope, condition, username));\n\t\tcatalog.rootObjectLoader((objectList, username) -> ")).add(mark("name", "firstUpperCase")).add(literal(".Source.root")).add(mark("type", "shortType", "firstUpperCase")).add(literal("(box, (java.util.List<")).add(mark("type")).add(literal(">)(Object)objectList, username));\n\t\tcatalog.defaultObjectLoader((id, username) -> ")).add(mark("name", "firstUpperCase")).add(literal(".Source.default")).add(mark("type", "shortType", "firstUpperCase")).add(literal("(box, id, username));")).add(expression().add(literal("\n")).add(literal("\t\tcatalog.events().onClickRecord(new OnClickRecord().")).add(mark("event")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("hasArrangements")).add(literal("catalog.arrangementFiltererLoader((username) -> ")).add(mark("name", "firstUpperCase")).add(literal(".Arrangements.filterer(box, username));"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("groupingselection", "empty")).add(literal("catalog.clusterManager((element, grouping, group, username) -> ")).add(mark("name", "firstUpperCase")).add(literal(".Arrangements.createGroup(box, element, grouping, group, username))"))).add(expression().add(literal("\n")).add(literal("\t\t\t")).add(mark("toolbar", "empty")).add(literal(".toolbar(buildToolbar(box))"))).add(expression().add(literal("\n")).add(literal("\t\t\t.name(\"")).add(mark("name")).add(literal("\")"))).add(expression().add(literal("\n")).add(literal("\t\t\t.label(\"")).add(mark("label")).add(literal("\")"))).add(literal("\n\t\t\t.objectLoader((id, username) -> ")).add(mark("name", "firstUpperCase")).add(literal(".Source.")).add(mark("type", "shortType", "firstLowerCase")).add(literal("(box, id, username))\n\t\t\t.objectIdLoader(object -> ")).add(mark("name", "firstUpperCase")).add(literal(".Source.")).add(mark("type", "shortType", "firstLowerCase")).add(literal("Id(box, (")).add(mark("type")).add(literal(")object))\n\t\t\t.objectNameLoader(object -> ")).add(mark("name", "firstUpperCase")).add(literal(".Source.")).add(mark("type", "shortType", "firstLowerCase")).add(literal("Name(box, (")).add(mark("type")).add(literal(") object));\n\t\tbuildViews(box).forEach(v -> catalog.add(v));\n\n\t\tbuildArrangements(box).forEach(a -> catalog.add(a));\n\t\treturn catalog;\n\t}\n\t")).add(expression().add(literal("\n")).add(literal("\t")).add(mark("toolbar")).add(literal("\n")).add(literal("\t"))).add(literal("\n\tprivate static java.util.List<AbstractView> buildViews(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\t\tList<AbstractView> result = new ArrayList<>();\n\t\t")).add(mark("view", "add").multiple("\n")).add(literal("\n\t\treturn result;\n\t}\n\n\tprivate static java.util.List<Arrangement> buildArrangements(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\t\tList<Arrangement> arrangements = new ArrayList<>();\n\t\t")).add(mark("arrangement", "add").multiple("\n")).add(literal("\n\t\treturn arrangements;\n\t}\n}")),
			rule().add((condition("trigger", "empty"))),
			rule().add((condition("trigger", "toolbar"))).add(literal("private static io.intino.konos.alexandria.activity.model.Toolbar buildToolbar(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\tio.intino.konos.alexandria.activity.model.Toolbar toolbar = new Toolbar();\n\ttoolbar.canSearch(")).add(mark("canSearch")).add(literal(");\n\t")).add(mark("operation").multiple("\n")).add(literal("\n\treturn toolbar;\n}")),
			rule().add((condition("type", "openDialog")), (condition("trigger", "event"))).add(literal("openDialog(new io.intino.konos.alexandria.activity.model.catalog.events.OpenDialog()")).add(expression().add(literal(".height(")).add(mark("height")).add(literal(")"))).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".path(record -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Events.onOpenDialogPath(box, record)))")),
			rule().add((condition("type", "openPanel")), (condition("trigger", "event"))).add(literal("openPanel(new io.intino.konos.alexandria.activity.model.catalog.events.OpenPanel()\n\t")).add(expression().add(literal(".breadcrumbs(")).add(mark("breadCrumbs")).add(literal(")"))).add(literal("\n\t.panel((io.intino.konos.alexandria.activity.model.Panel) ElementDisplays.displayFor(box, \"")).add(mark("panel")).add(literal("\").element()))")),
			rule().add((condition("trigger", "breadCrumbs"))).add(literal("(record, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Events.onOpenPanelBreadcrumbs(box, (")).add(mark("type")).add(literal(") record, username)")),
			rule().add((condition("type", "operation & download")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Download().execute((element, option, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Toolbar.download(box, element, option, username)).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".title(\"")).add(mark("title")).add(literal("\")"))).add(expression().add(literal(".alexandriaIcon(\"")).add(mark("icon")).add(literal("\""))).add(literal("));")),
			rule().add((condition("type", "operation & export")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Export().execute((element, from, to, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Toolbar.export(box, element, from, to, username)).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".title(\"")).add(mark("title")).add(literal("\")"))).add(expression().add(literal(".alexandriaIcon(\"")).add(mark("icon")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("type", "operation & openDialog")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.OpenDialog().execute((element, from, to, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Toolbar.openDialog(box, element, from, to, username)).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".title(\"")).add(mark("title")).add(literal("\")"))).add(expression().add(literal(".alexandriaIcon(\"")).add(mark("icon")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("type", "operation & task")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.Task().execute((element, from, to, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Toolbar.task(box, element, from, to, username)).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".title(\"")).add(mark("title")).add(literal("\")"))).add(expression().add(literal(".alexandriaIcon(\"")).add(mark("icon")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("type", "operation & downloadselection")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.DownloadSelection().execute((element, option, selection, username) -> ")).add(mark("catalog", "firstUpperCase")).add(literal(".Toolbar.downloadSelection(box, element, option, (java.util.List<")).add(mark("type")).add(literal(">)(Object)selection, username)).name(\"")).add(mark("name")).add(literal("\").title(\"")).add(mark("title")).add(literal("\").alexandriaIcon(\"")).add(mark("icon")).add(literal("\"));")),
			rule().add((condition("type", "operation & exportselection")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.ExportSelection().execute((element, from, to, selection, username) -> ")).add(mark("catalog", "firstUpperCase")).add(literal(".Toolbar.exportSelection(box, element, from, to, (java.util.List<")).add(mark("type")).add(literal(">)(Object)selection, username)).name(\"")).add(mark("name")).add(literal("\").title(\"")).add(mark("title")).add(literal("\").alexandriaIcon(\"")).add(mark("icon")).add(literal("\"));")),
			rule().add((condition("type", "operation & groupingselection")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.GroupingSelection()")).add(expression().add(literal(".name(\"")).add(mark("name")).add(literal("\")"))).add(expression().add(literal(".title(\"")).add(mark("title")).add(literal("\")"))).add(expression().add(literal(".alexandriaIcon(\"")).add(mark("icon")).add(literal("\"))"))).add(literal(";")),
			rule().add((condition("type", "operation & taskselection")), (condition("trigger", "operation"))).add(literal("toolbar.add(new io.intino.konos.alexandria.activity.model.toolbar.TaskSelection().execute((element, option, selection, username) -> ")).add(mark("catalog", "firstUpperCase")).add(literal(".Toolbar.removeElements(box, element, option, (java.util.List<")).add(mark("type")).add(literal(">)(Object)selection, username)).name(\"")).add(mark("name")).add(literal("\").title(\"")).add(mark("title")).add(literal("\").alexandriaIcon(\"")).add(mark("icon")).add(literal("\"));")),
			rule().add((condition("type", "listview")), (condition("trigger", "add"))).add(literal("result.add(new io.intino.konos.alexandria.activity.model.catalog.views.ListView()")).add(expression().add(literal(".noRecordsMessage(\"")).add(mark("noRecordMessage")).add(literal("\")"))).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".mold((io.intino.konos.alexandria.activity.model.Mold) ")).add(mark("package")).add(literal(".displays.ElementDisplays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("type", "gridview")), (condition("trigger", "add"))).add(literal("result.add(new io.intino.konos.alexandria.activity.model.catalog.views.GridView()")).add(expression().add(literal(".noRecordsMessage(\"")).add(mark("noRecordMessage")).add(literal("\")"))).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".mold((io.intino.konos.alexandria.activity.model.Mold) ")).add(mark("package")).add(literal(".displays.ElementDisplays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("type", "mapview")), (condition("trigger", "add"))).add(literal("result.add(new io.intino.konos.alexandria.activity.model.catalog.views.MapView()")).add(expression().add(literal(".center(new io.intino.konos.alexandria.activity.model.catalog.views.MapView.Center().latitude(")).add(mark("latitude")).add(literal(").longitude(")).add(mark("longitude")).add(literal("))"))).add(expression().add(literal(".")).add(mark("zoom"))).add(literal(".mold((Mold) ElementDisplays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).name(\"")).add(mark("name")).add(literal("\").label(\"")).add(mark("label")).add(literal("\"));")),
			rule().add((condition("type", "magazineview")), (condition("trigger", "add"))).add(literal("result.add(new io.intino.konos.alexandria.activity.model.catalog.views.MagazineView()")).add(expression().add(literal(".noRecordMessage(\"")).add(mark("noRecordMessage")).add(literal("\")"))).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".mold((Mold) ElementDisplays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).name(\"")).add(mark("name")).add(literal("\").label(\"")).add(mark("label")).add(literal("\"));")),
			rule().add((condition("type", "displayview")), (condition("trigger", "add"))).add(literal("result.add(new io.intino.konos.alexandria.activity.model.catalog.views.DisplayView()\n\t.scopeManager((display, scope) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Views.")).add(mark("display", "firstLowerCase")).add(literal("Scope(box, display, scope))")).add(expression().add(literal("\n")).add(literal("\t.hideNavigator(")).add(mark("hideNavigator")).add(literal(")"))).add(literal("\n\t.displayLoader((context, loadingListener, instantListener, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Views.")).add(mark("display", "firstLowerCase")).add(literal("(box, (io.intino.konos.alexandria.activity.model.Element)context, loadingListener, instantListener, username))\n\t.name(\"")).add(mark("name")).add(literal("\").label(\"")).add(mark("label")).add(literal("\"));")),
			rule().add((condition("type", "sorting")), (condition("trigger", "add"))).add(literal("arrangements.add(new io.intino.konos.alexandria.activity.model.catalog.arrangement.Sorting().comparator((object1, object2) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Arrangements.")).add(mark("name", "FirstLowerCase")).add(literal("Comparator((")).add(mark("type")).add(literal(")object1, (")).add(mark("type")).add(literal(")object2)).name(\"")).add(mark("name")).add(literal("\").label(\"")).add(mark("label")).add(literal("\"));")),
			rule().add((condition("type", "grouping")), (condition("trigger", "add"))).add(literal("arrangements.add(new io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping()")).add(expression().add(literal(".histogram(io.intino.konos.alexandria.activity.model.catalog.arrangement.Grouping.Histogram.")).add(mark("histogram")).add(literal(")"))).add(literal(".groups((objects, username) -> ")).add(mark("catalog", "FirstUpperCase")).add(literal(".Arrangements.")).add(mark("name", "FirstLowerCase")).add(literal("(box, (List<")).add(mark("type")).add(literal(">)(Object)objects, username)).name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(literal(");")),
			rule().add((condition("trigger", "zoom"))).add(literal("zoom(new io.intino.konos.alexandria.activity.model.catalog.views.MapView.Zoom()")).add(expression().add(literal(".defaultZoom(")).add(mark("default")).add(literal(")"))).add(expression().add(literal(".max(")).add(mark("max")).add(literal(")"))).add(expression().add(literal(".min(")).add(mark("min")).add(literal(")"))).add(literal(")"))
		);
		return this;
	}
}