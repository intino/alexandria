package io.intino.konos.builder.codegeneration.accessor.ui;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class DialogWidgetTemplate extends Template {

	protected DialogWidgetTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new DialogWidgetTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "dialog"))).add(literal("<link rel=\"import\" href=\"../../lib/polymer/polymer.html\">\n<link rel=\"import\" href=\"../../lib/iron-flex-layout/iron-flex-layout.html\">\n<link rel=\"import\" href=\"../../lib/cotton-push/cotton-push-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-carrier/cotton-carrier-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-zombie/cotton-zombie.html\">\n<link rel=\"import\" href=\"../../lib/cotton-translator/cotton-translator-behavior.html\">\n\n<script src=\"")).add(mark("name", "lowercase")).add(literal("widget/requester.js\"></script>\n<script src=\"")).add(mark("name", "lowercase")).add(literal("widget/notifier-listener.js\"></script>\n\n<dom-module id=\"")).add(mark("name", "lowercase")).add(literal("-widget\">\n\n    <template>\n        <iframe id=\"frame\" class=\"dialog\" src=\"[[delegateUrl]]\"></iframe>\n    </template>\n\n    <style>\n        :host iframe {\n            border: 0;\n            overflow: auto;\n            width: 100%;\n            height: 100%;\n            border-radius: 2px;\n        }\n    </style>\n\n    <script>\n        const DialogDelegate = \"konos/dialog.html\";\n\n        const ")).add(mark("name", "firstUpperCase")).add(literal("WidgetDictionary = {\n            es: {\n            },\n            en: {\n            }\n        };\n\n        Polymer({\n            is: '")).add(mark("name")).add(literal("-widget',\n\n            behaviors: [ CottonBehaviors.CarrierBehavior,\n                CottonBehaviors.PushBehavior,\n                CottonBehaviors.TranslatorBehavior,\n                ")).add(mark("name", "firstUpperCase")).add(literal("WidgetBehaviors.Requester,\n                ")).add(mark("name", "firstUpperCase")).add(literal("WidgetBehaviors.NotifierListener ],\n\n            properties : {\n                _dialog : Object,\n                delegateUrl : String\n            },\n\n            attached : function() {\n                this.translate(")).add(mark("name", "firstUpperCase")).add(literal("WidgetDictionary);\n                this.listenToDisplay();\n                this._initDelegate();\n            },\n\n            _initDelegate : function() {\n                this.delegateUrl = this._getUrl() + \"/\" + DialogDelegate + \"?random=\" + Math.random();\n                this.$.frame.onload = this._loadDelegate.bind(this);\n            },\n\n            _render : function(dialog) {\n                this._dialog = dialog;\n                this._loadDelegate();\n            },\n\n            _refresh: function(validation) {\n                if (this.delegate == null) return;\n                var modifiedInputs = JSON.parse(validation.modifiedInputs);\n                this.delegate.sendMessage(validation.input, validation.status, validation.message);\n                this.delegate.refresh(modifiedInputs);\n                if (modifiedInputs.length > 0)\n                    this.delegate.focus(validation.input);\n            },\n\n            _configuration : function() {\n                return {\n                    language: this.getLanguage(),\n                    uploadEndPoint: this._uploadInputFileEndPoint.bind(this),\n                    downloadEndPoint: this._downloadInputFileEndPoint.bind(this)\n                }\n            },\n\n            _uploadInputFileEndPoint : function(input) {\n                return this._getUrl() + '/dialog/' + this.name + '/input/' + input.label + \"/file\";\n            },\n\n\n            _downloadInputFileEndPoint : function(input) {\n                return this._getUrl() + '/dialog/' + this.name + '/input/' + input.label + \"/file/\" + input.value;\n            },\n\n            _inputChanged : function(input, value) {\n                this.update({ name: input.label, value: value });\n            },\n\n            _operationExecuted : function(operation, parameters) {\n                this.execute();\n            },\n\n            _getUrl: function() {\n                var url = this.getProperty(\"url\");\n                if (url.charAt(url.length-1) == \"/\")\n                    url = url.substring(0, url.length-1);\n                return url;\n            },\n\n            getProperty: function(name) {\n                var widget = this;\n\n                while (widget != null && widget.getAttribute(name) == null)\n                    widget = widget.parentElement;\n\n                if (widget == null)\n                    return \"\";\n\n                return widget.getAttribute(name);\n            },\n\n            _loadDelegate : function() {\n                if (this._dialog == null) return;\n\n                var frame = this.$.frame;\n                var delegate = (frame.contentWindow || frame.contentDocument).document;\n                if (!delegate.render) return;\n\n                this.delegate = delegate;\n                this.delegate.render(JSON.parse(this._dialog.definition), this._configuration());\n                this.delegate.onInputChange = this._inputChanged.bind(this);\n                this.delegate.onOperation = this._operationExecuted.bind(this);\n            }\n\n\n        });\n    </script>\n</dom-module>"))
		);
		return this;
	}
}