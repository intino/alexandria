def type(server)
	package $package+ValidPackage;

	import io.intino.alexandria.rest.AlexandriaSpark;
	import $package+ValidPackage.rest.resources.*;
	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.rest.security.DefaultSecurityManager;
	import io.intino.alexandria.rest.spark.SparkPushService;

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Service {

		public static AlexandriaSpark setup(AlexandriaSpark server, $box+FirstUpperCase~Box box) {
			$secure
			$hasNotifications
			$notification...[$NL]
			$resource...[$NL]

			return server;
		}
	}
end

def type(secure)
	server.secure(new DefaultSecurityManager(new java.io.File("$file"), "$password"));
end

def trigger(notification)
	server.route("$path+format").post(manager -> new $package.rest.notifications.$name+firstUpperCase+SnakeCaseToCamelCase~Notification(box, manager).execute());
end

def type(resource)
	server.route($path+format).$method+firstlowerCase(manager -> new $operation+firstUpperCase~$name+firstUpperCase+SnakeCaseToCamelCase~Resource(box, manager).execute());
end

def type(path) trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", box.configuration().get("$value"))
end

def trigger(hasNotifications)
	if (!io.intino.alexandria.rest.AlexandriaSparkBuilder.isUI()) server.route("/push").push(new SparkPushService());
end