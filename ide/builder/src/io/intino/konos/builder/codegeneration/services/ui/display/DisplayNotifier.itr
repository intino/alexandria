def type(display)
	package $package+validPackage.displays.notifiers;

	import io.intino.konos.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

    public class $name+FirstUpperCase~Notifier extends $type {

        public $name+FirstUpperCase~Notifier(io.intino.konos.alexandria.ui.displays.AlexandriaDisplay display, io.intino.konos.alexandria.ui.displays.MessageCarrier carrier) {
            super(display, carrier);
        }

		$notification...[$NL$NL]
    }
end

def attribute(display) trigger(type)
	io.intino.konos.alexandria.ui.displays.AlexandriaDisplayNotifier
end

def attribute(desktop) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaDesktopNotifier
end

def attribute(panel) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaPanelNotifier
end

def attribute(catalog) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaCatalogNotifier
end

def attribute(temporalTimeCatalog) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaTemporalTimeCatalogNotifier
end

def attribute(temporalRangeCatalog) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaTemporalRangeCatalogNotifier
end

def attribute(mold) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaMoldNotifier
end

def attribute(MenuLayout) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaMenuLayoutNotifier
end

def attribute(TabLayout) trigger(type)
	io.intino.konos.alexandria.ui.displays.notifiers.AlexandriaTabLayoutNotifier
end

def type(notification) trigger(notification)
	public void $name+firstLowercase([$parameter value]) {
		put[$target]("$name+firstLowercase"[, "value", $parameter+empty~value]);
	}
end

def type(parameter) trigger(empty)
end

def type(list) trigger(parameter)
    java.util.List<$value>
end

def trigger(parameter)
    $value
end

def type(schemaImport)
	import $package.schemas.*;
end

def attribute(All) trigger(target)
	ToAll
end

def attribute(Display) trigger(target)
	ToDisplay
end

def attribute(Client) trigger(target)
end