def type(resource)
	package $package.resources;

	import java.util.List;
	import java.util.ArrayList;
	import io.intino.konos.alexandria.exceptions.*;
	import $package.*;
	import io.intino.konos.alexandria.Box;
	import io.intino.konos.alexandria.rest.Resource;
	import io.intino.konos.alexandria.rest.spark.SparkManager;
	$schemaImport

	public class $operation+firstUpperCase$name+firstUpperCase~Resource implements Resource {

		private $box+FirstUpperCase~Box box;
		private SparkManager manager;[
		$authenticationValidator+field]

		public $operation+firstUpperCase$name+firstUpperCase~Resource($box+FirstUpperCase~Box box, SparkManager manager) {
			this.box = box;
			this.manager = manager;
			$authenticationValidator+assign
		}

		public void execute() throws $throws...[, ] {[
			$authenticationValidator+validate]
			[$returnType+writeCall]fill(new $package+validPackage.actions.$operation+firstUpperCase$name+firstUpperCase~Action()).execute()[$returnType+ending];
		}

		private $package+validPackage.actions.$operation+firstUpperCase$name+firstUpperCase~Action fill($package+validPackage.actions.$operation+firstUpperCase$name+firstUpperCase~Action action) {
			action.box = this.box;
			action.context = context();[
			$parameter+assign...[$NL]]
			return action;
		}
		[
		$returnType+write]

		private io.intino.konos.alexandria.schema.Context context() {
			io.intino.konos.alexandria.schema.Context context = new io.intino.konos.alexandria.schema.Context();
			context.put("domain", manager.domain());
			context.put("baseUrl", manager.baseUrl());
			context.put("requestUrl", manager.request().url());
			return context;
		}
	}
end

def attribute(void) trigger(writeCall)
end

def trigger(writeCall)
	write(
end

def attribute(void) trigger(ending)
end

def trigger(ending)
	)
end

def attribute(void) trigger(write)
end

def trigger(write)
	private void write($value+firstUpperCase+ReturnTypeFormatter object) {
		manager.write(object[, "$format"]);
	}
end

def type(parameter) trigger(type)
	$parameterType
end

def type(parameter) trigger(assign)
	action.$name+SnakeCaseToCamelCase+firstLowerCase = manager.from$in+firstUpperCase("$name", $parameterType);
end

def type(list) trigger(parameterType)
	com.google.gson.reflect.TypeToken.getParameterized(java.util.ArrayList.class, $value.class).getType()
end

def type(authenticationValidator) trigger(field)
	io.intino.konos.alexandria.rest.security.$type+FirstUpperCase~AuthenticationValidator validator;
end

def type(authenticationValidator) trigger(assign)
	this.validator = box.authenticationValidator();
end

def type(authenticationValidator) trigger(validate)
	if (!validator.validate(manager.fromHeader("Authorization", String.class).replace("Basic ", ""))) throw new Unauthorized("Credential not found");
end

def trigger(parameterType)
	$value.class
end

def type(schemaImport)
	import $package.schemas.*;
end