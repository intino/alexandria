def type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.logging.Logger;
	import java.util.Map;
	import java.util.UUID;
	[$hasREST~import io.intino.konos.server.KonosSpark;]
	[import io.intino.tara.magritte.Graph;$tara+import]

	public class $name+SnakeCaseToCamelCase+FirstUpperCase~Box extends [$parentPackage.konos.$parent+FirstUpperCase~Box?io.intino.konos.Box] {
		private static Logger LOG = Logger.getGlobal();
		[$hasParent?protected $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration;]
		[$hasParent?protected Map<String, Object> map = new LinkedHashMap<>();][
		$service+field...[$NL]][
		$bus+field...[$NL]][
		$task+field]

		[$tara~private String graphID;]

        public [$tara+SnakeCaseToCamelCase+FirstUpperCase?$name+SnakeCaseToCamelCase+firstUpperCase]~Box([$tara~io.intino.tara.magritte.Graph graph, ][$tara+SnakeCaseToCamelCase+FirstUpperCase?$name+SnakeCaseToCamelCase+firstUpperCase]Configuration configuration) {
            [$hasParent~super(configuration);
            ][$tara~map.put(graphID = UUID.randomUUID().toString(), graph);]
            this.configuration = configuration;[
            $service+setup...[$NL]][
            $activity+setup...[$NL]]
        }

        public io.intino.tara.magritte.Graph graph() {
            return (io.intino.tara.magritte.Graph) map().get(graphID);
        }


		public $name+SnakeCaseToCamelCase+firstUpperCase~Box($name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration) {
			[$hasParent~super(configuration);
			]this.configuration = configuration;[
			$service+setup...[$NL]][
			$activity+setup...[$NL]]
		}

		protected Map<String, Object> map() {
			return map;
		}

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration() {
			return ($name+SnakeCaseToCamelCase+firstUpperCase~Configuration) configuration;
		}

		$service+getter...[$NL$NL]
        $bus+getter...[$NL$NL]
		$task+getter...[$NL$NL]

		public <T> T get(Class<T> tClass) {
			return (T) map().values().stream().filter(tClass::isInstance).findFirst().orElse(null);
		}


		public <T> T get(String object, Class<T> tClass) {
			return (T) map().get(object);
		}

		public $name+SnakeCaseToCamelCase+firstUpperCase~Box put(String name, Object object) {
			map().put(name, object);
			return this;
		}

		public void init() {[
			$parent+parentInit~super.init();? ]
			initActivities();
			initRESTServices();
			initJMXServices();
			initJMSServices();
			initBuses();
			initTasks();
			initSlackBots();
		}

		private void initRESTServices() {
			$service+rest...[$NL]
		}

		private void initJMSServices() {
			[javax.jms.Connection connection;
			$service+jms...[$NL]]
		}

		private void initJMXServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initActivities() {
			$activity...[$NL]
		}

		private void initBuses() {
			$bus+init...[$NL]
		}

		private void initTasks() {
			$task+init...[$NL]
		}

		public void stopJMSServices() {

		}

	}
end

def type(activity) trigger(setup)
	io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.port[, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory], configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.authService);
end

def type(service & rest) trigger(setup)
	io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.port[, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory], null);
end

def type(bus) trigger(init)
	this.$name+SnakeCaseToCamelCase+firstLowerCase~Bus = new $package+lowercase.bus.$name+SnakeCaseToCamelCase+firstUpperCase~Bus(this);
end

def type(service & jmx) trigger(jmx)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new JMX$name+SnakeCaseToCamelCase+FirstUpperCase().init(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.port, this);
end

def type(service & slack) trigger(slack)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new $name+SnakeCaseToCamelCase+FirstUpperCase~SlackBot(this);
end

def type(service & rest) trigger(rest)
	$name+SnakeCaseToCamelCase+FirstUpperCase~Resources.setup(io.intino.konos.server.activity.ActivityKonosSpark.instance(), this);
end

def type(activity) trigger(activity)
	$name+SnakeCaseToCamelCase+FirstUpperCase~Activity.init(io.intino.konos.server.activity.ActivityKonosSpark.instance(), this);
end

def type(service & jms) trigger(jms)
	try {
		connection = new org.apache.activemq.ActiveMQConnectionFactory(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.user, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.password, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.url).createConnection();
		connection.start();
		this.$name+SnakeCaseToCamelCase+firstLowerCase = new $name+SnakeCaseToCamelCase+firstUpperCase~JMSService(connection.createSession(false, javax.jms.Session.AUTO_ACKNOWLEDGE), this);
	} catch (javax.jms.JMSException e) {
		LOG.severe(e.getMessage());
	}
end

def type(service & jmx) trigger(field)
	private io.intino.konos.jmx.JMXServer $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & slack) trigger(field)
	private io.intino.konos.slack.Bot $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & jms) trigger(field)
	private $name+SnakeCaseToCamelCase+firstUpperCase~JMSService $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(task) trigger(field)
	private io.intino.konos.scheduling.KonosTasker tasker = new io.intino.konos.scheduling.KonosTasker();
end

def type(bus) trigger(field)
	private $package.bus.$name+SnakeCaseToCamelCase+firstUpperCase~Bus $name+SnakeCaseToCamelCase+firstLowerCase~Bus;
end

def type(service & jms) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~JMSService $name+SnakeCaseToCamelCase+firstlowerCase() {
		return $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(bus) trigger(getter)
	public $package.bus.$name+SnakeCaseToCamelCase+firstUpperCase~Bus $name+SnakeCaseToCamelCase+firstlowerCase~Bus() {
		return $name+SnakeCaseToCamelCase+firstlowerCase~Bus;
	}
end

def type(service & slack) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~SlackBot $name+SnakeCaseToCamelCase+firstlowerCase() {
		return ($name+SnakeCaseToCamelCase+firstUpperCase~SlackBot) $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def type(service)
end

def type(task) trigger(init)
	Tasks.init(this.tasker, this);
end

def type(task) trigger(getter)
	public io.intino.konos.scheduling.KonosTasker tasker() {
		return this.tasker;
	}
end

def trigger(import)
end

def trigger(parentInit)
end
