def type(display)
	package $package.displays;

	import io.intino.konos.alexandria.exceptions.*;
	import $package.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~DisplayNotifier;
    import io.intino.konos.alexandria.activity.displays.AlexandriaDisplay;
    import io.intino.konos.alexandria.activity.services.push.User;
    $parent+import

    public class $name+firstUpperCase extends AlexandriaDisplay<$name+firstUpperCase~DisplayNotifier> {
        private $box+firstUpperCase~Box box;

        public $name+firstUpperCase($box+firstUpperCase~Box box) {
            super();
            this.box = box;
        }
		[
        @Override
		protected void init() {
			super.init();
			$parent
			$innerDisplay...[$NL]
		}
	]
		$request...[$NL$NL]
    }
end
def type(request & asset)
	public io.intino.konos.alexandria.activity.spark.ActivityFile $name([$parameter value]) {
        return null;
	}
end
def type(request)
	public void $name([$parameter value]) {

	}
end

def type(dateTime | date) type(list) trigger(parameter)
    $value
end

def type(dateTime | date) trigger(parameter)
    $value
end

def type(list) trigger(parameter)
    $value+firstUpperCase$[]
end

def trigger(parameter)
    $value+firstUpperCase
end

def type(schemaImport)
	import $package.schemas.*;
end

def trigger(import)
	import $package.displays.*;
end

def trigger(parent)
	addAndPersonify(new $value~Display(($dsl~Box) box.owner()));
end

def trigger(innerDisplay)
	addAndPersonify(new $value+firstUpperCase~Display((box)));
end