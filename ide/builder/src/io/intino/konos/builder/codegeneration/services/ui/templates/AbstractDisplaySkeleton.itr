def type(display)
	package $package.ui.displays[.$packageType~s];

	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.ui.displays.components.*;
	import $package.ui.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;

	import $package+validPackage.ui.displays.blocks.*;
	import $package+validPackage.ui.displays.molds.*;
	import $package+validPackage.ui.displays.notifiers.$name+firstUpperCase~Notifier;

    public class [$abstract]$name+firstUpperCase$abstractBox+extension extends io.intino.alexandria.ui.displays.$type+firstUpperCase<$name+firstUpperCase~Notifier, $abstractBox+type> {
    	[$attribute+declaration...[$NL]
    	][$component+declarations...[$NL]

        ]public [$abstract]$name+firstUpperCase($abstractBox+type box) {
            super(box);
            id("$id");
        }

        @Override
		public void init() {
			super.init();
			$componentReferences[
			$component+initializations...[$NL]]
		}[

		$component+class...[$NL]][
		$component+method...[$NL]][
		$attribute+getterSetter...[$NL]]
	}
end

def type(componentReferences & forMold)
	$component+moldReferences...[$NL]
end

def type(componentReferences & forBlock)
	$component+blockReferences...[$NL]
end

def type(componentReferences)
	$component+references...[$NL]
end

def type(attribute) trigger(declaration)
	private $clazz $name+firstLowerCase;
end

def type(attribute) trigger(getterSetter)
	public $clazz get$name+firstUpperCase() {
		return this.$name+firstLowerCase;
	}
	public void set$name+firstUpperCase($clazz $name+firstLowerCase) {
		this.$name+firstLowerCase = $name+firstLowerCase;
	}
end