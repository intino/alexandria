def type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.Map;
	import java.util.UUID;[$hasUi
	import java.util.HashMap;
    import java.util.Map;
	]
	import org.slf4j.Logger;
    import org.slf4j.LoggerFactory;
	import java.util.logging.ConsoleHandler;
	import java.util.logging.Level;
	import static org.slf4j.Logger.ROOT_LOGGER_NAME;
	[
	$hasREST~import io.intino.konos.alexandria.rest.AlexandriaSpark;][
    $hasUi+hide~import io.intino.konos.alexandria.ui.displays.Soul;]

	public abstract class AbstractBox extends [$hasUi+uiBox?io.intino.konos.alexandria.Box] {
		private static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);
		protected $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration;[
		$service+field...[$NL]][
		$dataLake+field...[$NL]][
		$task+field][
        $hasUi+hide~protected Map<String, Soul> uiSouls = new java.util.HashMap<>();][
	    $hasUi+hide~private java.util.List<io.intino.konos.alexandria.ui.UIBox.SoulsClosed> soulsClosedListeners = new java.util.ArrayList<>();][
		$hasUi+hide~private io.intino.konos.alexandria.ui.services.AuthService authService;][
		$hasUi+hide~private io.intino.konos.alexandria.ui.services.EditorService editorService;]

		public AbstractBox(String$[] args) {
			this(new $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration(args));
		}
		
		public AbstractBox($name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration) {
			[owner = new $parent~Box(configuration);]
			this.configuration = configuration;[
			initLogger();
			$service+setup...[$NL]]
		}

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration() {
			return configuration;
		}

		@Override
		public io.intino.konos.alexandria.Box put(Object o) {
			[$hasParent~owner.put(o);]
			return this;
		}

		public io.intino.konos.alexandria.Box open() {
			if (owner != null) owner.open();
			initLogger();
			initUI();
			initRESTServices();
			initJMXServices();
			initJMSServices();
			initDataLake();
			initTasks();
			initSlackBots();
			return this;
		}

		public void close() {
			if(owner != null) owner.close();
			$spark...[$NL]
			$service+quit...[$NL]
			$dataLake+quit...[$NL]
		}

		[$hasUi+registerSoul~
		][$service+getter...[$NL$NL]]
		[$hasUi+authService]
		[$hasUi+editorService]
		$dataLake+getter...[$NL$NL]
		$task+getter...[$NL$NL]

		private void initRESTServices() {
			$service+rest...[$NL]
		}

		private void initJMSServices() {
			[$jms~javax.jms.Connection connection;]
			$service+jms...[$NL]
		}

		private void initJMXServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initUI() {
			$service+ui...[$NL]
		}

		private void initDataLake() {
			$dataLake+init...[$NL]
		}

		private void initTasks() {
			$task+init...[$NL]
		}

		private void initLogger() {
			final java.util.logging.Logger logger = java.util.logging.Logger.getGlobal();
			final ConsoleHandler handler = new ConsoleHandler();
			handler.setLevel(Level.INFO);
			handler.setFormatter(new io.intino.konos.alexandria.LogFormatter("log"));
			logger.setUseParentHandlers(false);
			logger.addHandler(handler);
		}

		private static java.net.URL url(String url) {
			try {
			return new java.net.URL(url);
			} catch (java.net.MalformedURLException e) {
				return null;
			}
		}
	}
end

def trigger(uiBox)
	io.intino.konos.alexandria.ui.UIBox
end

def type(service & ui) trigger(setup)
	this.authService = [this.authService($authentication)?null];
	this.editorService = [this.editorService($edition)?null];
	[if($parameter != null && !$parameter.isEmpty())][io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/")];
	io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.setUI(true);
	io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.addParameters(this.authService, this.editorService);
end

def type(service & rest) trigger(setup)
	io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/");
end

def type(service & jmx) trigger(jmx)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new JMX$name+SnakeCaseToCamelCase+FirstUpperCase().init((($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this));
	logger.info("JMX service $name: started!");
end

def type(service & slack) trigger(slack)
	if ($parameter == null || $parameter.isEmpty()) return;
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new $name+SnakeCaseToCamelCase+FirstUpperCase~SlackBot(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, $parameter);
	logger.info("Slack service $name: started!");
end

def type(service & rest) trigger(rest)
	$name+SnakeCaseToCamelCase+FirstUpperCase~Resources.setup(io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.instance(), ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this).start();
	logger.info("REST service $name: started!");
end

def type(service & ui) trigger(ui)
	[if ($parameter == null || !io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.isUI()) return;]
	io.intino.konos.alexandria.ui.UIAlexandriaSpark sparkInstance = (io.intino.konos.alexandria.ui.UIAlexandriaSpark) io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.instance();
	$name+SnakeCaseToCamelCase+FirstUpperCase~.init(sparkInstance, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
	io.intino.konos.alexandria.ui.UiElements.initDisplays(sparkInstance);
	$use...[$NL]
	sparkInstance.start();
	logger.info("UI $name: started!");
end

def trigger(use)
	$value.initDisplays(sparkInstance);
end

def type(service & jms) trigger(jms)
	try {
		connection = new org.apache.activemq.ActiveMQConnectionFactory($parameter...[, ]).createConnection();
		java.lang.Thread thread = new java.lang.Thread(() -> {
			try {
				connection.start();
				this.$name+SnakeCaseToCamelCase+firstLowerCase = new $name+SnakeCaseToCamelCase+firstUpperCase~Service(connection, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
				logger.info("JMS service $name: started!");
			} catch (javax.jms.JMSException e) {
				logger.error(e.getMessage());
			}
		}, "jms init");
		thread.start();
		thread.join(10000);
	} catch (javax.jms.JMSException | InterruptedException e) {
		logger.error(e.getMessage());
	}
end

def type(dataLake & requireConnection) trigger(init)
	this.nessAccessor = new io.intino.konos.datalake.NessAccessor($parameter...[, ]);
	this.nessAccessor.connect("$mode");
	$package+validPackage.datalake.Datalake.registerTanks(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
	registerFeeders();
	$nessOperations
	if (((io.intino.konos.datalake.jms.JMSEventDatalake) nessAccessor.eventDatalake()).session() != null) logger.info("Ness connection: started!");
end


def type(dataLake) trigger(init)
	this.nessAccessor = new io.intino.konos.datalake.NessAccessor($parameter...[, ]);
	java.lang.Thread thread = new java.lang.Thread(() -> {
		this.nessAccessor.connect("$mode");
		$package+validPackage.datalake.Datalake.registerTanks(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
		registerFeeders();
		$nessOperations
		if (((io.intino.konos.datalake.jms.JMSEventDatalake) nessAccessor.eventDatalake()).session() != null) logger.info("Ness connection: started!");
	}, "ness accessor init");
	try {
		thread.start();
		thread.join(10000);
	} catch (InterruptedException e) {
		logger.error(e.getMessage());
	}
end

def trigger(nessOperations)
	$package+validPackage.datalake.NessOperations.init(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
end

def type(custom) trigger(parameter)
	configuration().get("$value+customParameter")
end

def type(custom) trigger(authentication)
	url(configuration().get("$value+customParameter"))
end

def type(custom) trigger(edition)
	url(configuration().get("$value+customParameter"))
end

def trigger(parameter)
	"$value"
end

def trigger(authentication)
	url("$value")
end

def trigger(edition)
	url("$value")
end

def attribute(Transacted) trigger(mode)
	Transacted
end

def trigger(mode)
end

def type(service & jmx) trigger(field)
	private io.intino.konos.jmx.JMXServer $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & slack) trigger(field)
	private io.intino.konos.slack.Bot $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & jms) trigger(field)
	private $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(task) trigger(field)
	private io.intino.konos.scheduling.KonosTasker tasker = new io.intino.konos.scheduling.KonosTasker();
end

def type(dataLake) trigger(field)
	private io.intino.konos.datalake.NessAccessor nessAccessor;
end

def type(service & jms) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase() {
		return $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(dataLake) trigger(getter)
	public io.intino.konos.datalake.NessAccessor datalake() {
		return this.nessAccessor;
	}

	public io.intino.konos.datalake.Feeders feeders() {
		return io.intino.konos.datalake.Feeders.get();
	}

	public void registerFeeders() {
		$feeder...[$NL]
	}
end

def trigger(feeder)
	io.intino.konos.datalake.Feeders.get().register(new $package+validPackage.datalake.feeders.$name+FirstUpperCase(($box+FirstUpperCase~Box)this));
end

def type(service & slack) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~SlackBot $name+SnakeCaseToCamelCase+firstlowerCase() {
		return ($name+SnakeCaseToCamelCase+firstUpperCase~SlackBot) $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def trigger(spark)
	io.intino.konos.alexandria.rest.AlexandriaSparkBuilder.instance().stop();
end

def type(service) type(jms) trigger(quit)
	if ($name+SnakeCaseToCamelCase+firstlowerCase != null) $name+SnakeCaseToCamelCase+firstlowerCase.closeSession();
end

def type(dataLake) trigger(quit)
	if (nessAccessor != null) nessAccessor.disconnect();
end

def type(service) trigger(quit)
end

def type(service)
end

def type(task) trigger(init)
	Tasks.init(this.tasker, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
end

def type(task) trigger(getter)
	public io.intino.konos.scheduling.KonosTasker tasker() {
		return this.tasker;
	}
end

def trigger(authservice)
	protected abstract io.intino.konos.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl);
end

def trigger(editorService)
	protected abstract io.intino.konos.alexandria.ui.services.EditorService editorService(java.net.URL editorServiceUrl);

	public io.intino.konos.alexandria.ui.services.EditorService editorService() {
		return this.editorService;
	}
end


def trigger(registerSoul)
	public java.util.List<Soul> souls() {
		return new java.util.ArrayList<>(uiSouls.values());
	}

		public java.util.Optional<Soul> soul(String clientId) {
			return java.util.Optional.ofNullable(uiSouls.get(clientId));
		}

		public void registerSoul(String clientId, Soul soul) {
			[if (owner != null) (($parent~Box) owner).registerSoul(clientId, soul);]
			uiSouls.put(clientId, soul);
		}

		public void unRegisterSoul(String clientId) {
			[if (owner != null) (($parent~Box) owner).unRegisterSoul(clientId);]
			uiSouls.remove(clientId);
			if (uiSouls.size() <= 0) notifySoulsClosed();
		}

		public void onSoulsClosed(io.intino.konos.alexandria.ui.UIBox.SoulsClosed listener) {
			[if (owner != null) (($parent~Box) owner).onSoulsClosed(listener);]
			this.soulsClosedListeners.add(listener);
		}

		private void notifySoulsClosed() {
			soulsClosedListeners.forEach(l -> l.accept());
		}
end

def trigger(import)
end

def trigger(parentInit)
end

def trigger(hide)
end

