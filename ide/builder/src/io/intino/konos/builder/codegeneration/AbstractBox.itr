def type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.logging.Logger;
	import java.util.Map;
	import java.util.UUID;
	import java.util.logging.ConsoleHandler;
	import java.util.logging.Level;
	import java.util.logging.Logger;

	[$hasREST~import io.intino.konos.server.KonosSpark;]
	[import io.intino.tara.magritte.Graph;$tara+import]

	public class Abstract$name+SnakeCaseToCamelCase+FirstUpperCase~Box extends [$parent~Box?io.intino.konos.Box] {
		private static Logger LOG = Logger.getGlobal();
		[$hasParent?protected $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration;][
		$service+field...[$NL]][
		$dataLake+field...[$NL]][
		$task+field]

		public Abstract[$tara+SnakeCaseToCamelCase+FirstUpperCase?$name+SnakeCaseToCamelCase+firstUpperCase]~Box(String$[] args) {
			this(new $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration(args));

		}
		
		public Abstract[$tara+SnakeCaseToCamelCase+FirstUpperCase?$name+SnakeCaseToCamelCase+firstUpperCase]~Box($name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration) {
			[$hasParent~super(configuration);]
			initLogger();
			configuration.args().entrySet().forEach((e) -> box.put(e.getKey(), e.getValue()));
			[$hasntParent~this.configuration = configuration;][
			$service+setup...[$NL]][
			$activity+setup...[$NL]]

		}
		[$graph+getter]

		[$tara~protected abstract Graph initGraph();]

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration() {
			return ($name+SnakeCaseToCamelCase+firstUpperCase~Configuration) configuration;
		}
		[
		$service+getter...[$NL$NL]]

		$dataLake+getter...[$NL$NL]

		$task+getter...[$NL$NL]

		public Abstract$name+SnakeCaseToCamelCase+FirstUpperCase~Box open() {[
			$tara+hide~box.put(initGraph());]
			init();
			start();
			return this;
		}

		public void init() {[
			$parent+parentInit~super.init();? ]
			initActivities();
			initRESTServices();
			initJMXServices();
			initJMSServices();
			initDataLake();
			initTasks();
			initSlackBots();
		}

		public void start() {
		}

		void close() {
			terminate();
		}

		protected void terminate() {
			$service+quit...[$NL]
			$dataLake+quit...[$NL]
		}
		private void initRESTServices() {
			$service+rest...[$NL]
		}

		private void initJMSServices() {
			[$jms~javax.jms.Connection connection;]
			$service+jms...[$NL]
		}

		private void initJMXServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initActivities() {
			$activity...[$NL]
		}

		private void initDataLake() {
			$dataLake+init...[$NL]
		}

		private void initTasks() {
			$task+init...[$NL]
		}

		public void stopJMSServices() {

		}

		private void initLogger() {
			final Logger logger = Logger.getGlobal();
			final ConsoleHandler handler = new ConsoleHandler();
			handler.setLevel(Level.INFO);
			handler.setFormatter(new io.intino.konos.LogFormatter("log"));
			logger.addHandler(handler);
		}
	}
end

def type(graph) trigger(getter)
	public $package.$name~View view() {
		return ((io.intino.tara.magritte.Graph) box().get(graphID)).view($package.$name~View.class);
	}
end
def type(activity) trigger(setup)
	io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.port[, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory], configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.authService);
end

def type(service & rest) trigger(setup)
	io.intino.konos.server.activity.ActivityKonosSpark.setup(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.port[, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.webDirectory], null);
end

def type(dataLake) trigger(init)
	this.ness = new io.intino.konos.datalake.Ness(configuration().nessConfiguration().url, configuration().nessConfiguration().user, configuration().nessConfiguration().password, configuration().nessConfiguration().clientID);
	this.ness.start();
	NessEvents.addHandlers(($configuration~Box) this);
end

def type(service & jmx) trigger(jmx)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new JMX$name+SnakeCaseToCamelCase+FirstUpperCase().init((($configuration~Box) this));
end

def type(service & slack) trigger(slack)
	if (configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration == null) return;
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new $name+SnakeCaseToCamelCase+FirstUpperCase~SlackBot(($configuration~Box) this);
end

def type(service & rest) trigger(rest)
	if (configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration == null) return;
	$name+SnakeCaseToCamelCase+FirstUpperCase~Resources.setup(io.intino.konos.server.activity.ActivityKonosSpark.instance(), ($configuration~Box) this);
end

def type(activity) trigger(activity)
	if (configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration == null) return;
	$name+SnakeCaseToCamelCase+FirstUpperCase~Activity.init(io.intino.konos.server.activity.ActivityKonosSpark.instance(), ($configuration~Box) this);
end

def type(service & jms) trigger(jms)
	if (configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration == null) return;
	try {
		connection = new org.apache.activemq.ActiveMQConnectionFactory(configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.user, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.password, configuration().$name+SnakeCaseToCamelCase+firstLowerCase~Configuration.url).createConnection();
		connection.start();
		this.$name+SnakeCaseToCamelCase+firstLowerCase = new $name+SnakeCaseToCamelCase+firstUpperCase~Service(connection, ($configuration~Box) this);
	} catch (javax.jms.JMSException e) {
		LOG.severe(e.getMessage());
	}
end

def type(service & jmx) trigger(field)
	private io.intino.konos.jmx.JMXServer $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & slack) trigger(field)
	private io.intino.konos.slack.Bot $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & jms) trigger(field)
	private $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(task) trigger(field)
	private io.intino.konos.scheduling.KonosTasker tasker = new io.intino.konos.scheduling.KonosTasker();
end

def type(dataLake) trigger(field)
	private io.intino.konos.datalake.Ness ness;
end

def type(service & jms) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase() {
		return $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(dataLake) trigger(getter)
	public io.intino.konos.datalake.Ness datalake() {
		return this.ness;
	}
end

def type(service & slack) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~SlackBot $name+SnakeCaseToCamelCase+firstlowerCase() {
		return ($name+SnakeCaseToCamelCase+firstUpperCase~SlackBot) $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def type(service) type(rest | activity) trigger(quit)
	spark.Spark.stop();
end

def type(service) type(jms) trigger(quit)
	$name+SnakeCaseToCamelCase+firstlowerCase.closeSession();
end

def type(dataLake) trigger(quit)
	ness.closeSession();
end

def type(service) trigger(quit)
end

def type(service)
end

def type(task) trigger(init)
	Tasks.init(this.tasker, ($configuration~Box) this);
end

def type(task) trigger(getter)
	public io.intino.konos.scheduling.KonosTasker tasker() {
		return this.tasker;
	}
end

def trigger(import)
end

def trigger(parentInit)
end

def trigger(hide)
end

