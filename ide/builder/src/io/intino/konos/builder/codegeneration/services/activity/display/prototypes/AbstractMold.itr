def type(mold)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaMoldDisplay;
    import io.intino.konos.alexandria.activity.model.Mold;
    import io.intino.konos.alexandria.activity.model.mold.Block;
    import io.intino.konos.alexandria.activity.model.mold.Stamp;
    import io.intino.konos.alexandria.activity.model.mold.stamps.*;
    import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.displays.notifiers.$name+firstUpperCase~DisplayNotifier;

    public abstract class Abstract$name+FirstUpperCase extends AlexandriaMoldDisplay<$name+FirstUpperCase~DisplayNotifier> {

    	public Abstract$name+FirstUpperCase($box+FirstUpperCase~Box box) {
    		super(box);
    		element(buildMold(box));
    	}

    	public Mold buildMold($box+FirstUpperCase~Box box) {
    		Mold mold = new Mold()$block+definition...[$NL];
			return mold;
    	}

		private java.net.URL urlOf(String url)  {
			try {
				return new java.net.URL(url);
			} catch (java.net.MalformedURLException e) {
				return null;
			}
		}
    }
end

def type(block) trigger(definition)
	.add(new Block()[.name("$name")][$expanded][$layout...[]][$height][$width][$hidden][$hiddenIfMobile][$style][$NL$TAB$stamp...[$NL$TAB$TAB]][
		$block+definition...[$NL]])

end

def trigger(height)
	.height($value)
end

def trigger(width)
	.width($value)
end

def attribute(hiddenEnabled) trigger(hidden)
	.hidden((object) -> $mold+FirstUpperCase.Stamps.$name+FirstUpperCase.hidden(($moldClass) object))
end

def trigger(hidden)
end

def trigger(hiddenIfMobile)
	.hiddenIfMobile($value)
end

def trigger(layout)
	.add(Block.Layout.$value+FirstUpperCase)
end

def type(stamp & location)
	.add(new Location()[$icon]$common)
end

def type(stamp & highlight)
	.add(new Highlight().color((object, username) -> $mold+FirstUpperCase.Stamps.$name+FirstUpperCase.color(($moldClass) object, username))$common)
end

def type(stamp & icon)
	.add(new io.intino.konos.alexandria.activity.model.mold.stamps.icons.AlexandriaIcon()$common)
end

def type(stamp & customicon)
	.add(new io.intino.konos.alexandria.activity.model.mold.stamps.icons.ResourceIcon()$common)
end

def type(stamp & operation)
	.add(new io.intino.konos.alexandria.activity.model.mold.stamps.operations.$operationType~Operation().path((object, username) -> $mold+FirstUpperCase.Stamps.$name+FirstUpperCase.path(($moldClass) object, username)))
end

def type(stamp & picture)
	.add(new Picture().defaultPicture(urlOf("$defaultPicture"))$common)
end

def type(stamp)
	.add(new $type+FirstUpperCase()$common)
end

def trigger(common)
	[.name("$name")][.label("$label")][.defaultStyle("$defaultStyle")][.layout(Stamp.Layout.$layout)].style((object, username) -> $mold+FirstUpperCase.Stamps.$name+firstUpperCase.style(($moldClass) object, username)).value((object, username) -> $mold+FirstUpperCase.Stamps.$name+FirstUpperCase.value(($moldClass) object, username))
end

def trigger(icon)
	.icon((object, username) -> $mold+FirstUpperCase.Stamps.$name+FirstUpperCase.icon(($moldClass) object, username))
end

def trigger(expanded)
	.expanded($value)
end