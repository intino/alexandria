def type(reference) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;
end

def type(reference)
	$name = register(new $name+firstUpperCase(($box+firstUpperCase~Box)box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(component & child & moldableblock & multipleblock) trigger(declarations)
end

def type(component & child & moldableblock) trigger(declarations)
	public $mold+firstUpperCase $name;
end

def type(component & child) trigger(declarations)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;[
	$component+declarations...[$NL]]
end

def type(component & child & moldableblock & multipleblock) trigger(declaration)
end

def type(component & child & moldableblock) trigger(declaration)
	public $mold+firstUpperCase $name;
end

def type(component & child) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;
end

def type(component & child & moldableblock & multipleblock) trigger(method)
	public void add$name+firstUpperCase~Mold($mold+firstUpperCase mold) {
		mold.id(java.util.UUID.randomUUID().toString());
		$owner.this.add(mold, "$name");
	}
end

def type(component & child) trigger(method)
end

def type(component & child & moldableblock & multipleblock) trigger(class)
end

def type(component & child & moldableblock) trigger(class)
end

def type(component & child) trigger(class)
	public class $name+firstUpperCase extends $extends[ $implements] {
		[$reference+declaration...[$NL]
		][$component+declaration...[$NL]]

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			$properties+common
			$properties+specific
		}

		@Override
		public void init() {
			super.init();[
			$reference...[$NL]][
			$component+child...[$NL]]
		}
		[$component+class...[$NL]]
		[$component+method...[$NL]]
	}
end

def type(extends & moldableblock)
	$type+firstUpperCase
end

def type(extends)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet<$abstractBox+type>
end

def type(component & child & multipleblock) trigger(moldChildReferences)
end

def type(component & child & multipleblock) trigger(blockChildReferences)
end

def type(component & child) trigger(moldChildReferences)
	$name = [$ancestorsNotMe...[.].]$name;[
	$component+moldChildReferences...[$NL]]
end

def type(component & child) trigger(blockChildReferences)
	$name = [$ancestorsNotMe...[.].]$name;[
	$component+blockChildReferences...[$NL]]
end

def type(component & child) trigger(childReferences)
	$name = [$ancestors...[.].]$name;[
	$component+childReferences...[$NL]]
end

def type(component & child) trigger(moldReferences)
	$name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+moldChildReferences...[$NL]]
end

def type(component & child) trigger(blockReferences)
	$name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+blockChildReferences...[$NL]]
end

def type(component & child) trigger(references)
	$name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+childReferences...[$NL]]
end

def type(component & child) trigger(initializations)
	$binding[
	$component+initializations...[$NL]]
end

def type(component & child & moldableblock & multipleblock)
end

def type(component & child & moldableblock)
	$name = register(new $mold+firstUpperCase(($box+firstUpperCase~Box)box()).id("$id"));
end

def type(component & child)
	$name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(facet)
	$name+firstUpperCase
end

def type(binding)
	$name.bindTo($selector, "$option");
end

def type(implements & option)
	implements io.intino.alexandria.ui.displays.components.selector.SelectorOption
end

def type(implements)
	implements --undefined--
end

def type(properties & image & avatar) trigger(specific)
	[text("$text");]
end

def type(properties & block) trigger(specific)
	[$background+resourceMethod]
end

def type(properties & image) trigger(specific)
	[$value+resourceMethod][
	$defaultValue+resourceMethod]
end

def type(properties & openpage) trigger(specific)
	[path("$path");]
end

def type(properties & chart) trigger(specific)
	[code("$code");][
	$source+resourceMethod][
	mode("$mode");]
end

def type(properties & text) trigger(specific)
	[value("$defaultValue");]
end

def type(properties & operation) trigger(common)
	[label("$label");][
	color("$color");]
	$operationMode
end

def type(properties) trigger(common)
	[label("$label");][
	color("$color");]
end

def type(properties) trigger(specific)
end

def trigger(resourceMethod)
	$name($owner.class.getResource("$value"));
end

def type(operationMode & iconbutton)
	icon("$icon");
end