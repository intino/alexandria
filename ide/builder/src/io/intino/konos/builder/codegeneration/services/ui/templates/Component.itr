def type(reference) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;
end

def type(reference)
	if ($name == null) $name = register(new $name+firstUpperCase(($box+firstUpperCase~Box)box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(component & child & moldableblock & multipleblock) trigger(declarations)
end

def type(component & child & moldableblock) trigger(declarations)
	public $mold+firstUpperCase $name;
end

def type(component & child) trigger(declarations)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;[
	$component+declarations...[$NL]]
end

def type(component & child & moldableblock & multipleblock) trigger(declaration)
end

def type(component & child & moldableblock) trigger(declaration)
	public $mold+firstUpperCase $name;
end

def type(component & child) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].]$name+firstUpperCase $name;
end

def type(method & multiple)
	@Override
	public void add($objectType value) {
		io.intino.alexandria.ui.displays.components.$componentType child = new io.intino.alexandria.ui.displays.components.$componentType(box());
		child.id(java.util.UUID.randomUUID().toString());
		add(child, "$name");
		child.update(value);
	}
end

def type(method & collection)
	@Override
	public void add($modelClass item) {
		$mold+firstUpperCase mold = new $mold+firstUpperCase(($box+firstUpperCase~Box)box());
		mold.id(java.util.UUID.randomUUID().toString());
		mold.item = item;
		addPromise(mold);
	}
end

def type(component & child & moldableblock & multipleblock) trigger(method)
	public void add$name+firstUpperCase~Mold($mold+firstUpperCase mold) {
		mold.id(java.util.UUID.randomUUID().toString());
		$owner.this.add(mold, "$name");
	}
end

def type(component & child) trigger(method)
end

def type(component & child & moldableblock & multipleblock) trigger(class)
end

def type(component & child & moldableblock) trigger(class)
end

def type(component & child) trigger(class)
	public class $name+firstUpperCase extends $extends[ $implements] {
		[$reference+declaration...[$NL]
		][$component+declaration...[$NL]]

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			$properties+common
			$properties+specific
		}

		@Override
		public void $methodName() {
			super.$methodName();[
			$reference...[$NL]][
			$component+child...[$NL]]
		}

		$methods

		[$component+class...[$NL]]
		[$component+method...[$NL]]
	}
end

def type(extends & multiple)
	io.intino.alexandria.ui.displays.components.Multiple<$abstractBox+type, io.intino.alexandria.ui.displays.components.$componentType, $objectType>
end

def type(extends & collection)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet<$abstractBox+type, $modelClass>
end

def type(extends & moldableblock)
	$type+firstUpperCase
end

def type(extends)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet<$abstractBox+type>
end

def type(component & child & multipleblock) trigger(moldChildReferences)
end

def type(component & child & multipleblock) trigger(blockChildReferences)
end

def type(component & child) trigger(moldChildReferences)
	$name = [$ancestorsNotMe...[.].]$name;[
	$component+moldChildReferences...[$NL]]
end

def type(component & child) trigger(blockChildReferences)
	$name = [$ancestorsNotMe...[.].]$name;[
	$component+blockChildReferences...[$NL]]
end

def type(component & child & moldableblock & multipleblock) trigger(childReferences)
end

def type(component & child) trigger(childReferences)
	$name = [$ancestors...[.].]$name;[
	$component+childReferences...[$NL]]
end

def type(component & child) trigger(moldReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+moldChildReferences...[$NL]]
end

def type(component & child) trigger(blockReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+blockChildReferences...[$NL]]
end

def type(component & child) trigger(references)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));[
	$component+childReferences...[$NL]]
end

def type(component & child) trigger(initializations)
	$binding[
	$component+initializations...[$NL]]
end

def type(component & child & moldableblock & multipleblock)
end

def type(component & child & moldableblock)
	if ($name == null) $name = register(new $mold+firstUpperCase(($box+firstUpperCase~Box)box()).id("$id"));
end

def type(component & child)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(facet)
	$name+firstUpperCase
end

def type(binding)
	$name.bindTo($selector, "$option");
end

def type(implements & option)
	implements io.intino.alexandria.ui.displays.components.selector.SelectorOption
end

def type(implements & timeconsumingmold)
	implements io.intino.alexandria.ui.displays.components.mold.TimeConsuming
end

def type(implements)
	implements --undefined--
end

def type(properties & image & avatar) trigger(specific)
	[text("$text");]
end

def type(properties & block) trigger(specific)
	[$background+resourceMethod][
	$badge]
end

def type(properties & image) trigger(specific)
	[$value+resourceMethod][
	$defaultValue+resourceMethod]
end

def type(properties & file) trigger(specific)
	[$value+resourceMethod]
end

def type(properties & openpage) trigger(specific)
	title("$title");[
	path("$path");]
end

def type(properties & chart) trigger(specific)
	[query("$query");][
	$input+inputMethod][
	output("$output");]
end

def type(properties & number) trigger(specific)
	[value($value);][
	min($min);][
	max($max);]
end

def type(properties & date) trigger(specific)
	[value(java.time.Instant.ofEpochMilli($value~L));][
	min(java.time.Instant.ofEpochMilli($min~L));][
	max(java.time.Instant.ofEpochMilli($max~L));]
end

def type(properties & text) trigger(specific)
	[value("$defaultValue");]
end

def type(properties & collection) trigger(specific)
	source(new io.intino.alexandria.ui.sources.$source+firstUpperCase());
	pageSize($pageSize);
end

def type(properties & operation) trigger(common)
	[label("$label");][
	color("$color");]
	$operationMode
end

def type(properties) trigger(common)
	[label("$label");][
	color("$color");]
end

def type(properties) trigger(specific)
end

def type(inputMethod & csv) trigger(inputMethod)
	input(new io.intino.alexandria.ui.displays.components.chart.datasources.CSVDataSource($owner.class.getResource("$value")));
end

def type(inputMethod & source) trigger(inputMethod)
	input(new $value());
end

def trigger(resourceMethod)
	$name($owner.class.getResource("$value"));
end

def type(operationMode & iconbutton)
	icon("$icon");
end

def type(badge)
	[value($value);]
end