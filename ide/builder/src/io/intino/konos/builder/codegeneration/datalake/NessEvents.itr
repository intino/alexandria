def type(events)
	package $package+validPackage;

	import io.intino.konos.jms.TopicConsumer;
	import io.intino.konos.jms.TopicProducer;
	import io.intino.konos.jms.Consumer;
	import io.intino.konos.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	[$eventHandlerImport]
	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;
	import java.util.logging.Level;
	import java.util.logging.Logger;

	public class NessEvents {
		private static Logger logger = Logger.getGlobal();

		private $box+firstUpperCase~Configuration configuration;
		private $box+firstUppercase~Box box;

		public static void addHandlers($box+firstUppercase~Box box) {
			$eventHandler+subscribe...[$NL]
		}

		private static class Subscriptor implements Consumer {

			private $box+firstUpperCase~Box box;

			Subscriptor($box+firstUpperCase~Box box) {
				this.box = box;
			}

			public void consume(Message message) {
				String text = textFrom(message);
				String type = typeOf(text);
				$eventHandler+select...[$NL]
			}
		}
	}
end

def type(eventHandler) trigger(field)
	public static final String $name = $messageType+format;
end

def type(eventHandler) trigger(subscribe)
	new TopicConsumer(box.datalake().session(), $messageType+format).listen(new Subscriptor(box)[, $durable]);
end

def type(durable) trigger(durable)
	box.configuration.$conf~Configuration().clientID[$custom+replace...[]]
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def trigger(customType)
	.replace("{$value}", box.configuration.$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", box.configuration.$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(eventHandler) trigger(select)
	if ($messageType+formatMessage.equalsIgnoreCase(type) || "$simpleMessageType+shortPath".equalsIgnoreCase(type)) {
		$name+snakeCaseToCamelCase+FirstUpperCase~EventHandler eventHandler = new $name+snakeCaseToCamelCase+FirstUpperCase~EventHandler();
		eventHandler.box = box;
		eventHandler.message = io.intino.ness.inl.Inl.messageOf(text);
		eventHandler.execute();
	}
end

def trigger(replace)
	.replace("{$value}", configuration().$conf+firstLowerCase~Configuration.$value+validname+firstLowerCase)
end

def trigger(eventHandlerImport)
	import $value+validPackage.eventhandlers.*;
end