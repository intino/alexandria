def type(events)
	package $package+validPackage;

	import io.intino.konos.jms.TopicConsumer;
	import io.intino.konos.jms.TopicProducer;
	import io.intino.konos.jms.Consumer;
	import io.intino.konos.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	[$messageHandlerImport]
	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;
	import java.util.logging.Level;
	import java.util.logging.Logger;

	public class NessEvents {
		private static Logger logger = Logger.getGlobal();
		$messageHandler+topic...[$NL]
		private $box+firstUpperCase~Configuration configuration;
		private $box+firstUppercase~Box box;

		public static void addHandlers($box+firstUppercase~Box box) {
			$messageHandler+subscribe...[$NL]
		}

		private static class Subscriptor implements Consumer {

			private final $box+firstUpperCase~Box box;
			private final String topic;

			Subscriptor($box+firstUpperCase~Box box, String topic) {
				this.box = box;
				this.topic = topic;
			}

			public void consume(Message message) {
				String text = textFrom(message);
				$messageHandler+select...[$NL~else ]
			}
		}
	}
end

def type(messageHandler) trigger(topic)
	public static final String $name~Topic = $messageType+format;
end

def type(messageHandler) trigger(subscribe)
	new TopicConsumer(box.datalake().session(), $name~Topic).listen(new Subscriptor(box, $name~Topic), box.configuration().nessConfiguration().clientID + "-$name");
end

def type(custom) trigger(replace)
	.replace("{$value}", $value+validname+firstLowerCase)
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def trigger(customType)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", box.configuration().$conf~Configuration().$value+validname+firstLowerCase)
end

def trigger(messageHandler) trigger(select)
	if ($name~Topic.equalsIgnoreCase(topic)) {
		$name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler messageHandler = new $name+snakeCaseToCamelCase+FirstUpperCase~MessageHandler();
		messageHandler.box = box;
		messageHandler.message = io.intino.ness.Inl.load(text).get(0);
		messageHandler.execute();
	}
end

def trigger(replace)
	.replace("{$value}", configuration().$conf+firstLowerCase~Configuration.$value+validname+firstLowerCase)
end

def trigger(messageHandlerImport)
	import $value+validPackage.messagehandlers.*;
end