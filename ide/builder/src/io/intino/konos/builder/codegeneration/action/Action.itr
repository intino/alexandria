def type(action) !type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import io.intino.konos.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	$schemaImport

	public class $name+snakecaseToCamelCase+firstUpperCase~Action {

		public $box+snakecaseToCamelCase+firstUpperCase~Box box;
		public io.intino.konos.alexandria.schema.Context context = new io.intino.konos.alexandria.schema.Context();[
		$parameter+type...[$NL]]

		public [$returnType?void] execute() [throws $throws+FirstUpperCase...[, ] ]{
			$returnType+return
		}
	}
end

def type(ui & accessibleDisplay)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import $package+validPackage.ui.displays.$display+snakecaseToCamelCase+firstUpperCase;
	import io.intino.konos.alexandria.ui.displays.Soul;

	public class $name+snakecaseToCamelCase+firstUpperCase~ProxyAction extends io.intino.konos.alexandria.ui.spark.actions.AlexandriaProxyResourceAction {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;
		$parameter+type...[$NL]
		public Soul soul;

		public void execute() {
			$display+snakecaseToCamelCase+firstUpperCase display = new $display+snakecaseToCamelCase+firstUpperCase(box);
			$parameter+methodCall...[$NL]
			soul.register(display);
			display.personify();
			display.refresh();
		}
	}
end

def type(ui & action & gen)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import io.intino.konos.alexandria.exceptions.*;
	import io.intino.konos.alexandria.ui.spark.actions.AlexandriaResourceAction;
	import java.util.*;

	public abstract class Abstract$name+snakecaseToCamelCase+firstUpperCase~Action extends AlexandriaResourceAction {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;

		public Abstract$name+snakecaseToCamelCase+firstUpperCase~Action() { super("$uiService+camelCaseToSnakeCase+lowerCase"); }

		public String execute() [throws $throws+FirstUpperCase...[, ] ]{
			return super.template("$name"[, Arrays.asList($usedAppUrl...[,])]);
		}

		@Override
		protected String title() {
			return "$title";
		}

		@Override
		protected java.net.URL favicon() {
			return [$favicon?null;]
		}
	}
end

def trigger(favicon)
	this.getClass().getResource("$value");
end

def type(ui & action) !type(gen)
	package $package+validPackage.actions;

	import io.intino.konos.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	import $importDialogs+validPackage.dialogs.*;
	import $importDisplays+validPackage.displays.*;

	public class $name+snakecaseToCamelCase+firstUpperCase~Action extends Abstract$name+snakecaseToCamelCase+firstUpperCase~Action {

		$parameter+type...[$NL]
		[$editor+parameter]

		$component
	}
end

def type(parameter & fileData) trigger(type)
	public java.io.InputStream $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter & list) trigger(type)
	public java.util.List<$type> $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter) trigger(type)
	public $type $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter) trigger(methodCall)
	display.$name+snakecaseToCamelCase+FirstLowerCase($name+snakecaseToCamelCase+FirstLowerCase);
end

def type(editor) trigger(parameter)
	public io.intino.konos.alexandria.schema.Resource document;
	public io.intino.konos.alexandria.ui.services.EditorService.Permission permission;
end

def attribute(void) trigger(return)
end

def trigger(return)
	return null;
end

def type(schemaImport) trigger(schemaImport)
	import $package.schemas.*;
end

def type(component)
	public io.intino.konos.alexandria.ui.displays.Soul prepareSoul(io.intino.konos.alexandria.ui.services.push.UIClient client) {
	    return new io.intino.konos.alexandria.ui.displays.Soul(session) {
			@Override
			public void personify() {
				$value+snakecaseToCamelCase+firstUpperCase component = new $value+snakecaseToCamelCase+firstUpperCase(box);
				$editor+component
				register(component);
				component.personify();
			}
		};
	}
end

def type(editor) trigger(component)
	component.document(document);
	component.permission(permission);
	component.display(new $display+snakecaseToCamelCase+firstUpperCase(box));
end

def type(usedAppUrl & standard)
	"$value"
end

def type(usedAppUrl & custom)
	box.configuration().get("$value")
end