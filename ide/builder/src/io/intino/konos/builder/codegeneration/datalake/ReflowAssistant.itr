def type(operations & graph)
	package $package+validPackage.datalake;


	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.Timetag;
	import io.intino.tara.magritte.RemounterGraph;
	import $package+validPackage.$box+FirstUpperCase~Box;
	import io.intino.tara.magritte.stores.FileSystemStore;
	import io.intino.ness.core.Datalake;
	import io.intino.tara.magritte.Graph;
	import org.apache.commons.io.FileUtils;

	import java.io.File;
	import java.io.IOException;
	import java.util.List;

	public class ReflowAssistant {
		private final $box+FirstUpperCase~Box box;
		private boolean cleanDirectory = true;

		ReflowAssistant($box+FirstUpperCase~Box box) {
			this.box = box;
		}

		int defaultBlockSize() {
			return Integer.MAX_VALUE;
		}

		Datalake.EventStore.Reflow.Filter filter() {
			return new Datalake.EventStore.Reflow.Filter() {
				@Override
				public boolean allow(Datalake.EventStore.Tank tank) {
					return true;
				}

				@Override
				public boolean allow(Datalake.EventStore.Tank tank, Timetag timetag) {
					return true;
				}
			};
		}

		void onStart() {
			final Graph graph = graph();
			if (graph.store() instanceof FileSystemStore && cleanDirectory)
				deleteDirectory(((FileSystemStore) graph.store()).directory());
			final RemounterGraph original = (RemounterGraph) new RemounterGraph(graph.store()).loadStashes(coreStashes());
			allowWriting(original, false);
			box.put(original);
		}

		void onBlock() {
			allowWriting(graph(), true);
			graph().saveAll("Model");
			Graph graph = new RemounterGraph(graph().store()).loadStashes(coreStashes());
			allowWriting(graph, false);
			box.put(graph);
		}

		void onFinish() {
			this.onBlock();
			final Graph graph = new Graph(graph().store());
			allowWriting(graph, true);
			box.put(graph.loadStashes(coreStashes()));
		}

		private String$[] coreStashes() {
			return new String$[]{"Model"};
		}

		private Graph graph() {
			return null;
			//return box.graph().core$$();
		}

		private void deleteDirectory(File directory) {
			try {
				FileUtils.deleteDirectory(directory);
			} catch (IOException e) {
				Logger.error(e);
			}
		}

		private void allowWriting(Graph original, boolean flag) {
			if (original.store() instanceof FileSystemStore) ((FileSystemStore) original.store()).allowWriting(flag);
		}
	}
end

def type(operations)
	package $package+validPackage.datalake;

	import $package+validPackage.$box+FirstUpperCase~Box;
	import io.intino.alexandria.Timetag;
    import io.intino.ness.core.Datalake;
    import io.intino.ness.core.Datalake.EventStore.Reflow;

	class ReflowAssistant {

		private final $box+FirstUpperCase~Box box;

		ReflowAssistant($box+FirstUpperCase~Box box) {
			this.box = box;
		}

		void onStart() {

		}

		void onBlock() {

		}


		void onFinish() {

		}

		int defaultBlockSize() {
			return Integer.MAX_VALUE;
		}

		Reflow.Filter filter() {
			return new Reflow.Filter() {
				@Override
				public boolean allow(Datalake.EventStore.Tank tank) {
					return true;
				}

				@Override
				public boolean allow(Datalake.EventStore.Tank tank, Timetag timetag) {
					return true;
				}
			};
		}

	}
end