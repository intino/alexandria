def type(layout & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaElementDisplay;
    import io.intino.konos.alexandria.activity.displays.Alexandria$mode+FisrtUpperCase~LayoutDisplay;
    import io.intino.konos.alexandria.activity.model.Catalog;
    import io.intino.konos.alexandria.activity.model.Element;
    import io.intino.konos.alexandria.activity.model.Layout;
    import io.intino.konos.alexandria.activity.model.Panel;
    import io.intino.konos.alexandria.activity.model.layout.ElementOption;
    import io.intino.konos.alexandria.activity.model.layout.options.Group;
    import io.intino.konos.alexandria.activity.model.layout.options.Option;
    import io.intino.konos.alexandria.activity.model.renders.*;
    import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~DisplayNotifier;

    import java.util.ArrayList;
    import java.util.List;

    public abstract class Abstract$name+FirstUpperCase extends Alexandria$mode+FirstUpperCase~LayoutDisplay<$name+FirstUpperCase~DisplayNotifier> {

    	public Abstract$name+FirstUpperCase($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildLayout(box));
    	}

    	private static Layout buildLayout($box+firstUpperCase~Box box) {
    		io.intino.konos.alexandria.activity.model.Layout layout = new io.intino.konos.alexandria.activity.model.Layout();
    		[layout.mode(Layout.Mode.$mode);]
    		layout.elementDisplayBuilder(new Layout.ElementDisplayBuilder() {
    			@Override
    			public AlexandriaElementDisplay displayFor(Element element, Object o) {
    				return ElementDisplays.displayFor(box, element);
    			}

    			@Override
    			public Class<? extends AlexandriaElementDisplay> displayTypeFor(Element element, Object o) {
    				return ElementDisplays.displayTypeFor(box, element);
    			}
    		});
    		buildOptions(box).forEach(layout::add);
    		return layout;
    	}

    	private static List<io.intino.konos.alexandria.activity.model.layout.ElementOption> buildOptions($box+firstUpperCase~Box box) {
    		List<ElementOption> result = new ArrayList<>();
    		$elementOption...[$NL]
    		return result;
    	}
	}
end

def type(options) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.label(box, element, object))
		[.icon((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.icon(box, element, object))]
		[.bubble((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.bubble(box, element, object))]
		.render($render));
end

def	type(option & elementOption) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Option().render($render)).label("$label"))
end

def type(options) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.label(box, element, object))
		.icon((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.icon(box, element, object))
		.bubble((element, object) -> $layout+FirstUpperCase.$name+FirstUppercase.bubble(box, element, object))
		.render($render));
end

def type(option) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Option()[.label("$label")]);
end

def type(group) trigger(elementOption)
	result.add(new Group().[label("$label")].mode(Group.Mode.$mode)[
			$elementOption+add...[$NL]]);
end

def type(catalogs) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderCatalogs().catalogs(ElementDisplays.elementsFor(box, Catalog.class, $catalog+quoted...[, ])[.filter((context, target, object) -> $layout+FirstUpperCase.$path+FirstUppercase.filter(box, context, target, object))]
end

def type(panels) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderPanels().panels(ElementDisplays.elementsFor(box, Catalog.class, $panels+quoted...[, ]))[.object((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.objects(box, element, object)))]
end

def type(objects) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderObjects().source((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.source(box, element, object)).objects((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.objects(box, element, object))
end

def type(layout)
	package $package.displays;

    import $package+validPackage.$box+firstUpperCase~Box;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase($box+firstUpperCase~Box box) {
			super(box);
		}

		@Override
		protected void init() {
			super.init();
		}
	}
end

def trigger(quoted)
	"$value"
end