def type(layout & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaElementDisplay;
    import io.intino.konos.alexandria.activity.displays.Alexandria$mode+FisrtUpperCase~Layout;
    import io.intino.konos.alexandria.activity.model.Catalog;
    import io.intino.konos.alexandria.activity.model.Element;
    import io.intino.konos.alexandria.activity.model.Layout;
    import io.intino.konos.alexandria.activity.model.Panel;
    import io.intino.konos.alexandria.activity.model.layout.ElementOption;
    import io.intino.konos.alexandria.activity.model.layout.options.Group;
    import io.intino.konos.alexandria.activity.model.layout.options.Option;
    import io.intino.konos.alexandria.activity.model.renders.*;
    import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~Notifier;

    import java.util.ArrayList;
    import java.util.List;

    public abstract class Abstract$name+FirstUpperCase extends Alexandria$mode+FirstUpperCase~Layout<$name+FirstUpperCase~Notifier> {

    	public Abstract$name+FirstUpperCase($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildLayout(box));
    	}

    	private static Layout buildLayout($box+firstUpperCase~Box box) {
    		io.intino.konos.alexandria.activity.model.Layout layout = new io.intino.konos.alexandria.activity.model.Layout();
    		[layout.mode(Layout.Mode.$mode);]
    		layout.elementDisplayBuilder(new Layout.ElementDisplayBuilder() {
    			@Override
    			public AlexandriaElementDisplay displayFor(Element element, Object o) {
    				return ElementDisplays.displayFor(box, element);
    			}

    			@Override
    			public Class<? extends AlexandriaElementDisplay> displayTypeFor(Element element, Object o) {
    				return ElementDisplays.displayTypeFor(box, element);
    			}
    		});
    		buildOptions(box).forEach(layout::add);
    		return layout;
    	}

    	private static List<io.intino.konos.alexandria.activity.model.layout.ElementOption> buildOptions($box+firstUpperCase~Box box) {
    		List<ElementOption> result = new ArrayList<>();
    		$elementOption...[$NL]
    		return result;
    	}
	}
end

def type(elementOption & options) trigger(class)
	public static class $name+FirstUpperCase {

		public static String label($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element, java.lang.Object object) {
			return null;
		}

		public static String icon($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element, java.lang.Object object) {
			return null;
		}

		public static Integer bubble($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element, java.lang.Object object) {
			return null;
		}

		$render+method

		$elementOption+class...[$NL]
	}
end

def type(elementOption & group) trigger(class)
	public static class $name+FirstUpperCase {
		$elementOption+class...[$NL]

		$render+method
	}
end

def type(elementOption & option) trigger(class)
	public static class $name+FirstUpperCase {
		$elementOption+class...[$NL]

		$render+method
	}
end



def type(catalogs) trigger(method)
	public static boolean filter(io.intino.konos.alexandria.activity.model.Catalog catalog, io.intino.konos.alexandria.activity.model.Element context, Object target, Object object, String username) {
		return true;
	}
end

def type(panels) trigger(method)
	public static void object($box+firstUpperCase~Box box, Object element, Object object) {

	}
end

def type(objects) trigger(method)
	public static java.util.List<io.intino.konos.alexandria.activity.model.renders.RenderObjects.Source.Entry> objects($box+firstUpperCase~Box box) {
		return java.util.Collections.emptyList();
	}
end

def type(options) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.label(box, element, object))
		[.icon((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.icon(box, element, object))]
		[.bubble((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.bubble(box, element, object))]
		.render($render))
end

def	type(option & elementOption) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Option().label("$label").render($render))
end

def type(options) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.label(box, element, object))
		.icon((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.icon(box, element, object))
		.bubble((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.bubble(box, element, object))
		.render($render));
end

def type(option) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Option()[.label("$label")]);
end

def type(group) trigger(elementOption)
	result.add(new Group().[label("$label")].mode(Group.Mode.$mode)[
			$elementOption+add...[$NL]]);
end

def type(catalogs) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderCatalogs().catalogs(ElementDisplays.elementsFor(box, Catalog.class, $catalog+quoted...[, ]))[.filter((catalog, context, target, object, username) -> $layout+FirstUpperCase.$path+FirstUppercase.filter(box, catalog, context, target, object, username))]
end

def type(panels) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderPanels().panels(ElementDisplays.elementsFor(box, Panel.class, $panel+quoted...[, ]))[.object((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.object(box, element, object)))]
end

def type(objects) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderObjects().panel((io.intino.konos.alexandria.activity.model.Panel) ElementDisplays.displayFor(box, $panel+quoted).element()).source(() -> $layout+FirstUpperCase.$path+FirstUppercase.objects(box))
end

def type(layout)
	package $package.displays;

    import $package+validPackage.$box+firstUpperCase~Box;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase($box+firstUpperCase~Box box) {
			super(box);
		}

		$elementOption+class...[$NL]
	}
end

def trigger(quoted)
	"$value"
end