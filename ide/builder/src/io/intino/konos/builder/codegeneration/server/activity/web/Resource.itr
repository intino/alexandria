def type(page)
	package $package+validPackage.resources;

	import $package+validPackage.$box+SnakeCaseToCamelCase+FirstUpperCase~Box;
	import $package+validPackage.actions.$name+firstUpperCase~Action;
	import io.intino.konos.exceptions.KonosException;
	import io.intino.konos.server.activity.displays.DisplayNotifierProvider;

	import java.util.UUID;
	import java.util.function.Consumer;
	import java.util.function.Function;

	public class $name+firstUpperCase~Resource extends io.intino.konos.server.activity.spark.resources.Resource {
		private final $box+SnakeCaseToCamelCase+FirstUpperCase~Box box;

		public $name+firstUpperCase~Resource($box+SnakeCaseToCamelCase+FirstUpperCase~Box box, io.intino.konos.server.activity.spark.ActivitySparkManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
			this.box = box;
		}

		@Override
		public void execute() throws KonosException {
			super.execute();
			[$restrict
			if (isLogged()) render();
			else authenticate();?render();]
		}

		private void render() {
			String clientId = UUID.randomUUID().toString();
			$name+firstUpperCase~Action $name+firstLowercase~Action = new $name+firstUpperCase~Action();
			$name+firstLowercase~Action.session = manager.currentSession();
			$name+firstLowercase~Action.session.whenLogin(new Function<String, String>() {
				@Override
				public String apply(String baseUrl) {
					return $name+firstUpperCase~Resource.this.authenticate(baseUrl);
				}
			});
			$name+firstLowercase~Action.session.whenLogout(b -> logout());
			$name+firstLowercase~Action.box = box;
			$name+firstLowercase~Action.clientId = clientId;
			manager.pushService().onOpen(client -> {
				if (client.soul() != null)
					return;

				io.intino.konos.server.activity.displays.Soul soul = $name+firstLowerCase~Action.prepareSoul(client);
				soul.addRegisterDisplayListener(display -> {
					display.inject(notifier($name+firstLowerCase~Action.session, client, display));
					display.inject($name+firstLowerCase~Action.session);
					display.inject(soul);
					display.inject(() -> soul);
				});
				client.soul(soul);
			});

			manager.pushService().onClose(clientId).execute(new Consumer<io.intino.konos.server.activity.services.push.ActivityClient>() {
				@Override
				public void accept(io.intino.konos.server.activity.services.push.ActivityClient client) {
					manager.unRegister(client);
				}
			});

			manager.write($name+firstLowerCase~Action.execute());
		}

	}
end