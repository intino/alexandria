def type(accessor)
	package $package+validPackage;

	import io.intino.alexandria.exceptions.*;
	import io.intino.konos.jms.QueueProducer;
	import com.google.gson.Gson;

	import java.util.List;
    import javax.jms.*;
	$schemaImport

	public class $name+firstUpperCase+SnakeCaseToCamelCase~Accessor {

		private final Session session;
		$custom+field...[$NL]

		public $name+firstUpperCase+SnakeCaseToCamelCase~Accessor(Session session[, $custom+signature...[, ]]) {
			this.session = session;
			$custom+assign...[$NL]
		}

		$request...[$NL$NL]

		$request+interface...[$NL$NL]

		private static String createRandomString() {
			java.util.Random random = new java.util.Random(System.currentTimeMillis());
			long randomLong = random.nextLong();
			return Long.toHexString(randomLong);
		}

		private byte$[] toByteArray(java.io.InputStream stream) {
			try {
				java.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();
				int nRead;
				byte$[] data = new byte$[16384];
				while ((nRead = stream.read(data, 0, data.length)) != -1) {
					buffer.write(data, 0, nRead);
				}
				buffer.flush();
				return buffer.toByteArray();
			} catch (java.io.IOException e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).error(e.getMessage(), e);
			}
			return new byte$[0];
		}
	}
end

def type(request & reply) trigger(interface)
	public interface $name+firstUpperCase~Response extends MessageListener {

		void callback($reply+return value);

		default void onMessage(Message message) {
			try {
				$reply

			} catch (JMSException e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).error(e.getMessage(), e);
			}
		}
	}
end

def type(request) trigger(interface)
end

def type(request & reply)
	public MessageConsumer $name([$parameter+signature...[, ], ]$name+firstUpperCase~Response callback) throws JMSException {
		Destination temporaryQueue = session.createTemporaryQueue();
		MessageConsumer consumer = session.createConsumer(temporaryQueue);
		consumer.setMessageListener(callback);
		final $messageType~Message message = session.create$messageType~Message();
		message.setJMSReplyTo(temporaryQueue);
		message.setJMSCorrelationID(createRandomString());
		fill$name+firstUpperCase(message[, $parameter+name...[, ]]);
		QueueProducer producer = new QueueProducer(session, "$queue"[$custom...[]]);
		producer.produce(message);
		producer.close();
		return consumer;
	}

	private void fill$name+firstUpperCase($messageType~Message message[, $parameter+signature...[, ]]) throws JMSException {
		$parameter+assign...[$NL]
	}
end

def !type(parameter) trigger(field)
	private String $value+validname;
end

def !type(parameter) trigger(signature)
	String $value+validname
end

def !type(parameter) trigger(assign)
	this.$value+validname = $value+validname;
end

def !type(parameter) trigger(custom)
	.replace("{$value}", this.$value+validname)
end

def type(request)
	public void $name([$parameter+signature...[, ]]) throws JMSException {
		final TextMessage message = session.createTextMessage();
		fill$name+firstUpperCase(message[, $parameter+name...[, ]]);
		QueueProducer producer = new QueueProducer(session, "$queue");
		new QueueProducer(session, "$queue").produce(message);
		producer.close();
	}

	private void fill$name+firstUpperCase($messageType~Message message[, $parameter+signature...[, ]]) throws JMSException {
		$parameter+assign...[$NL]
	}
end

def type(parameter & list) trigger(signature)
	java.util.List<$type> $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(signature)
	$type $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(name)
	$name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter & objectData) trigger(assign)
	message.setText(new Gson().toJson($name));
end

def type(parameter & fileData) trigger(assign)
	message.writeBytes(toByteArray($name.content()));
end

def type(parameter & list) trigger(assign)
	message.setStringProperty("$name", new Gson().toJson($name));
end

def type(parameter) trigger(assign)
	message.set$type+format~Property("$name", $name);
end

def type(reply) trigger(type)
	Text
end

def type(reply & fileData) trigger(type)
	Bytes
end

def type(reply & list) trigger(return)
	List<$value>
end

def type(reply) trigger(return)
	$value
end

def attribute(Integer) trigger(format)
	Int
end

def type(reply & fileData) trigger(reply)
	byte$[] bytes = new byte$[(int) ((BytesMessage) message).getBodyLength()];
	((BytesMessage) message).readBytes(bytes);
	callback(new io.intino.alexandria.Resource("file","", new java.io.ByteArrayInputStream(bytes)));
end

def type(reply & list) trigger(reply)
	java.lang.reflect.Type listType = new com.google.gson.reflect.TypeToken<java.util.ArrayList<$value>>(){}.getType();
	callback(new Gson().fromJson(((TextMessage) message).getText(), listType));
end

def type(reply) trigger(reply)
	callback(new Gson().fromJson(((TextMessage) message).getText(), $value.class));
end

def type(schemaImport)
	import $package.schemas.*;
end