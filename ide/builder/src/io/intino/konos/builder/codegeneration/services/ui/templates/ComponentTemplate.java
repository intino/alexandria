package io.intino.konos.builder.codegeneration.services.ui.templates;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class ComponentTemplate extends Template {

	protected ComponentTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new ComponentTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "reference")), (condition("trigger", "declaration"))).add(literal("public ")).add(expression().add(mark("ancestors", "firstUpperCase").multiple(".")).add(literal("."))).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")),
			rule().add((condition("type", "reference & item"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").<")).add(mark("name", "firstUpperCase")).add(literal(">item(")).add(mark("owner")).add(literal(".this.item()).owner(")).add(mark("owner")).add(literal(".this));")),
			rule().add((condition("type", "reference"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "declarations"))).add(literal("public ")).add(expression().add(mark("ancestors", "firstUpperCase").multiple(".")).add(literal("."))).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("heading", "declarations").multiple("\n"))),
			rule().add((condition("type", "component & child & stamp & single")), (condition("trigger", "declarations"))).add(literal("public ")).add(mark("template", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")),
			rule().add((condition("type", "component & child")), (condition("trigger", "declarations"))).add(literal("public ")).add(expression().add(mark("ancestors", "firstUpperCase").multiple(".")).add(literal("."))).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("component", "declarations").multiple("\n"))),
			rule().add((condition("type", "component & child & stamp & single")), (condition("trigger", "declaration"))).add(literal("public ")).add(mark("template", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")),
			rule().add((condition("type", "component & child")), (condition("trigger", "declaration"))).add(literal("public ")).add(expression().add(mark("ancestors", "firstUpperCase").multiple(".")).add(literal("."))).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")),
			rule().add((condition("type", "method & multiple"))).add(literal("@Override\npublic ")).add(mark("componentType")).add(literal(" add(")).add(expression().add(mark("objectType")).add(literal(" value"))).add(literal(") {\n\t")).add(mark("componentType")).add(literal(" child = new ")).add(mark("componentType")).add(literal("(box());\n\tchild.id(java.util.UUID.randomUUID().toString());\n\tadd(child, \"")).add(mark("name")).add(literal("\");")).add(expression().add(literal("\n")).add(literal("\tchild.update(")).add(mark("objectTypeValue")).add(literal(");"))).add(literal("\n\treturn child;\n}")),
			rule().add((condition("type", "method & collection & table"))).add(mark("selectionMethod")).add(literal("\n\npublic ")).add(mark("name", "firstUpperCase")).add(literal("Row add(")).add(expression().add(mark("itemClass")).add(literal(" item"))).add(literal(") {\n\t")).add(mark("name", "firstUpperCase")).add(literal("Row row = new ")).add(mark("name", "firstUpperCase")).add(literal("Row((")).add(mark("box", "firstUpperCase")).add(literal("Box)box());")).add(expression().add(literal("\n")).add(literal("\trow.id(java.util.UUID.randomUUID().toString());")).add(literal("\n")).add(literal("\trow.item(")).add(mark("itemVariable")).add(literal(");"))).add(literal("\n\taddPromise(row, \"rows\");\n\treturn row;\n}\n\npublic ")).add(mark("name", "firstUpperCase")).add(literal("Row insert(")).add(expression().add(mark("itemClass")).add(literal(" item, "))).add(literal("int index) {\n\t")).add(mark("name", "firstUpperCase")).add(literal("Row row = new ")).add(mark("name", "firstUpperCase")).add(literal("Row((")).add(mark("box", "firstUpperCase")).add(literal("Box)box());")).add(expression().add(literal("\n")).add(literal("\trow.id(java.util.UUID.randomUUID().toString());")).add(literal("\n")).add(literal("\trow.item(")).add(mark("itemVariable")).add(literal(");"))).add(literal("\n\tinsertPromise(row, index, \"rows\");\n\treturn row;\n}\n\n@Override\npublic void clear() {\n\tclear(\"rows\");\n}")),
			rule().add((condition("type", "method & collection"))).add(mark("selectionMethod")).add(literal("\n")).add(expression().add(mark("item", "addMethod").multiple("\n"))).add(literal("\n")).add(expression().add(mark("item", "removeMethod").multiple("\n"))),
			rule().add((condition("type", "component & child")), (condition("trigger", "method"))),
			rule().add((condition("type", "component & child & stamp & single")), (condition("trigger", "class"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "class"))).add(literal("public class ")).add(mark("name", "firstUpperCase")).add(literal(" extends ")).add(mark("extends")).add(expression().add(literal(" ")).add(mark("implements"))).add(literal(" {\n\t")).add(expression().add(mark("reference", "declaration").multiple("\n")).add(literal("\n")).add(literal("\t"))).add(expression().add(mark("heading", "declaration").multiple("\n"))).add(literal("\n\n\tpublic ")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("abstractBox", "type")).add(literal(" box) {\n\t\tsuper(box);\n\t\t")).add(mark("properties", "common")).add(literal("\n\t\t")).add(mark("properties", "specific")).add(literal("\n\t}\n\n\t@Override\n\tpublic void ")).add(mark("methodName")).add(literal("() {\n\t\tsuper.")).add(mark("methodName")).add(literal("();")).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("reference").multiple("\n"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("heading", "child").multiple("\n"))).add(literal("\n\t}\n\n\t")).add(mark("methods")).add(literal("\n\n\t")).add(expression().add(mark("component", "class").multiple("\n"))).add(literal("\n\t")).add(expression().add(mark("component", "method").multiple("\n"))).add(literal("\n}")),
			rule().add((condition("type", "component & child")), (condition("trigger", "class"))).add(literal("public class ")).add(mark("name", "firstUpperCase")).add(literal(" extends ")).add(mark("extends")).add(expression().add(literal(" ")).add(mark("implements"))).add(literal(" {\n\t")).add(expression().add(mark("reference", "declaration").multiple("\n")).add(literal("\n")).add(literal("\t"))).add(expression().add(mark("component", "declaration").multiple("\n"))).add(literal("\n\n\tpublic ")).add(mark("name", "firstUpperCase")).add(literal("(")).add(mark("abstractBox", "type")).add(literal(" box) {\n\t\tsuper(box);\n\t\t")).add(mark("properties", "common")).add(literal("\n\t\t")).add(mark("properties", "specific")).add(literal("\n\t}\n\n\t@Override\n\tpublic void ")).add(mark("methodName")).add(literal("() {\n\t\tsuper.")).add(mark("methodName")).add(literal("();")).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("reference").multiple("\n"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("component", "child").multiple("\n"))).add(literal("\n\t}\n\n\t")).add(mark("methods")).add(literal("\n\n\t")).add(expression().add(mark("component", "class").multiple("\n"))).add(literal("\n\t")).add(expression().add(mark("component", "method").multiple("\n"))).add(literal("\n}")),
			rule().add((condition("type", "extends & multiple"))).add(literal("io.intino.alexandria.ui.displays.components.Multiple<")).add(mark("abstractBox", "type")).add(literal(", ")).add(mark("componentType")).add(literal(", ")).add(mark("objectType")).add(literal(">")),
			rule().add((condition("type", "extends & collection & table"))).add(literal("io.intino.alexandria.ui.displays.components.")).add(mark("type", "firstUpperCase")).add(mark("facet")).add(literal("<")).add(mark("abstractBox", "type")).add(literal(", io.intino.alexandria.ui.displays.components.Row, ")).add(mark("itemClass")).add(literal(">")),
			rule().add((condition("type", "extends & collection"))).add(literal("io.intino.alexandria.ui.displays.components.")).add(mark("type", "firstUpperCase")).add(mark("facet")).add(literal("<")).add(mark("abstractBox", "type")).add(literal(", ")).add(mark("componentType")).add(literal(", ")).add(mark("itemClass")).add(literal(">")),
			rule().add((condition("type", "extends & item"))).add(literal("io.intino.alexandria.ui.displays.components.Item<")).add(mark("abstractBox", "type")).add(literal(", ")).add(mark("itemClass")).add(literal(">")),
			rule().add((condition("type", "extends & stamp"))).add(mark("type", "firstUpperCase")),
			rule().add((condition("type", "extends"))).add(literal("io.intino.alexandria.ui.displays.components.")).add(mark("type", "firstUpperCase")).add(mark("facet")).add(literal("<io.intino.alexandria.ui.displays.notifiers.")).add(mark("type", "firstUpperCase")).add(mark("facet")).add(literal("Notifier, ")).add(mark("abstractBox", "type")).add(literal(">")),
			rule().add((condition("type", "component & child & multipleblock")), (condition("trigger", "rootChildReferences"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "rootChildReferences"))).add(mark("name")).add(literal(" = ")).add(expression().add(mark("ancestorsNotMe").multiple(".")).add(literal("."))).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("heading", "rootChildReferences").multiple("\n"))),
			rule().add((condition("type", "component & child")), (condition("trigger", "rootChildReferences"))).add(mark("name")).add(literal(" = ")).add(expression().add(mark("ancestorsNotMe").multiple(".")).add(literal("."))).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("component", "rootChildReferences").multiple("\n"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "childReferences"))).add(mark("name")).add(literal(" = ")).add(expression().add(mark("ancestors").multiple(".")).add(literal("."))).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("heading", "childReferences").multiple("\n"))),
			rule().add((condition("type", "component & child")), (condition("trigger", "childReferences"))).add(mark("name")).add(literal(" = ")).add(expression().add(mark("ancestors").multiple(".")).add(literal("."))).add(mark("name")).add(literal(";")).add(expression().add(literal("\n")).add(mark("component", "childReferences").multiple("\n"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "rootReferences"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("(box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")).add(expression().add(literal("\n")).add(mark("heading", "rootChildReferences").multiple("\n"))),
			rule().add((condition("type", "component & child & stamp & multiple")), (condition("trigger", "rootReferences"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")),
			rule().add((condition("type", "component & child & stamp & single")), (condition("trigger", "rootReferences"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("template", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).id(\"")).add(mark("id")).add(literal("\"));")),
			rule().add((condition("type", "component & child")), (condition("trigger", "rootReferences"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("(box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")).add(expression().add(literal("\n")).add(mark("component", "rootChildReferences").multiple("\n"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "references"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("(box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")).add(expression().add(literal("\n")).add(mark("heading", "childReferences").multiple("\n"))),
			rule().add((condition("type", "component & child")), (condition("trigger", "references"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("(box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")).add(expression().add(literal("\n")).add(mark("component", "childReferences").multiple("\n"))),
			rule().add((condition("type", "component & child & collection")), (condition("trigger", "initializations"))).add(mark("binding")).add(expression().add(literal("\n")).add(mark("heading", "initializations").multiple("\n"))),
			rule().add((condition("type", "component & child")), (condition("trigger", "initializations"))).add(mark("binding")).add(expression().add(literal("\n")).add(mark("component", "initializations").multiple("\n"))),
			rule().add((condition("type", "component & child & stamp & multiple"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")),
			rule().add((condition("type", "component & child & stamp & single"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("template", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box()).id(\"")).add(mark("id")).add(literal("\"));")),
			rule().add((condition("type", "component & child"))).add(literal("if (")).add(mark("name")).add(literal(" == null) ")).add(mark("name")).add(literal(" = register(new ")).add(mark("name", "firstUpperCase")).add(literal("(box()).<")).add(mark("name", "firstUpperCase")).add(literal(">id(\"")).add(mark("id")).add(literal("\").owner(")).add(mark("owner")).add(literal(".this));")),
			rule().add((condition("type", "facet"))).add(mark("name", "firstUpperCase")),
			rule().add((condition("type", "binding & toolbar"))).add(mark("name")).add(literal(".bindTo(")).add(mark("collection")).add(literal(");")),
			rule().add((condition("type", "binding & grouping"))).add(mark("name")).add(literal(".bindTo(")).add(mark("collection")).add(literal(");")),
			rule().add((condition("type", "binding"))).add(mark("name")).add(literal(".bindTo(")).add(mark("selector")).add(literal(", \"")).add(mark("option")).add(literal("\");")),
			rule().add((condition("type", "implements & selectablecollection"))).add(literal("implements io.intino.alexandria.ui.displays.components.collection.Selectable")),
			rule().add((condition("type", "implements & option"))).add(literal("implements io.intino.alexandria.ui.displays.components.selector.SelectorOption")),
			rule().add((condition("type", "implements & dynamicloadedcomponent"))).add(literal("implements io.intino.alexandria.ui.displays.components.DynamicLoaded")),
			rule().add((condition("type", "implements"))).add(literal("implements --undefined--")),
			rule().add((condition("type", "properties & operation")), (condition("trigger", "common"))).add(expression().add(literal("title(\"")).add(mark("title")).add(literal("\");"))).add(expression().add(literal("\n")).add(literal("color(\"")).add(mark("color")).add(literal("\");"))).add(expression().add(literal("\n")).add(literal("disabled(")).add(mark("disabled")).add(literal(");"))).add(literal("\nmode(io.intino.alexandria.ui.displays.components.Operation.Mode.valueOf(\"")).add(mark("mode", "firstUpperCase")).add(literal("\"));\n")).add(mark("operationMode")),
			rule().add((condition("type", "properties")), (condition("trigger", "common"))).add(expression().add(literal("label(\"")).add(mark("label")).add(literal("\");"))).add(expression().add(literal("\n")).add(literal("color(\"")).add(mark("color")).add(literal("\");"))),
			rule().add((condition("type", "properties & image & avatar")), (condition("trigger", "specific"))).add(expression().add(literal("text(\"")).add(mark("text")).add(literal("\");"))),
			rule().add((condition("type", "properties & block")), (condition("trigger", "specific"))).add(expression().add(mark("background", "resourceMethod"))).add(expression().add(literal("\n")).add(mark("badge"))),
			rule().add((condition("type", "properties & image")), (condition("trigger", "specific"))).add(expression().add(mark("value", "resourceMethod"))).add(expression().add(literal("\n")).add(mark("defaultValue", "resourceMethod"))),
			rule().add((condition("type", "properties & file")), (condition("trigger", "specific"))).add(expression().add(mark("value", "resourceMethod"))),
			rule().add((condition("type", "properties & openpage")), (condition("trigger", "specific"))).add(expression().add(literal("path(\"")).add(mark("path")).add(literal("\");"))),
			rule().add((condition("type", "properties & export")), (condition("trigger", "specific"))).add(expression().add(literal("from(")).add(mark("from")).add(literal("L);"))).add(expression().add(literal("\n")).add(literal("to(")).add(mark("to")).add(literal("L);"))).add(expression().add(literal("\n")).add(literal("min(")).add(mark("min")).add(literal("L);"))).add(expression().add(literal("\n")).add(literal("max(")).add(mark("max")).add(literal("L);"))).add(expression().add(literal("\n")).add(literal("range(")).add(mark("rangeMin")).add(literal(",")).add(mark("rangeMax")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("options(java.util.Arrays.asList(\"")).add(mark("option").multiple("\",\"")).add(literal("\"));"))),
			rule().add((condition("type", "properties & download")), (condition("trigger", "specific"))).add(expression().add(literal("options(java.util.Arrays.asList(\"")).add(mark("option").multiple("\",\"")).add(literal("\"));"))),
			rule().add((condition("type", "properties & downloadselection")), (condition("trigger", "specific"))).add(expression().add(literal("options(java.util.Arrays.asList(\"")).add(mark("option").multiple("\",\"")).add(literal("\"));"))),
			rule().add((condition("type", "properties & chart")), (condition("trigger", "specific"))).add(expression().add(literal("query(\"")).add(mark("query")).add(literal("\");"))).add(expression().add(literal("\n")).add(mark("input", "inputMethod"))).add(expression().add(literal("\n")).add(literal("output(\"")).add(mark("output")).add(literal("\");"))),
			rule().add((condition("type", "properties & number")), (condition("trigger", "specific"))).add(expression().add(literal("value(")).add(mark("value")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("min(")).add(mark("min")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("max(")).add(mark("max")).add(literal(");"))),
			rule().add((condition("type", "properties & date")), (condition("trigger", "specific"))).add(expression().add(literal("value(java.time.Instant.ofEpochMilli(")).add(mark("value")).add(literal("L));"))).add(expression().add(literal("\n")).add(literal("min(java.time.Instant.ofEpochMilli(")).add(mark("min")).add(literal("L));"))).add(expression().add(literal("\n")).add(literal("max(java.time.Instant.ofEpochMilli(")).add(mark("max")).add(literal("L));"))),
			rule().add((condition("type", "properties & text")), (condition("trigger", "specific"))).add(expression().add(literal("value(\"")).add(mark("defaultValue")).add(literal("\");"))),
			rule().add((condition("type", "properties & collection")), (condition("trigger", "specific"))).add(expression().add(literal("source(new io.intino.alexandria.ui.sources.")).add(mark("sourceClass", "firstUpperCase")).add(literal("());"))).add(literal("\npageSize(")).add(mark("pageSize")).add(literal(");")),
			rule().add((condition("type", "properties")), (condition("trigger", "specific"))),
			rule().add((condition("type", "inputMethod & csv")), (condition("trigger", "inputMethod"))).add(literal("input(new io.intino.alexandria.ui.displays.components.chart.datasources.CSVDataSource(")).add(mark("owner")).add(literal(".class.getResource(\"")).add(mark("value")).add(literal("\")));")),
			rule().add((condition("type", "inputMethod & source")), (condition("trigger", "inputMethod"))).add(literal("input(new ")).add(mark("value")).add(literal("());")),
			rule().add((condition("trigger", "resourceMethod"))).add(mark("name")).add(literal("(")).add(mark("owner")).add(literal(".class.getResource(\"")).add(mark("value")).add(literal("\"));")),
			rule().add((condition("type", "operationMode & iconbutton"))).add(literal("icon(\"")).add(mark("icon")).add(literal("\");")),
			rule().add((condition("type", "operationMode & materialiconbutton"))).add(literal("icon(\"")).add(mark("icon")).add(literal("\");")),
			rule().add((condition("type", "badge"))).add(expression().add(literal("value(")).add(mark("value")).add(literal(");"))),
			rule().add((condition("type", "selectionMethod"))).add(literal("public void onSelect(io.intino.alexandria.ui.displays.events.SelectionListener listener) {\n\tsuper.addSelectionListener(listener);\n}")),
			rule().add((condition("type", "item")), (condition("trigger", "addDeclaration"))).add(mark("name")).add(literal("(add")).add(mark("name", "firstUpperCase")).add(literal("(new ")).add(mark("name", "firstUpperCase")).add(literal("(box())")).add(expression().add(literal(", ")).add(mark("itemVariable"))).add(literal("))")),
			rule().add((condition("type", "item")), (condition("trigger", "type"))).add(mark("name", "firstUpperCase")),
			rule().add((condition("type", "item")), (condition("trigger", "addRow"))).add(mark("name")).add(literal(" = register(add")).add(mark("name", "firstUpperCase")).add(literal("(box()));")),
			rule().add((condition("type", "item")), (condition("trigger", "property"))).add(literal("public ")).add(mark("name", "firstUpperCase")).add(literal(" ")).add(mark("name")).add(literal(";")),
			rule().add((condition("type", "item")), (condition("trigger", "addMethod"))).add(mark("methodAccessibility")).add(literal(" ")).add(mark("name", "firstUpperCase")).add(literal(" add")).add(mark("methodName", "firstUpperCase")).add(literal("(")).add(expression().add(mark("itemClass")).add(literal(" item"))).add(literal(") {\n\t")).add(mark("name", "firstUpperCase")).add(literal(" result = new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box());\n\tresult.id(java.util.UUID.randomUUID().toString());")).add(expression().add(literal("\n")).add(literal("\tresult.item(")).add(mark("itemVariable")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("\t")).add(mark("addPromise")).add(literal("(result, \"rows\");"))).add(literal("\n\treturn result;\n}\n")).add(mark("methodAccessibility")).add(literal(" ")).add(mark("name", "firstUpperCase")).add(literal(" insert")).add(mark("methodName", "firstUpperCase")).add(literal("(")).add(expression().add(mark("itemClass")).add(literal(" item, "))).add(literal("int index) {\n\t")).add(mark("name", "firstUpperCase")).add(literal(" result = new ")).add(mark("name", "firstUpperCase")).add(literal("((")).add(mark("box", "firstUpperCase")).add(literal("Box)box());\n\tresult.id(java.util.UUID.randomUUID().toString());")).add(expression().add(literal("\n")).add(literal("\tresult.item(")).add(mark("itemVariable")).add(literal(");"))).add(expression().add(literal("\n")).add(literal("\t")).add(mark("insertPromise")).add(literal("(result, index, \"rows\");"))).add(literal("\n\treturn result;\n}")),
			rule().add((condition("type", "item")), (condition("trigger", "removeMethod"))).add(literal("@Override\npublic void clear() {\n\tclear(\"rows\");\n}"))
		);
		return this;
	}
}