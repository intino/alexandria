def type(layout & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaElementDisplay;
    import io.intino.konos.alexandria.activity.displays.Alexandria$mode+FisrtUpperCase~Layout;
    import io.intino.konos.alexandria.activity.model.Catalog;
    import io.intino.konos.alexandria.activity.model.Element;
    import io.intino.konos.alexandria.activity.model.Layout;
    import io.intino.konos.alexandria.activity.model.Panel;
    import io.intino.konos.alexandria.activity.model.layout.ElementOption;
    import io.intino.konos.alexandria.activity.model.layout.options.Group;
    import io.intino.konos.alexandria.activity.model.layout.options.Option;
    import io.intino.konos.alexandria.activity.model.renders.*;
    import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~Notifier;

    import java.util.ArrayList;
    import java.util.List;

    public abstract class Abstract$name+FirstUpperCase extends Alexandria$mode+FirstUpperCase~Layout<$name+FirstUpperCase~Notifier> {

    	public Abstract$name+FirstUpperCase($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildLayout(box));
    	}

    	private static Layout buildLayout($box+firstUpperCase~Box box) {
    		io.intino.konos.alexandria.activity.model.Layout layout = new io.intino.konos.alexandria.activity.model.Layout();
    		[layout.mode(Layout.Mode.$mode);]
    		layout.elementDisplayBuilder(new Layout.ElementDisplayBuilder() {
    			@Override
    			public AlexandriaElementDisplay displayFor(Element element, Object o) {
    				return get(element, o);
    			}

    			@Override
    			public Class<? extends AlexandriaElementDisplay> displayTypeFor(Element element, Object o) {
    				return get(element, o).getClass();
    			}

    			private AlexandriaElementDisplay get(Element element, Object o) {
					return Displays.displayFor(box, element);
				}
    		});
    		buildOptions(box).forEach(layout::add);
    		return layout;
    	}

    	private static List<io.intino.konos.alexandria.activity.model.layout.ElementOption> buildOptions($box+firstUpperCase~Box box) {
    		List<ElementOption> result = new ArrayList<>();
    		$elementOption...[$NL]
    		return result;
    	}
	}
end

def type(options) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.label(box, element, ($modelClass) object))
		[.icon((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.icon(box, element, ($modelClass) object))]
		[.bubble((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.bubble(box, element, ($modelClass) object))]
		.render($render))
end

def	type(option & elementOption) trigger(add)
	.add(new io.intino.konos.alexandria.activity.model.layout.options.Option().label("$label").render($render))
end

def type(options) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Options().
		label((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.label(box, element, object))
		.icon((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.icon(box, element, object))
		.bubble((element, object) -> $layout+FirstUpperCase.$path+FirstUppercase.bubble(box, element, object))
		.render($render));
end

def type(option) trigger(elementOption)
	result.add(new io.intino.konos.alexandria.activity.model.layout.options.Option()[.label("$label")].render($render));
end

def type(group) trigger(elementOption)
	result.add(new Group().[label("$label")].mode(Group.Mode.$mode)[
			$elementOption+add...[$NL]]);
end

def type(catalogs) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderCatalogs().catalogs(Displays.elementsFor(box, Catalog.class, $catalog+quoted...[, ]))[.filter((catalog, context, target, object, user) -> $layout+FirstUpperCase.$path+FirstUppercase.filter(box, catalog, context, target, object, user))]
end

def type(panels) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderPanels().panels(Displays.elementsFor(box, Panel.class, $panel+quoted...[, ]))
end

def type(objects) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderObjects().panel((io.intino.konos.alexandria.activity.model.Panel) Displays.displayFor(box, $panel+quoted).element()).source((user) -> $layout+FirstUpperCase.$path+FirstUppercase.objects(box, user))
end

def type(display) trigger(render)
	new io.intino.konos.alexandria.activity.model.renders.RenderDisplay().displayLoader((object, loadingListener, instantListener) -> $layout+firstUpperCase.$path+FirstUppercase.$display+firstLowerCase(box, object, loadingListener, instantListener))
end

def trigger(quoted)
	"$value"
end