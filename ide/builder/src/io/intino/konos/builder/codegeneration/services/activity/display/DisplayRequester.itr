def type(display)
	package $package+validPackage.displays.requesters;

	import $package+validPackage.displays.$name+firstUpperCase~$type+format+FirstUpperCase;
	import io.intino.konos.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import $package+validPackage.displays.notifiers.$name+firstUpperCase~DisplayNotifier;
	import io.intino.konos.alexandria.activity.displays.requesters.Alexandria[$type+class+FirstUpperCase]DisplayRequester;
	import io.intino.konos.alexandria.exceptions.AlexandriaException;
	import io.intino.konos.alexandria.activity.displays.AlexandriaDisplayNotifierProvider;
	import io.intino.konos.alexandria.activity.spark.ActivitySparkManager;

	public class $name+firstUpperCase~DisplayRequester extends [Alexandria$type+class+FirstUpperCase]~DisplayRequester {

		public $name+firstUpperCase~DisplayRequester(ActivitySparkManager manager, AlexandriaDisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
		}

		@Override
		public void execute() throws AlexandriaException {
			$name+firstUpperCase~$type+format+FirstUpperCase display = display();
			if (display == null) return;
			String operation = operation();

			$request...[$NL~else ]
			super.execute();
		}
	}
end
def attribute(Display) trigger(class)
end

def attribute(MenuLayout) trigger(format)
	Layout
end

def attribute(TabLayout) trigger(format)
	Layout
end

def attribute(Display) trigger(format)
	Display
end

def type(request & asset) trigger(request)
	if (operation.equals("$name")) {
		io.intino.konos.alexandria.activity.spark.ActivityFile file = display.$name($parameter);
		manager.write(file.content(), file.label());
		return;
	}
end

def type(request) trigger(request)
	if (operation.equals("$name")) display.$name($parameter);
end

def type(list) trigger(parameter)
    manager.fromQuery("value", $value~$[].class)
end

def type(parameter) trigger(parameter)
    manager.fromQuery("value", $value.class)
end

def	trigger(parameter)

end

def type(schemaImport)
	import $package.schemas.*;
end