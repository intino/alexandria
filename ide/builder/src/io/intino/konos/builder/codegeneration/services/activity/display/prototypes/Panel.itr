def type(panel & gen)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaDisplay;
    import io.intino.konos.alexandria.activity.displays.AlexandriaPanelDisplay;
    import io.intino.konos.alexandria.activity.displays.CatalogInstantBlock;
    import io.intino.konos.alexandria.activity.model.AbstractView;
    import io.intino.konos.alexandria.activity.model.Panel;
    import io.intino.konos.alexandria.activity.model.Toolbar;
    import io.intino.konos.alexandria.activity.model.panel.View;
    import io.intino.konos.alexandria.activity.model.renders.RenderDisplay;

    import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~DisplayNotifier;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.function.Consumer;

    public abstract class Abstract$name+firstUpperCase~Panel extends AlexandriaPanelDisplay<$name+firstUpperCase~DisplayNotifier> {

    	public Abstract$name+firstUpperCase~Panel($box+firstUpperCase~Box box) {
    		super(box);
    		element(buildPanel(box));
    	}

    	private static Panel buildPanel($box+firstUpperCase~Box box) {
    		Panel panel = new Panel();
    		[panel.name("$name");]
    		[panel.label("$label");]
    		[$toolbar+empty~panel.toolbar(buildToolbar(box));]
    		buildViews(box).forEach(v -> panel.add(v));
    		return panel;
    	}
		[
		$toolbar
		]
    	private static List<AbstractView> buildViews($box+firstUpperCase~Box box) {
    		List<AbstractView> result = new ArrayList<>();
    		result.add($display);
    		return result;
    	}

    }
end

def trigger(display & gen)
	new View().render(new RenderDisplay().displayLoader(new RenderDisplay.DisplayLoader() {
		@Override
		public AlexandriaDisplay load(Consumer<Boolean> loadingListener, Consumer<CatalogInstantBlock> instantListener) {
			return $owner+firstUpperCase~Panel.Views.$name+firstLowerCase(box, loadingListener, instantListener);
		}
	})).name("$name").label("$label")
end

def type(panel & src)
	package $package.displays;

	import io.intino.konos.alexandria.activity.displays.AlexandriaDisplay;
	import io.intino.konos.alexandria.activity.displays.CatalogInstantBlock;
	import $package+validPackage.$box+firstUpperCase~Box;


	import java.util.function.Consumer;

	public class $name+firstUpperCase~Panel extends Abstract$name+firstUpperCase~Panel {

		public $name+firstUpperCase~Panel($box+firstUpperCase~Box box) {
			super(box);
		}

		public static class Views {
			$display...[$NL]
		}
	}
end

def trigger(display & src)
	public static AlexandriaDisplay $display~Display($box+firstUpperCase~Box box, Consumer<Boolean> loadingListener, Consumer<CatalogInstantBlock> instantListener) {
		return null;
	}
end

def trigger(empty)
end

def trigger(toolbar)
	private static Toolbar buildToolbar($box+firstUpperCase~Box box) {
		Toolbar toolbar = new Toolbar();
		[toolbar.canSearch($canSearch);]
		return toolbar;
	}
end
