def type(notifier)
	export default class Notifier {
		static subscriptions = $[$];

    	constructor(element) {
            this.element = element;
            this.pushService = Application.services.pushService;
            this.pushRegistrations = $[$];
    		this.pushLinked = false;
        };

		setup() {
			var context = this.element.props.context != null ? this.element.props.context() : "";
			var key = this.element.props.id + context;
			if (Notifier.subscriptions$[key$]) return;
			Notifier.subscriptions$[key$] = true;
			this.when("addInstance").toSelf().execute((parameters) => this.element.addInstance(parameters));
			this.when("removeInstance").toSelf().execute((parameters) => this.element.removeInstance(parameters));
		};

		when = (message) => {
			var register = _register.bind(this);
			var element = this.element;
			var pushService = this.pushService;
			return {
				toSelf: function () {
					return {
						execute: function (action) {
							register(pushService.listen(message, function (parameters) {
								let id = parameters.i;
								let ownerPath = parameters.o;
								let context = element.props.context != null ? element.props.context() : null;
								if (id === element.props.id && (ownerPath == null || ownerPath === "" || ownerPath === context || _containsAll(ownerPath, context))) {
									action(parameters);
								}
							}));
						}
					}
				},
				execute: function (action) {
					register(pushService.listen(message, function(parameters) {
						if (parameters.n === element.name) {
							action(parameters);
						}
					}));
				}
			};

			function _containsAll(owner, context) {
				let contextList = context.split(".");
				for (var i=0; i<contextList.length; i++) {
					if (owner.indexOf(contextList$[i$]) === -1) return false;
				}
				return true;
			}

			function _register(registration) {
				this.pushRegistrations.push(registration);
			}
		};

		detached = () => {
			this.pushRegistrations.forEach((registrations) => registrations.deregister());
			this.pushRegistrations.splice(0, this.pushRegistrations.length);
		};
    }
end

def type(requester)
	export default class Requester {
		constructor(element) {
			this.element = element;
			this.pushService = Application.services.pushService;
			this.fileService = Application.services.fileService;
		};
    }
end