def type(notifier)
	export default class Notifier {
    	constructor(element) {
            this.element = element;
            this.pushService = Application.services.pushService;
            this.pushRegistrations = $[$];
    		this.pushLinked = false;
        };

		when = (message) => {
			var register = _register.bind(this);
			var element = this.element;
			var pushService = this.pushService;
			return {
				toSelf: function () {
					return {
						execute: function (action) {
							register(pushService.listen(message, function (parameters) {
								if (parameters.id === element.props.id) {
									action(parameters);
								}
							}));
						}
					}
				},
				execute: function (action) {
					register(pushService.listen(message, function(parameters) {
						if (parameters.name === element.name) {
							action(parameters);
						}
					}));
				}
			};

			function _register(registration) {
				this.pushRegistrations.push(registration);
			}
		};

		detached = () => {
			this.pushRegistrations.forEach((registrations) => registrations.deregister());
			this.pushRegistrations.splice(0, this.pushRegistrations.length);
		};
    }
end

def type(requester)
	export default class Requester {
		constructor(element) {
			this.element = element;
			this.pushService = Application.services.pushService;
			this.fileService = Application.services.fileService;
		};
    }
end