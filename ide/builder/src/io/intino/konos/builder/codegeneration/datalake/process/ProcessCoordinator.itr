def type(processes)
	package $package+validPackage.ness;

	import io.intino.konos.jms.TopicConsumer;
	import io.intino.konos.jms.TopicProducer;
	import io.intino.konos.datalake.Ness;
	import io.intino.konos.jms.Consumer;
	import io.intino.konos.jms.Bus;
    import org.apache.activemq.ActiveMQConnection;
    import org.apache.activemq.advisory.DestinationListener;
	import org.apache.activemq.advisory.DestinationSource;
	import org.apache.activemq.command.ActiveMQTopic;
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.$box+firstUpperCase~Configuration;
	import $package+validPackage.ness.processes.*;

	import javax.jms.JMSException;
	import javax.jms.Message;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Map;
    import java.util.HashMap;

	public class ProcessCoordinator {
		$process+field...[$NL]

		public static void registerProcesses($box+firstUppercase~Box box) {
			final String clientID = $clientId;
			$process+assign...[$NL]
		}

		$process+class...[$NL$NL]

		public static void unregister() {
			$process+unregister...[$NL]
		}
	}
end

def type(custom) trigger(clientId)
	box.configuration().get("$value");
end

def trigger(clientId)
	"$value"
end


def type(tank) trigger(unregister)
	$name+firstLowerCase.unregister();
end

def type(tank) trigger(field)
	private static io.intino.konos.datalake.Datalake.Tank $name+firstLowerCase;
end

def type(tank) trigger(assign)
	$name+firstLowerCase = box.datalake().add("$messageType+lowerCase");
	$name+firstLowerCase.handler(new $name+FirstUpperCase~Handler(box));
	$name+firstLowerCase.flow(clientID != null ? clientID + "-$name+lowerCase" : null);
end

def type(tank) trigger(add)
	tanks.add(NessTanks.$name+firstLowerCase);
end

def trigger(formatMessage)
	"$name"[$custom+customType...[]]
end

def trigger(process) trigger(class)
	public static class $name+snakeCaseToCamelCase+FirstUpperCase~Handler implements io.intino.konos.datalake.MessageHandler {
		private final $box+firstUppercase~Box box;

		public $name+snakeCaseToCamelCase+FirstUpperCase~Handler($box+firstUppercase~Box box) {
			this.box = box;
		}

		public void handle(io.intino.ness.inl.Message m) {
			try {
				$name+snakeCaseToCamelCase+FirstUpperCase~Process process = new $name+snakeCaseToCamelCase+FirstUpperCase~Process();
				process.box = box;
				process.$type+typeName = $type+load;
				$precondition
				process.execute();
			} catch(Throwable e) {
				org.slf4j.LoggerFactory.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME).error(e.getMessage(), e);
			}
		}
	}
end

def trigger(precondition)
	if (!process.$name($messageType)) return;
end

def trigger(tankImport)
	import $value+validPackage.process.*;
end

def type(schema) trigger(load)
	io.intino.konos.alexandria.Inl.fromMessage(m, $package.schemas.$name+FirstUpperCase.class)
end

def trigger(load)
	m
end

def type(schema) trigger(typeName)
	$name+firstLowerCase
end

def trigger(typeName)
	message
end