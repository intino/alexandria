def type(elementDisplays)
	package $package.displays;

    import io.intino.konos.alexandria.activity.displays.AlexandriaDisplay;
    import io.intino.konos.alexandria.activity.displays.*;
	import $package+validPackage.$box+firstUpperCase~Box;

    import java.lang.reflect.Constructor;
    import java.lang.reflect.InvocationTargetException;
    import java.util.HashMap;
    import java.util.Map;

	public class ElementDisplays {
		private static Map<String, ComponentCreator> elementMap = new HashMap<>();

		static {
			{
				$display...[$NL]
			}
		}

		public static AlexandriaElementDisplay displayFor($box+firstUpperCase~Box box, String name) {
			if (!elementMap.containsKey(name)) return null;
			return elementMap.get(name).build(box);
		}

		public static AlexandriaElementDisplay displayFor($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element) {
			if (!elementMap.containsKey(element.name())) return defaultElementDisplay(box, element);
			return elementMap.get(element.name()).build(box);
		}

		public static <T extends io.intino.konos.alexandria.activity.model.Element> java.util.List<T> elementsFor($box+firstUpperCase~Box box, Class<T> tClass, String... elements) {
			java.util.List<T> list = new java.util.ArrayList<>();
			for (String element : elements)
				list.add((T) elementMap.get(element).build(box).element());
			return list;
		}

		public static Class<? extends AlexandriaElementDisplay> displayTypeFor($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element) {
			if (!elementMap.containsKey(element.name())) return defaultElementType(box, element);
			return elementMap.get(element.name()).build(box).getClass();
		}

		private static Class<? extends AlexandriaElementDisplay> defaultElementType($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element) {
			if (element instanceof io.intino.konos.alexandria.activity.model.Panel) return AlexandriaPanelDisplay.class;

			if (element instanceof io.intino.konos.alexandria.activity.model.TemporalCatalog)
				return ((io.intino.konos.alexandria.activity.model.TemporalCatalog) element).type() == io.intino.konos.alexandria.activity.model.TemporalCatalog.Type.Range ? AlexandriaTemporalRangeCatalogDisplay.class : AlexandriaTemporalTimeCatalogDisplay.class;

			if (element instanceof io.intino.konos.alexandria.activity.model.Catalog)
				return AlexandriaCatalogDisplay.class;

			if (element instanceof io.intino.konos.alexandria.activity.model.Layout)
				return ((io.intino.konos.alexandria.activity.model.Layout) element).mode() == io.intino.konos.alexandria.activity.model.Layout.Mode.Menu ? AlexandriaMenuLayoutDisplay.class : AlexandriaTabLayoutDisplay.class;

			if (element instanceof io.intino.konos.alexandria.activity.model.Desktop)
				return AlexandriaDesktopDisplay.class;

			return null;
		}

		private static AlexandriaElementDisplay defaultElementDisplay($box+firstUpperCase~Box box, io.intino.konos.alexandria.activity.model.Element element) {
			if (element instanceof io.intino.konos.alexandria.activity.model.Panel) return new AlexandriaPanelDisplay(box);

			if (element instanceof io.intino.konos.alexandria.activity.model.TemporalCatalog)
				return ((io.intino.konos.alexandria.activity.model.TemporalCatalog) element).type() == io.intino.konos.alexandria.activity.model.TemporalCatalog.Type.Range ? new AlexandriaTemporalRangeCatalogDisplay(box) : new AlexandriaTemporalTimeCatalogDisplay(box);

			if (element instanceof io.intino.konos.alexandria.activity.model.Catalog)
				return new AlexandriaCatalogDisplay(box);

			if (element instanceof io.intino.konos.alexandria.activity.model.Layout)
				return ((io.intino.konos.alexandria.activity.model.Layout) element).mode() == io.intino.konos.alexandria.activity.model.Layout.Mode.Menu ? new AlexandriaMenuLayoutDisplay(box) : new AlexandriaTabLayoutDisplay(box);

			if (element instanceof io.intino.konos.alexandria.activity.model.Desktop)
				return new AlexandriaDesktopDisplay(box);

			return null;
		}

		private interface ComponentCreator {
			AlexandriaElementDisplay build($box+firstUpperCase~Box box);
		}
	}
end

def trigger(display)
	elementMap.put("$name", (box) -> new $name+FirstUpperCase(box));
end