def type(activity)
	package $package+validPackage;
	[import $dialogsImport+validPackage.dialogs.*;]
	[import $displaysImport+validPackage.displays.*;]
	[import $displaysImport+validPackage.displays.notifiers.*;]
	[import $displaysImport+validPackage.displays.requesters.*;]
	import $package+validPackage.resources.*;

	import io.intino.konos.alexandria.activity.ActivityAlexandriaSpark;
	import io.intino.konos.alexandria.activity.displays.AlexandriaDisplayNotifier;
	import io.intino.konos.alexandria.activity.displays.AlexandriaDisplayNotifierProvider;
	import io.intino.konos.alexandria.activity.services.push.PushService;
	import io.intino.konos.alexandria.activity.spark.resources.AfterDisplayRequest;
	import io.intino.konos.alexandria.activity.spark.resources.AssetResource;
	import io.intino.konos.alexandria.activity.spark.resources.AuthenticateCallbackResource;
	import io.intino.konos.alexandria.activity.spark.resources.BeforeDisplayRequest;

	import java.net.MalformedURLException;
	import java.net.URL;

	public class $name+SnakeCaseToCamelCase+FirstUpperCase~Activity extends io.intino.konos.alexandria.activity.Activity {

		public static void init(ActivityAlexandriaSpark spark, $box+SnakeCaseToCamelCase+FirstUpperCase~Box box) {
			$box+SnakeCaseToCamelCase+FirstUpperCase~Configuration.$name+SnakeCaseToCamelCase+FirstUpperCase~ActivityConfiguration configuration = box.configuration().$name+SnakeCaseToCamelCase+FirstLowerCase~Configuration;
			spark.route("/push").push(new PushService());
			spark.route("/authenticate-callback").get(manager -> new AuthenticateCallbackResource(manager, notifierProvider()).execute());
			spark.route("/asset/:name").get(manager -> new AssetResource(name -> new AssetResourceLoader(box).load(name), manager, notifierProvider()).execute());
			$userHome
			$resource...[$NL]
			initDisplays(spark);
		}

		public static void initDisplays(ActivityAlexandriaSpark spark) {
			$display...[$NL]
			$dialog...[$NL]
			registerNotifiers();
		}

		private static void registerNotifiers() {
			$display+notifier...[$NL]
			$dialog+notifier...[$NL]
		}
	}
end


def type(abstractPage) trigger(resource)
	$path...[$NL]
end

def trigger(userHome)
	spark.route("/alexandria/user").get(manager -> new $value+firstUpperCase~Resource(box, manager, notifierProvider()).execute());
end

def trigger(path)
	spark.route("$value"[$custom...[]]).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());
end

def type(display) trigger(notifier)
	register($name+firstUpperCase~Notifier.class).forDisplay($name+firstUpperCase.class);
end

def type(dialog) trigger(notifier)
	register(io.intino.konos.alexandria.activity.displays.AlexandriaDialogNotifier.class).forDisplay($name+firstUpperCase~Dialog.class);
end

def trigger(custom)
	.replace("{$value}", configuration.$value)
end

def type(display)
	spark.route("/$name+lowercase/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());
	spark.route("/$name+lowercase/:displayId").post(manager -> new $name+firstUppercase~Requester(manager, notifierProvider()).execute());
	$asset
	spark.route("/$name+lowercase/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());
end

def type(dialog)
	spark.route("/$name+lowercase~dialog/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());
	spark.route("/$name+lowercase~dialog/:displayId").post(manager -> new io.intino.konos.alexandria.activity.displays.AlexandriaDialogRequester(manager, notifierProvider()).execute());
	spark.route("/$name+lowercase~dialog/:displayId").get(manager -> new io.intino.konos.alexandria.activity.displays.AlexandriaDialogRequester(manager, notifierProvider()).execute());
	spark.route("/$name+lowercase~dialog/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());
end

def trigger(asset)
	spark.route("/$value+lowercase/:displayId").get(manager -> new $value+firstUppercase~Requester(manager, notifierProvider()).execute());
end

def trigger(quoted)
	"$value"
end

def type(custom) trigger(custom)
	.replace("{$value}", configuration.$value)
end
