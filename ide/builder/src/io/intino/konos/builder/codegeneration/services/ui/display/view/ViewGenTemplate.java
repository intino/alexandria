package io.intino.konos.builder.codegeneration.services.ui.display.view;

import org.siani.itrules.*;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.*;

public class ViewGenTemplate extends Template {

	protected ViewGenTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new ViewGenTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "view & container & display"))).add(literal("result.add(new ContainerView()\n\t\t\t.container(new io.intino.konos.alexandria.ui.model.view.container.DisplayContainer()\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .displayLoader((target, loadingListener, instantListener, session) -> ")).add(mark("owner", "FirstUpperCase")).add(literal(".Views.")).add(mark("name", "FirstUpperCase")).add(literal(".")).add(mark("display", "firstLowerCase")).add(literal("(box, target, loadingListener, instantListener, session))\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ")).add(expression().add(literal(".hideNavigator(")).add(mark("hideNavigator")).add(literal(")"))).add(literal("\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ")).add(expression().add(literal(".scopeManager(")).add(mark("catalogScope")).add(literal(")"))).add(literal(")\n\t\t\t.layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & container & mold"))).add(literal("result.add(new ContainerView().container(new io.intino.konos.alexandria.ui.model.view.container.MoldContainer().mold((io.intino.konos.alexandria.ui.model.Mold) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element())).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & container & catalog"))).add(literal("result.add(new ContainerView().container(new io.intino.konos.alexandria.ui.model.view.container.CatalogContainer()")).add(expression().add(literal(".filter(")).add(mark("filter", "filtercall")).add(literal(")"))).add(literal(".displayLoader(")).add(mark("catalogDisplayLoader")).add(literal(").catalog(")).add(mark("package")).add(literal(".displays.Displays.elementFor(box, io.intino.konos.alexandria.ui.model.Catalog.class, ")).add(mark("catalog", "quoted")).add(literal("))).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & container & panel"))).add(literal("result.add(new ContainerView().container(new io.intino.konos.alexandria.ui.model.view.container.PanelContainer().panel(")).add(mark("package")).add(literal(".displays.Displays.elementFor(box, io.intino.konos.alexandria.ui.model.Panel.class, ")).add(mark("panel", "quoted")).add(literal("))).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & container & set"))).add(literal("result.add(new ContainerView().container(new io.intino.konos.alexandria.ui.model.view.container.SetContainer()")).add(mark("containerDisplayTypeLoader")).add(mark("setViewItems")).add(literal(").layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & catalog & list"))).add(literal("result.add(new io.intino.konos.alexandria.ui.model.view.ListView()")).add(expression().add(literal(".noRecordsMessage(\"")).add(mark("noItemsMessage")).add(literal("\")"))).add(literal(".mold((io.intino.konos.alexandria.ui.model.Mold) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & catalog & grid"))).add(literal("result.add(new io.intino.konos.alexandria.ui.model.view.GridView()")).add(expression().add(literal(".noRecordsMessage(\"")).add(mark("noItemsMessage")).add(literal("\")"))).add(literal(".mold((io.intino.konos.alexandria.ui.model.Mold) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & catalog & map"))).add(literal("result.add(new io.intino.konos.alexandria.ui.model.view.MapView()")).add(expression().add(literal(".center(new io.intino.konos.alexandria.ui.model.view.MapView.Center().latitude(")).add(mark("latitude")).add(literal(").longitude(")).add(mark("longitude")).add(literal("))"))).add(expression().add(literal(".")).add(mark("zoom"))).add(literal(".mold((io.intino.konos.alexandria.ui.model.Mold) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("type", "view & catalog & magazine"))).add(literal("result.add(new io.intino.konos.alexandria.ui.model.view.MagazineView()")).add(expression().add(literal(".noItemsMessage(\"")).add(mark("noItemsMessage")).add(literal("\")"))).add(literal(".mold((io.intino.konos.alexandria.ui.model.Mold) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, \"")).add(mark("mold")).add(literal("\").element()).layout(View.Layout.")).add(mark("layout")).add(literal(")")).add(expression().add(literal(".width(")).add(mark("width")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\")")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(expression().add(mark("hidden", "call"))).add(literal(");")),
			rule().add((condition("trigger", "catalogDisplayLoader"))).add(literal("new io.intino.konos.alexandria.ui.model.view.container.CatalogContainer.Loader() {\n\tpublic io.intino.konos.alexandria.ui.displays.AlexandriaAbstractCatalog load(io.intino.konos.alexandria.ui.model.Catalog catalog, io.intino.konos.alexandria.ui.services.push.UISession session) {\n\t\treturn (io.intino.konos.alexandria.ui.displays.AlexandriaAbstractCatalog) ")).add(mark("package")).add(literal(".displays.Displays.displayFor(box, catalog);\n\t}\n}")),
			rule().add((condition("type", "containerViewDisplayTypeLoader"))).add(literal(".displayTypeLoader((element, object) -> ")).add(mark("package")).add(literal(".displays.Displays.displayFor(element, object))")),
			rule().add((condition("type", "setViewItems"))).add(mark("items").multiple("\n")),
			rule().add((condition("type", "group"))).add(literal("result.add(new Group()")).add(expression().add(literal(".label(\"")).add(mark("label")).add(literal("\")"))).add(literal(".mode(Group.Mode.")).add(mark("mode")).add(literal(")")).add(expression().add(literal(".hidden(")).add(mark("hidden")).add(literal(")"))).add(expression().add(literal("\n")).add(literal("\t\t")).add(mark("item").multiple("\n"))).add(literal(".name(\"")).add(mark("name")).add(literal("\"));")),
			rule().add((condition("type", "items"))).add(literal(".add(new io.intino.konos.alexandria.ui.model.view.set.Items().\n\tlabel((element, object) -> ")).add(mark("layout", "FirstUpperCase")).add(literal(".")).add(mark("path", "FirstUppercase")).add(literal(".label(box, element, (")).add(mark("modelClass")).add(literal(") object))\n\t")).add(expression().add(literal(".icon((element, object) -> ")).add(mark("layout", "FirstUpperCase")).add(literal(".")).add(mark("path", "FirstUppercase")).add(literal(".icon(box, element, (")).add(mark("modelClass")).add(literal(") object))"))).add(literal("\n\t")).add(expression().add(literal(".bubble((element, object) -> ")).add(mark("layout", "FirstUpperCase")).add(literal(".")).add(mark("path", "FirstUppercase")).add(literal(".bubble(box, element, (")).add(mark("modelClass")).add(literal(") object))"))).add(literal("\n\t.view(")).add(mark("view")).add(literal(")")).add(expression().add(literal(".hidden(")).add(mark("hidden")).add(literal(")"))).add(literal(")")),
			rule().add((condition("type", "item"))).add(literal(".add(new io.intino.konos.alexandria.ui.model.view.set.Item().label(\"")).add(mark("label")).add(literal("\").view(")).add(mark("view")).add(literal(")")).add(expression().add(literal(".hidden(")).add(mark("hidden")).add(literal(")"))).add(literal(".name(\"")).add(mark("name")).add(literal("\"))")),
			rule().add((condition("type", "hidden")), (condition("trigger", "call"))).add(literal(".hidden((object, session) -> ")).add(mark("owner", "FirstUpperCase")).add(literal(".Views.")).add(mark("view", "FirstUpperCase")).add(literal(".hidden(box, object, session))")),
			rule().add((condition("type", "filter")), (condition("trigger", "call"))).add(literal("(catalog, context, target, object, session) -> ")).add(mark("owner", "FirstUpperCase")).add(literal(".Views.")).add(mark("view", "firstUpperCase")).add(literal(".filter(box, catalog, context, target, (")).add(mark("itemClass")).add(literal(") object, session)")),
			rule().add((condition("type", "catalogScope"))).add(literal("(display, scope) -> ")).add(mark("owner", "FirstUpperCase")).add(literal(".Views.")).add(mark("display", "firstLowerCase")).add(literal("Scope(box, display, scope)")),
			rule().add((condition("trigger", "zoom"))).add(literal("zoom(new io.intino.konos.alexandria.ui.model.view.MapView.Zoom()")).add(expression().add(literal(".defaultZoom(")).add(mark("default")).add(literal(")"))).add(expression().add(literal(".max(")).add(mark("max")).add(literal(")"))).add(expression().add(literal(".min(")).add(mark("min")).add(literal(")"))).add(literal(")")),
			rule().add((condition("trigger", "quoted"))).add(literal("\"")).add(mark("value")).add(literal("\""))
		);
		return this;
	}
}