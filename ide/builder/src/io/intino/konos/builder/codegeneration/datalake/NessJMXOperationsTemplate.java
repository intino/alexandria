package io.intino.konos.builder.codegeneration.datalake;

import org.siani.itrules.LineSeparator;
import org.siani.itrules.Template;

import java.util.Locale;

import static org.siani.itrules.LineSeparator.LF;

public class NessJMXOperationsTemplate extends Template {

	protected NessJMXOperationsTemplate(Locale locale, LineSeparator separator) {
		super(locale, separator);
	}

	public static Template create() {
		return new NessJMXOperationsTemplate(Locale.ENGLISH, LF).define();
	}

	public Template define() {
		add(
			rule().add((condition("type", "interface"))).add(literal("package ")).add(mark("package", "validPackage")).add(literal(".datalake;\n\nimport io.intino.konos.jmx.Description;\nimport io.intino.konos.jmx.Parameters;\n\npublic interface NessOperationsMBean {\n\t@Description(\"Shows information about the available operations\")\n\t@Parameters({})\n\tjava.util.List<String> help();\n\n\t@Description(\"Starts reflow mode to reproduce events coming from datalake\")\n\t@Parameters({})\n\tboolean reflow();\n\n\t@Description(\"Starts reflow mode to reproduce events coming from datalake since instant parameter\")\n\t@Parameters({})\n\tboolean reflow(String fromInstant);\n\n\t@Description(\"Starts reflow mode to reproduce events coming from datalake based on reflow configuration. This configuration is coded on INL with io.intino.konos.datalake.ReflowConfiguration schema\")\n\t@Parameters({})\n\tboolean customReflow(String reflowConfiguration);\n}")),
				rule().add((condition("type", "operations")), not(condition("type", "interface"))).add(literal("package ")).add(mark("package", "validPackage")).add(literal(".datalake;\n\nimport io.intino.konos.datalake.MessageHandler;\nimport io.intino.konos.datalake.ReflowDispatcher;\nimport io.intino.konos.datalake.ReflowConfiguration;\nimport io.intino.konos.jmx.JMXServer;\nimport io.intino.tara.magritte.Graph;\nimport io.intino.tara.magritte.RemounterGraph;\nimport io.intino.tara.magritte.stores.FileSystemStore;\nimport org.apache.commons.io.FileUtils;\nimport ")).add(mark("package", "validPackage")).add(literal(".")).add(mark("box", "FirstUpperCase")).add(literal("Box;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.time.Instant;\nimport java.util.Collections;\n\nimport static org.slf4j.Logger.ROOT_LOGGER_NAME;\n\npublic class NessOperations implements NessOperationsMBean {\n\tprivate static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);\n\tprivate final ")).add(mark("box", "firstUpperCase")).add(literal("Box box;\n\tprivate final ReflowAssistant assistant;\n\tprivate int processed = 0;\n\tprivate io.intino.konos.datalake.EventDatalake.ReflowSession session;\n\tprivate Graph graph;\n\n\tpublic NessOperations(")).add(mark("box", "firstUpperCase")).add(literal("Box box) {\n\t\tthis.box = box;\n\t\tthis.assistant = new ")).add(mark("package", "validPackage")).add(literal(".datalake.ReflowAssistant(box);\n\t}\n\n\tpublic java.util.List<String> help() {\n\t\tjava.util.List<String> operations = new java.util.ArrayList<>();\n\t\toperations.add(\"boolean reflow():Starts reflow mode to reproduce events coming from datalake\");\n\t\toperations.add(\"boolean reflow(String from):Starts reflow mode to reproduce events coming from datalake since the instant parameter\");\n\t\toperations.add(\"boolean customReflow(String reflowConfiguration):Starts reflow mode to reproduce events coming from datalake since the instant parameter\");\n\t\treturn operations;\n\t}\n\n\n\tpublic boolean reflow() {\n\t\treturn reflow(new ReflowConfiguration().blockSize(assistant.defaultBlockSize()).tankList(assistant.defaultTanks().stream().map(t -> new ReflowConfiguration.Tank().name(t.name()).from(Instant.MIN)).collect(java.util.stream.Collectors.toList())));\n\t}\n\n\tpublic boolean reflow(String from) {\n\t\tInstant instant = Instant.parse(from);\n\t\treturn reflow(new ReflowConfiguration().blockSize(assistant.defaultBlockSize()).tankList(assistant.defaultTanks().stream().map(t -> new ReflowConfiguration.Tank().name(t.name()).from(instant)).collect(java.util.stream.Collectors.toList())));\n\t}\n\n\tpublic boolean customReflow(String reflowConfiguration) {\n\t\treturn reflow(io.intino.konos.alexandria.Inl.fromMessage(io.intino.ness.inl.Message.load(reflowConfiguration), ReflowConfiguration.class));\n\t}\n\n\tprivate boolean reflow(ReflowConfiguration configuration) {\n\t\tlogger.info(\"Starting Reflow...\");\n\t\tassistant.before();\n\t\t")).add(mark("package", "validPackage")).add(literal(".datalake.Datalake.unregister();\n\t\tthis.session = box.datalake().eventDatalake().reflow(configuration, new ReflowDispatcher(")).add(mark("package", "validPackage")).add(literal(".datalake.Datalake.byName(configuration.tankList().stream().map(t -> t.name()).collect(java.util.stream.Collectors.toList())), onBlock(), onFinish()));\n\t\tfinal Graph graph = assistant.graph();\n\t\ttry {\n\t\t\tif (graph.store() instanceof FileSystemStore && configuration.cleanStore())\n\t\t\t\tFileUtils.deleteDirectory(((FileSystemStore) graph.store()).directory());\n\t\t\tfinal RemounterGraph original = (RemounterGraph) new RemounterGraph(graph.store()).loadStashes(assistant.coreStashes());\n\t\t\tallowWriting(original, false);\n\t\t\tthis.graph = original.realClone();\n\t\t\tbox.put(this.graph);\n\t\t\tthis.session.next();\n\t\t} catch (IOException e) {\n\t\t\tlogger.error(e.getMessage(), e);\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate MessageHandler onFinish() {\n\t\treturn m -> {\n\t\t\tdoWrite();\n\t\t\tsession.finish();\n\t\t\tfinal Graph graph = new Graph(NessOperations.this.graph.store());\n\t\t\tallowWriting(graph, true);\n\t\t\tbox.put(graph.loadStashes(assistant.coreStashes()));\n\t\t\t")).add(mark("package", "validPackage")).add(literal(".datalake.Datalake.registerTanks(box);\n\t\t\tassistant.after();\n\t\t\tlogger.info(\"Reflow finished - \" + m.get(\"count\") + \" messages processed\");\n\t\t};\n\t}\n\n\tprivate MessageHandler onBlock() {\n\t\treturn m -> {\n\t\t\tdoWrite();\n\t\t\tlogger.info(\"Block processed - \" + m.get(\"count\") + \" messages processed\");\n\t\t\tsession.next();\n\t\t};\n\t}\n\n\tprivate void doWrite() {\n\t\tsession.pause();\n\t\tallowWriting(graph, true);\n\t\tassistant.saveGraph(graph);\n\t\tthis.graph = new RemounterGraph(graph.store()).loadStashes(assistant.coreStashes());\n\t\tallowWriting(graph, false);\n\t\tbox.put(graph);\n\t\tsession.play();\n\t}\n\n\tprivate void allowWriting(Graph original, boolean flag) {\n\t\tif (original.store() instanceof FileSystemStore) ((FileSystemStore) original.store()).allowWriting(flag);\n\t}\n\n\n\tpublic static JMXServer init(")).add(mark("box", "FirstUpperCase")).add(literal("Box box) {\n\t\tJMXServer server = new JMXServer(Collections.singletonMap(\"")).add(mark("package", "validPackage")).add(literal(".datalake.NessOperations\", new Object[]{box}));\n\t\tserver.init();\n\t\treturn server;\n\t}\n}"))
		);
		return this;
	}
}