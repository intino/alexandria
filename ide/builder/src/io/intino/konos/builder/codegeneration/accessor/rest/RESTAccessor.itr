def type(accessor)
	package $package+ValidPackage;

    import java.util.List;
    import java.util.ArrayList;
    import java.util.Arrays;
	import java.net.URL;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.schema.Resource;
	import io.intino.konos.restful.core.RestfulAccessor;
	import io.intino.konos.restful.core.RestfulNotifier;
	import io.intino.konos.restful.exceptions.RestfulFailure;
	import com.google.gson.Gson;
	import com.google.gson.GsonBuilder;
	import com.google.gson.reflect.TypeToken;
	import org.slf4j.Logger;
	import org.slf4j.LoggerFactory;

	import static org.slf4j.Logger.ROOT_LOGGER_NAME;


	$schemaImport

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor {
		private static Logger logger = LoggerFactory.getLogger(ROOT_LOGGER_NAME);

		private URL url;
		private static Gson gsonReader = gsonReader();
		private static Gson gsonWriter = gsonWriter();
		private RestfulAccessor accessor = new RestfulAccessor();
		private RestfulNotifier notifier = new RestfulNotifier();[
		$certificate~private URL certificate;][
		$token~private String token;]

		public $name+firstUpperCase+SnakeCaseToCamelCase~Accessor(URL url[, $certificate~URL certificate][$token, String token]) {
			this.url = url;[
			$certificate~this.certificate = certificate;][
			$token~this.token = token;]
		}

		$resource...[$NL$NL]

		$notification...[$NL$NL]

		private String encode(String value) {
			try {
				return java.net.URLEncoder.encode(value, "UTF-8");
			} catch (java.io.UnsupportedEncodingException e) {
				logger.error(e.getMessage(), e);
				return "";
			}
		}

		private static Gson gsonReader() {
            return new GsonBuilder().
                registerTypeAdapter(java.time.Instant.class, (com.google.gson.JsonDeserializer<java.time.Instant>) (json, type1, jsonDeserializationContext) -> java.time.Instant.ofEpochMilli(json.getAsJsonPrimitive().getAsLong())).
                registerTypeAdapter(java.util.Date.class, (com.google.gson.JsonDeserializer<java.util.Date>) (json, type1, jsonDeserializationContext) -> new java.util.Date(json.getAsJsonPrimitive().getAsLong())).
                create();
		}

		private static Gson gsonWriter() {
            return new GsonBuilder().
                registerTypeAdapter(java.time.Instant.class, (com.google.gson.JsonSerializer<java.time.Instant>) (instant, type, context) -> new com.google.gson.JsonPrimitive(instant.toEpochMilli())).
                registerTypeAdapter(java.util.Date.class, (com.google.gson.JsonSerializer<java.util.Date>) (date, type, context) -> new com.google.gson.JsonPrimitive(date.getTime())).
                create();
        }
	}
end

def type(resource)
	public $returnType+firstUpperCase+ReturnTypeFormatter $operation+firstLowerCase~$name+SnakeCaseToCamelCase+firstUpperCase($parameter+signature...[, ]) $exceptionResponses+declaration {
		try {
			[java.util.Map<String, String> parameters = new java.util.HashMap<String, String>() {{
				$parameter+declaration...[$NL]
			}};]
			$invokeSentence
		} catch (RestfulFailure e) {
			$exceptionResponses+throws
		}
	}
end

def type(notification)
	public void listen$name+SnakeCaseToCamelCase+firstUppercase([$parameter+signature...[, ], ]java.util.function.Consumer<String> listener) throws Unknown {
		try {
			[java.util.Map<String, String> parameters = new java.util.HashMap<String, String>() {{
				$parameter+declaration...[$NL]
			}};]
			this.notifier.listen(listener, accessor.[$secure~secure(this.url, this.token)].post("$path"[, $parameters]).content().trim());
		} catch (RestfulFailure e) {
			throw new Unknown(e.label());
		}
	}
end

def type(parameter) trigger(signature)
	$parameterType $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(invoke)
	parameters
end

def type(parameter & query & list) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null && !$name+SnakeCaseToCamelCase+firstLowerCase.isEmpty()) put("$name", String.valueOf(gsonWriter.toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(parameter & query & required) type(dateData)  trigger(declaration)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant().toEpochMilli()));
end

def type(parameter & query & required) type(dateTimeData)  trigger(declaration)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toEpochMilli()));
end

def type(parameter & query & required & textData) trigger(declaration)
	put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query & required) type(boolData | integerData | realData | longIntegerData) trigger(declaration)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & query & required & objectData) trigger(declaration)
	put("$name", String.valueOf(gsonWriter.toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(parameter & query) type(dateData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant().toEpochMilli()));
end

def type(parameter & query) type(dateTimeData | dateData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toEpochMilli()));
end

def type(parameter & query) type(textData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query) type(boolData | integerData | realData | longIntegerData) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & objectData) type(query | body) trigger(declaration)
	if ($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", encode(String.valueOf(gsonWriter.toJson($name+SnakeCaseToCamelCase+firstLowerCase))));
end

def type(parameter) trigger(declaration)
end

def type(parameter) trigger(fileDeclaration)
end

def type(invokeSentence & void)
	$doInvoke;
end

def type(invokeSentence & object & list)
    return gsonReader.fromJson($doInvoke.content(), new TypeToken<$returnType>(){}.getType());
end

def type(invokeSentence & object)
	return gsonReader.fromJson($doInvoke.content(), $returnType.class);
end

def type(invokeSentence & file & list)
	return null; //TODO
end

def type(invokeSentence & file)
	return $doInvoke;
end

def type(invokeSentence & date & list)
	return null; //TODO
end

def type(invokeSentence) type(date | instant)
	return gsonReader.fromJson($doInvoke.content(), $returnType.class);
end

def type(invokeSentence & datetime & list)
    return gsonReader.fromJson($doInvoke.content(), new TypeToken<ArrayList<Instant>>(){}.getType());
end

def type(invokeSentence & datetime)
	return java.time.Instant.ofEpochMilli(Long.valueOf($doInvoke.content()));
end

def type(invokeSentence & primitive & int & list)
    return gsonReader.fromJson($doInvoke.content(), new TypeToken<ArrayList<Integer>>(){}.getType());
end

def type(invokeSentence & primitive & int)
	return Integer.valueOf($doInvoke.content());
end

def type(invokeSentence & primitive & list)
    return gsonReader.fromJson($doInvoke.content(), new TypeToken<ArrayList<$returnType>>(){}.getType());
end

def type(invokeSentence & primitive)
	return $returnType+firstUpperCase.valueOf($doInvoke.content());
end

def type(exceptionResponses & none) trigger(throws)
	throw new Unknown(e.label());
end

def type(exceptionResponses) trigger(throws)
	$exceptionResponse+throws...[$NLelse ]
	throw new Unknown(e.label());
end

def type(exceptionResponse) trigger(throws)
	if (e.code().equals("$code")) throw new $exceptionName(e.label());
end

def type(exceptionResponses) trigger(declaration)
	throws [$exceptionResponse+declaration...[, ], ]Unknown
end

def type(exceptionResponse) trigger(declaration)
	$exceptionName
end

def type(auth & cert & doInvoke)
	accessor.secure(this.url, $certificate~this.certificate, this.password).$type+firstLowerCase($relativePath[, $parameters][, Arrays.asList($resource...[,])])
end

def type(auth & doInvoke)
	accessor.secure(this.url, this.token).$type+firstLowerCase($relativePath[, $parameters][, Arrays.asList($resource...[,])])
end

def type(doInvoke)
	accessor.$type+firstLowerCase(this.url, $relativePath[, $parameters][, Arrays.asList($resource...[,])])
end

def type(doInvoke)
	accessor.$type+firstLowerCase(this.url, $relativePath[, $parameters][, Arrays.asList($resource...[,])])
end

def type(schemaImport) trigger(schemaImport)
	import $package.schemas.*;
end