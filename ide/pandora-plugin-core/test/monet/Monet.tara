dsl Pandora


Service Monet as REST(host = "", basePath = "/", consumes = "", produces = "")
	Resource(path = "/catalogs/:catalog-name") Catalogs
		Parameter(in = path, required = false) catalog-name as Text
		Get(description = "Get entire catalog") getCatalog
			Parameter(in = path, required = true) catalog-name as Text
			Parameter(in = query, required = false) start as Integer
			Parameter(in = query, required = false) end as Integer
			Response as List Object(catalogElement)
			exceptionRefs = CatalogNotFound CatalogNotAvailable
		Patch > Response
	Resource(path = "catalog-count/:catalog-name")
		Get(description = "Get number of elements under catalog") getCatalogCount
			Parameter(in = path, required = true) catalog-name as Text
			Response as List Integer
			exceptionRefs = CatalogNotFound CatalogNotAvailable
	Resource(path = "/:catalog-name/:entity-id")
		Get(description = "Get full description of element under given catalog")
			Parameter(in = path, required = true) catalog-name as Text
			Parameter (in = path) entity-id as Text
			Response as Object(entityResponse)
			Exception(code = ErrorNotFound) EntityNotFound as Text
			Exception(code = ErrorUnauthorized)

	Exception(code = ErrorNotFound) CatalogNotFound as Text // TODO obliga a poner nombre
	Exception(code = ErrorUnauthorized) CatalogNotAvailable as Text

//Service (path = "", title = "Process management") as REST
//	Resource startProcess", title = "Start a process of the given name", path = "", method = Post)
//		Parameter process-name", in = path) as Text
//		Parameter requester-id", in = query) as Text
//		Parameter requester-uri", in = query, required = false) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource contextOf", title = "Context of the given process id", path = "context-of", method = Get)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk) as Object(format = contextResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource notifyWorkItemEnding", title = "Communicated the end of a work item", path = "finished-work-item", method = Put)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource prepareSignature", title = "Prepare signature for stamping", path = "prepare-signature", method = Get)
//		Parameter signature-id", in = path) as Text
//		Parameter certificate", in = query) as Text
//		Parameter label", in = query) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource stampSignature", title = "Stamp signature", path = "stamp-signature", method = Post)
//		Parameter signature-id", in = path) as Text
//		Parameter signature-content", in = query) as Text
//		Response(code = SuccessOk) as Text
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//Service(path = "", title = "Form management") as REST
//	Resource getForm", title = "Form data", path = "form", method = Get)
//		Parameter id", in = path) as Text
//		Response(code = SuccessOk) as Object(format = formResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource validateField", title = "Field validation", path = "field-validation", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Parameter field-value", in = query) as Text
//		Response(code = SuccessOk) as Object(fieldValidationResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource getFieldTypeAhead", title = "Field type ahead", path = "field-type-ahead", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Parameter field-value", in = query) as Text
//		Response(code = SuccessOk) as Object(format = fieldTypeAheadResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//Service(path = "", title = "File management") as REST //TODO
//	Resource getFieldTypeAhead", title = "Download file", path = "field-type-ahead", method = Get)
//		Parameter form-id", in = query) as Text
//		Parameter field-label", in = query) as Text
//		Response(code = SuccessOk) as Object(format = fieldTypeAheadResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//
//Service(path= "", title = "Catalogs") as REST
//	Resource getCatalog", title = "Get entire catalog", path = "", method = Get)
//		Parameter catalog-name", in = path) as Text
//		Parameter start", in = query, required = false) as Integer
//		Parameter end", in = query, required = false) as Integer
//		Response(code = SuccessOk) as Object(catalogResponse)
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)
//	Resource getCatalogCount", title = "Get number of elements under catalog", path = "catalog-count", method = Get)
//		Parameter catalog-name", in = path) as Text
//		Response(code = SuccessOk) as Integer
//		Response(code = ErrorNotFound)
//		Response(code = ErrorUnauthorized)

Schema catalogElement
	Attribute id as Text
	Attribute (multiple = true) types as Text
	Attribute created as Text
	Attribute active as Bool

Schema entityResponse
	Attribute id as Text
	Attribute created as Text
	Attribute active as Bool
	Schema layer
		Attribute typeName as Text
		AttributeMap

Schema contextResponse
	Attribute label as Text(defaultValue = "")
	Attribute description as Text(defaultValue = "")
	Schema file
		Attribute label as Text
		Attribute downloadFileId as Text
	Schema record
		Attribute format as Text(defaultValue = "None")
		Attribute data as Text
	Schema trace
		Attribute instant as Text
		Attribute message as Text

Schema formResponse
	Attribute id as Text
	Attribute title as Text
	Attribute description as Text
	Attribute helper as Text
	Schema field
		Attribute type as Text
		AttributeMap
	Schema display
		Attribute(multiple = true) forms as Text
		// TODO ARRAY OF FORMS RECURSIVENESS IN DEFINITIONS OF FORMATS

Schema fieldValidationResponse
	Attribute status as Bool
	Attribute message as Text
	Schema field
		Attribute type as Text
		AttributeMap

Schema fieldTypeAheadResponse
	Schema typeAheadElement
		Attribute label as Text
		Attribute id as Text


Schema Shop
	Has(Product)

Schema Product
	Attribute name as Text
	Attribute price as Real
