dsl Konos

Service(title = "Cesar DevOps Service") cesar-rest as REST(host = "{host}", port = "9000")
	color = "#FFFFFF"
	AuthenticatedWithToken
	Resource(path = "/projects") projects
		Get(description = "List of projects")
			Response as Object(ProjectInfo) List
	Resource(path = "/projects/:project") project
		Get(description = "Project description")
			Parameter(in = path) project as Text
			Response as Object(ProjectInfo)
			Exception(BadRequest)
	Resource(path = "/projects/:project/processes") processes
		Get(description = "List of processes")
			Parameter(in = path) project as Text
			Response as Object(ProcessInfo) List
	Resource(path = "/projects/:project/processes/:process/") process
		Get(description = "A process of specific version")
			Parameter(in = path) project as Text
			Parameter(in = path) process as Text
			Parameter(in = query) pr-a as Text
			Parameter(in = body, isRequired = true) nombre as Text > description = "Nombre de la imagen a aÃ±adir"
			Response as Object(ProcessInfo)
			Exception(BadRequest)

	Resource(path = "/projects/:project/processes/:process/status") processStatus
		Get(description = "Information of a process")
			Parameter(in = path) project as Text
			Parameter(in = path) process as Text
			Response as Object(ProcessStatus)
			Exception(BadRequest)
	Resource(path = "/projects/:project/processes/:process/log") processLog
		Get(description = "Show the last log entries")
			Parameter(in = path) project as Text
			Parameter(in = path) process as Text
			Response as Text
			Exception(BadRequest)
	Resource(path = "/servers") servers
		Get(description = "List of servers")
			Response as Object(ServerInfo) List
	Resource(path = "/servers/:server") server
		Get(description = "Information of a server")
			Parameter(in = path) server as Text
			Response as Object(ServerInfo)
			Exception(BadRequest)
	Resource(path = "/servers/:server/status") serverStatus
		Get(description = "Information of a server")
			Parameter(in = path) server as Text
			Response as Object(ServerStatus)
			Exception(BadRequest)
	Resource(path = "/servers/:server/status") serverLog
		Get(description = "Information of a server")
			Parameter(in = path) server as Text
			Response as Object(ServerStatus)
			Exception(BadRequest)
	Resource(path = "/devices") devices
		Get(description = "List of devices")
			Response as Text List
			Exception(BadRequest)
	Resource(path = "/devices/:device") device
		Get(description = "Information of a device")
			Parameter(in = path) device as Text
			Response as Object(DeviceInfo)
			Exception(BadRequest)
	Resource(path = "/devices/:device/status") deviceStatus
		Get(description = "Status of a device")
			Parameter(in = path) device as Text
			Response as Object(DeviceStatus)
			Exception(BadRequest)
	Resource(path = "/deploy") deployProcess
		Post(description = "Deploy process") deployProcess
			Parameter(in = query) user as Text
			Parameter(in = query) deployment as Object(ProcessDeployment)
			Exception(BadRequest)
			Exception(Forbidden)
			Response
	Notification(path = "/log") log
		Parameter(in = query) project as Text



Schema ServerStatus
	Attribute ts as DateTime
	Attribute bootTime as DateTime
	Attribute id as Text
	Attribute memory as Real
	Attribute hdd as Real
	Attribute cpu as Real
	Attribute temperature as Real
	Attribute processes as Integer
	Attribute inboundConnections as Integer
	Attribute outboundConnections as Integer

Schema ServerInfo
	Attribute id as Text
	Attribute active as Bool
	Attribute ip as Text
	Attribute architecture as Text
	Attribute os as Text
	Attribute jvm as Text
	Attribute cores as Integer
	Attribute memorySize as Real
	Attribute diskSize as LongInteger
	Schema(multiple = false) RemoteConnection
		Attribute url as Text
		Attribute port as Integer
		Attribute user as Text

Schema ProcessInfo
	Attribute id as Text
	Attribute artifact as Text
	Attribute project as Text
	Attribute jmxPort as Integer
	Attribute publicURL as Text
	Schema(multiple = false) Runtime
		Attribute serverName as Text
		Attribute managementPort as Integer
		Attribute ip as Text
		Attribute port as Integer

Schema ProcessStatus
	Attribute ts as DateTime
	Attribute project as Text
	Attribute name as Text
	Attribute serverId as Text
	Attribute started as Bool
	Attribute memory as Real
	Attribute cpu as Real
	Attribute threads as Integer

Schema ProcessDeployment
	Attribute project as Text
	Attribute groupId as Text
	Attribute artifactId as Text
	Attribute version as Text
	Attribute jmxPort as Integer
	Attribute datalake as Bool
	Attribute jvmOptions as Text
	Schema(multiple = false) Prerequisites
		Attribute memory as Integer
			defaultValue = 512 Mb
		Attribute hdd as Real
			defaultValue = 2.0 Gb
	Schema(multiple = false) Packaging
		Attribute classpathPrefix as Text
		Schema Parameter
			Attribute name as Text
			Attribute value as Text
	Schema Artifactory
		Attribute id as Text
		Attribute url as Text
		Attribute user as Text
		Attribute password as Text
	Attribute destinationServer as Text

Schema Parameter
	Attribute name as Text
	Attribute type as Text
	Attribute value as Text


Schema Command
	Attribute operation as Text
	AttributeMap parameters

Schema CommandExecuted
	Attribute ts as DateTime
	Attribute commandName as Text
	Attribute remarks as Text
	Attribute deviceId as Text
	Attribute consulVersion as Text

Schema Status
	Attribute deviceId as Text
	Attribute ts as DateTime
	Attribute consulVersion as Text
	Attribute temperature as Real
	Attribute battery as Real
	Attribute cpuUsage as Real
	Attribute isPlugged as Bool
	Attribute isScreenOn as Bool


Schema ProjectInfo
	Attribute name as Text
	Attribute serverInfos as Object(ServerInfo) List
	Attribute deviceInfos as Object(DeviceInfo) List
	Attribute processInfos as Object(ProcessInfo) List



Schema SystemSchema
	Attribute id as Text
	Attribute jmxPort as Integer
	Attribute publicURL as Text
	Schema(multiple = false) Packaging
		Attribute artifact as Text
		Attribute classpathPrefix as Text
		Schema Parameter
			Attribute name as Text
			Attribute value as Text

	Schema Artifactory
		Attribute id as Text
		Attribute url as Text
		Attribute user as Text
		Attribute password as Text

	Schema(multiple = false) Runtime
		Attribute serverName as Text
		Attribute managementPort as Integer
		Attribute ip as Text
		Attribute port as Integer

Schema ServerSchema
	Attribute name as Text
	Attribute ip as Text
	Attribute performance as Text
	Schema(multiple = false) RemoteConnection
		Attribute url as Text
		Attribute port as Integer
		Attribute user as Text

Schema Boot
	Attribute ts as DateTime
	Attribute deviceId as Text
	Attribute consulVersion as Text

Schema Crash
	Attribute ts as DateTime
	Attribute app as Text
	Attribute appVersion as Text
	Attribute deviceId as Text
	Attribute stack as Text
	Attribute consulVersion as Text


Schema DeviceBoot as ExtensionOf(DeviceInfo, parentView = empty)
	Attribute ts as DateTime
	Attribute project as Text
	Attribute deviceId as Text //TODO jose change for id

Schema DeviceCrash
	Attribute ts as DateTime
	Attribute deviceId as Text //TODO jose change for id
	Attribute app as Text
	Attribute appVersion as Text
	Attribute stack as Text

Schema DeviceStatus
	Attribute ts as DateTime
	Attribute deviceId as Text //TODO jose change for id
	Attribute processes as Integer
	Attribute temperature as Real
	Attribute battery as Real
	Attribute cpuUsage as Real
	Attribute isPlugged as Bool
	Attribute isScreenOn as Bool
	Attribute screen as Text

Schema DeviceInfo
	Attribute id as Text
	Attribute consulVersion as Text
	Attribute androidVersion as Text

Schema DatalakeConnectionInfo
	Attribute url as Text
	Attribute name as Text
	Attribute password as Text

//Task scheduleServerLogging as CronTrigger(pattern = "0 0/2 * * * *", mean = "everyTwoMinutes") BootTrigger
//	timeZone = "Atlantic/Canary"

//Task scheduleSystemLogging as CronTrigger(pattern = "0 * * * * *", mean = "everyMinute")

//Task directoryChecker as DirectorySentinel(directory = "/sample/", events = OnModify OnCreate
//
//
//Service(title = "cesar", favicon = "/images/icon.png") cesarUi as UI(port = "9000")
//	Authentication(by = "{federationUrl}")
//	Resource("/") homePage as DisplayPage(cesarDesktop) Root Confidential
//	Resource("/error") errorPage as DisplayPage(errorDisplay)
//	Use("io.intino.amidas.box.PlatformUi", url = "")
//
//
//
//Client datalake as Ness(url = "{datalake}", user = "{user}", password = "{password}", domain = "", clientID = "cesar")
//	Mounter(InfrastructureOperation, "cesar")
//	Mounter(empty, "consul") serverStatus
//	Mounter(empty, "consul") serverLog
//	Mounter(empty, "consul") serverUpgrade
//
//	Mounter(empty, "consul") feederStatus
//	Mounter(empty, "consul") feederLog
//	Mounter(empty, "consul") feederUpgrade
//
//	Mounter(empty, "consul") deviceStatus
//	Mounter(empty, "consul") deviceBoot
//	Mounter(empty, "consul") deviceUpgrade
//	Mounter(empty, "consul") deviceCrash
//
//	Mounter(empty, "consul") systemLog
//	Mounter(empty, "consul") systemStatus
//
//Schema InfrastructureOperation
//	Attribute ts as DateTime
//	Attribute operation as Text
//	Attribute user as Text
//	Attribute objectType as Text
//	Attribute objectID as Text
//	Attribute parameters as Text List
//	Attribute words as Word(values = "a" "b" "c") List
//	Attribute palabra as Word(values = "d" "e" "f")
//
//Display cesarDesktop
//Display errorDisplay
//
//
//Panel(label = "Project") projectPanel
//	Views
//		View("dashboard") as MoldContainer(projectDashboard)
//
//Mold(modelClass = "java.lang.Object") projectDashboard
//
//Catalog("Devices", itemClass = "io.intino.cesar.graph.Device") deviceCatalog
//	Toolbar > TaskSelection("remove elements", polymerIcon = "icons:remove")
//	Events > OnClickItem > OpenPanel(projectPanel)
//	Views
//		View("List", mold = projectDashboard) list as ListContainer
//		View("Charts", display = "cesarOlap") cesarOlap as DisplayContainer
//	Content
//		Grouping(label = "by Status") statusCategorization
