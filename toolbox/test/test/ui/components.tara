dsl Konos

Service(title = "", favicon = "") UiElements as UI(port = "9000")
	Resource(path = "/") home as Page(homeTemplate)
	Resource(path = "/docs/data/:type") widgetType as Page(widgetTypeTemplate)

Template homeTemplate
	Header(color="white", format=air) as Absolute(height=100px)
		Block(layout=Horizontal Center, spacing=DP24)
			Image(value="images/intino.png") as Absolute(80px, 80px)
			Text(value="intino", format=h3, parameters = "")
			Block(layout=Horizontal Center, format=headerToolbar, spacing=DP24) links
				Text(value="home", parameters = "")


	Block(format=containerAirLarge) as Parallax("images/background1.jpg") Absolute(height=500px)
		Block(layout=Vertical Center) as Relative(width=70%)
			Text(value="software production lines made easy", format=h1 textCentered, parameters = "")
			Text(value="symplifying software mass customization", format=h2, parameters = "")
			Block(layout=Horizontal, parameters ="")


	Block(format=containerAirLarge)
		Block(layout=Vertical Center, spacing=DP40) as Relative(width=70%)
			Block > Text(value="Why intino?", format=h1 air, parameters = "")
			Block(layout=Horizontal CenterCenter, spacing=DP40) as Absolute(height=300px)
				Block as Paper Relative(width=28%)
					Text(value="flexibility", format=h5 cardTitle, parameters = "")
					Text(value="Extending benefits beyond software development into modifiability. With intino, software evolution is tailor-made, that is evolving systems built specifically for the needs of particular customer", format=h5 cardContent, parameters = "")

	Block(format=containerAirLarge) as Parallax("images/background2.jpg") Absolute(height=500px)
		Block(layout=Vertical Center, spacing=DP40) as Relative(width=70%)
			Block > Text(value="What does it look like?", format=h2 air white)
			Block(layout=Horizontal, parameters = "")
//				Link("demo") as Button
//				Link("get started") as Button

	Block(format=containerAirLarge) as Parallax("images/background3.jpg") Absolute(height=500px)
		Block
			Text(value="software production lines made easy", format=h1, parameters = "")
			Text(value="symplifying software mass customization", format=h2)
			Block(layout=Horizontal, parameters = "")
//				Link("demo") as Button
//				Link("get started") as Button

Template(layout=Vertical, modelClass="io.intino.alexandria.schemas.Widget") widgetMold as Decorated DynamicLoaded(loadTime=Slow)
	Text(value="Widget", format=h3, parameters = "") title
	Text(format=body1) highlightFacets as Multiple(arrangement=Horizontal) Highlighted("white","#679164")
	Text(format=body1 airBottom, parameters = "") description

	Block(layout=Vertical, spacing=DP24)
		Block examples
			Text(value="Examples", format=h5 underline, parameters = "") examplesTitle
			Block blockExamples as Conditional > Stamp(template=blockExamplesMold, parameters = "")


		Block facets
			Text(value="Facets", format=h5 underline, parameters = "")
			Text(parameters = "") facetsNames
		Block
			Text(value="Properties", format=h5 underline, parameters = "")
			Stamp(template=propertyMold) properties as Multiple(noItemsMessage="no properties")
		Block
			Text(value="Methods", format=h5 underline, parameters = "")
			Stamp(template=methodMold) methods as Multiple(noItemsMessage="no methods")
		Block
			Text(value="Events", format=h5 underline, parameters = "")
			Frame(display=eventsDisplay) events

Template(modelClass="io.intino.alexandria.schemas.Property", format=airBottom) propertyMold as Decorated
	Text(format=body2 facetsAbsolute, value="", mode=Uppercase) facets
	Block(layout=Horizontal StartJustified)
		Text(format=h6) name
		Text(format=h6, value=":&nbsp;&nbsp;")
		Text(format=h6 widgetType, mode = Lowercase) type
	Text(format=body2, value="") description
	Block(layout=Horizontal)
		Text(format=body2 valuesLabelFormat) valuesLabel
		Text(format=body2 widgetType, value=":&nbsp;&nbsp;") valuesSeparator
		Text(format=body2) values

Template(modelClass="io.intino.alexandria.schemas.Method", format=airBottom) methodMold as Decorated
	Text(format=body2 facetsAbsolute, value="", mode=Uppercase) facets
	Block(layout=Horizontal StartJustified)
		Text(format=h6) name
		Text(format=h6, value="(")
		Stamp(template=methodParamMold) params as Multiple
		Text(format=h6, value=")")
		Text(format=h6, value=":&nbsp;&nbsp;")
		Text(format=h6 widgetType, mode = Lowercase) returnType
	Text(format=body2, value="") description

Template(layout=Horizontal, modelClass="io.intino.alexandria.schemas.Parameter") methodParamMold as Decorated
	Text(format=h6) name
	Text(format=h6, value=":&nbsp;")
	Text(format=h6) type
	Text(format=h6) comma

Display eventsDisplay as Decorated
	Notification refresh as Object(Method) List

Schema Method

Template widgetTypeTemplate as Decorated
	Header(color="white", format=air) as Absolute(height=100px)
		Block(layout=Horizontal Center, spacing=DP24)
			Image(value="images/intino.png") as Absolute(80px, 80px)
			Text(value="intino", format=h3)
			Block(layout=Horizontal Center, format=headerToolbar, spacing=DP24) links
				Link(title="home") as OpenPage(page=UiElements.home)

	Block(format=containerAirLarge)
		Stamp(template=widgetMold) widget

Template(layout=Vertical, spacing=DP8) blockExamplesMold as Decorated

	Block(layout=Horizontal, spacing=DP24)
		Block as Relative(width=32%, height=100%)
			Text(format=h6, value="No facets")
			Block(spacing=DP8, format=filled)
				Block
					Text(value="value 1", format=body1 bordered)
					Text(value="value 2", format=body1 bordered)
					Text(value="value 3", format=body1 bordered)
			Block > Text block1Code as Code(language=Html)
					value
						=========
						Block<br/>
						&nbsp;&nbsp;&nbsp;&nbsp;Text(value\="value 1")
						&nbsp;&nbsp;&nbsp;&nbsp;Text(value\="value 2")
						&nbsp;&nbsp;&nbsp;&nbsp;Text(value\="value 3")
						=========

		Block as Relative(width=32%, height=100%)
			Text(format=h6, value="No facets with spacing")
			Block(spacing=DP8, format=filled)
				Block(layout=Vertical, spacing=DP8) block2
					Text(value="value 1", format=body1 bordered)
					Text(value="value 2", format=body1 bordered)
					Text(value="value 3", format=body1 bordered)
			Block > Text block2Code as Code(language=Html) Editable
					value
						=========
						DP8
						=========

		Block as Relative(width=32%, height=100%)
			Text(format=h6, value="No facets with layout")
			Block(spacing=DP8, format=filled)
				Block(layout=Horizontal CenterCenter, spacing=DP8) block3 as Absolute(height=175px)
					Text(value="value 1", format=body1 bordered)
					Text(value="value 2", format=body1 bordered)
					Text(value="value 3", format=body1 bordered)
			Block > Text block3Code as Code(language=Html) Editable
					value
						=========
						Horizontal CenterCenter
						=========

	Block(layout=Horizontal, spacing=DP24)
		Block as Relative(width=32%, height=100%)
			Text(format=h6, value="Badge facet")
			Block(spacing=DP8, format=filled)
				Block(layout=Horizontal) as Badge(value=10)
					Text(value="value", format=body1)
			Block > Text block4Code as Code(language=Html)
					value
						=========
						Block as Badge(value\=10)<br/>
						&nbsp;&nbsp;&nbsp;&nbsp;Text(value\="value")
						=========
		Block as Relative(width=64%, height=100%)
			Text(format=h6, value="Parallax facet")
			Block(spacing=DP8, format=filled)
				Block as Parallax(background="images/background1.jpg") Absolute(height=175px)
					Text(value="value", format=body1)
			Block > Text block5Code as Code(language=Html)
					value
						=========
						Block as Parallax(value\="images/background1.jpg") Absolute(height\=175px)<br/>
						&nbsp;&nbsp;&nbsp;&nbsp;Text(value\="value")
						=========

Format("color:'#B71C1C',textShadow:'2px 2px 2px #fff'") h1
Format("color:'black',textShadow:'2px 2px 2px #fff'") h2
Format("") h3
Format("") h4
Format("") h5
Format("lineHeight:'17pt'") h6
Format("") body1
Format("") body2
Format("color:'white'") white
Format("background:'white',borderRadius:'3px',height:'100%'") whiteBackground
Format("padding:'10px 20px'") air
Format("marginBottom:'10px'") airBottom
Format("padding:'10px'") containerAirMedium
Format("padding:'20px'") containerAirLarge
Format("background:'#efefef',padding:'8px',minHeight:'200px'") filled
Format("background:'#efefef',minHeight:'200px'") filledNoAir
Format("marginTop:'10px'") headerToolbar
Format("textAlign:'center'") textCentered
Format("color:'#888',fontSize:'10px',marginTop:'-10px',position:'absolute'") facetsAbsolute
Format("whiteSpace:'nowrap'") valuesLabelFormat
Format("border:'1px solid',width:'100%'") bordered
Format("minHeight:'300px'") paperFormat
Format("borderBottom:'1px dotted #ddd',width:'100%',marginBottom:'10px'") underline
Format("fontSize:'10pt',color:'grey'") description

// Cards
Format("textAlign:'left',color:'#B71A1C',padding:'10px'") cardTitle
Format("textAlign:'left',padding:'10px'") cardContent

// Widgets
Format("color:'#888'") widgetType
Format("margin:'0 0 5px 0'") widgetDemo


Component(parameters = "") catalog as Decorated

Component collection as Decorated
	Notification setup as Object(CollectionSetup)
	Notification refresh
	Notification refreshItemCount as LongInteger
	Request notifyItemsRendered as Object(CollectionItemsRenderedInfo)
	Request loadMoreItems as Object(CollectionMoreItems)
	Request changePage as Integer
	Request changePageSize as Integer
	Request changeSelection as Text List

Component list as Decorated ExtensionOf(collection)
Component table as Decorated ExtensionOf(collection)
Component magazine as Decorated ExtensionOf(collection)
Component map as Decorated ExtensionOf(collection)

Component item as Decorated
Component heading as Decorated
Component row as Decorated

Schema CollectionSetup
	Attribute itemCount as LongInteger
	Attribute pageSize as Integer

Schema CollectionItemsRenderedInfo
	Attribute items as Text List
	Attribute visible as Text List

Schema CollectionMoreItems
	Attribute start as Integer
	Attribute stop as Integer

Component baseGrouping as Decorated
	Notification refreshGroups as Object(Group) List
	Request select as Text List

Component grouping as Decorated ExtensionOf(baseGrouping)
Component groupingComboBox as Decorated ExtensionOf(baseGrouping)

Component sorting as Decorated
Component searchBox as Decorated

Schema Group
	Attribute label as Text
	Attribute count as Integer