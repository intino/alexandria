package io.intino.konos.builder.codegeneration.accessor.ui.widget;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class WidgetTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("accessible","widget"))).output(literal("<link rel=\"import\" href=\"../../lib/polymer/polymer.html\">\n<link rel=\"import\" href=\"../../lib/cotton-push/cotton-push-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-carrier/cotton-carrier-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-zombie/cotton-zombie.html\">\n<link rel=\"import\" href=\"")).output(mark("name", "camelCaseToSnakeCase")).output(literal(".html\">\n\n<script src=\"")).output(mark("name", "lowerCase")).output(literal("proxy/requester.js\"></script>\n<script src=\"")).output(mark("name", "lowerCase")).output(literal("proxy/notifier-listener.js\"></script>\n\n<dom-module id=\"")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-proxy\">\n\n    <template>\n        <div id=\"component\" base-url$=\"[[_proxyBaseUrl]]\"><cotton-zombie id=\"zombie\" display=\"")).output(mark("name")).output(literal("\" widget=\"")).output(mark("name")).output(literal("\"></cotton-zombie></div>\n        <div class=\"layout horizontal center center-justified\" style=\"height:100%;\" hidden><div id=\"error\" class=\"error\">[[_error]]</div></div>\n    </template>\n\n    <style>\n        :host #component {\n            height: 100%;\n        }\n        :host .error {\n            display: none;\n            color: var(--accent-color);\n            font-size: 12pt;\n        }\n    </style>\n\n    <script>\n\n        Polymer({\n            is: '")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-proxy',\n\n            behaviors: [ CottonBehaviors.CarrierBehavior,\n                CottonBehaviors.PushBehavior,\n                ")).output(mark("name", "firstuppercase")).output(literal("ProxyBehaviors.Requester,\n                ")).output(mark("name", "firstuppercase")).output(literal("ProxyBehaviors.NotifierListener\n            ],\n\n            properties : {\n            \t_proxyBaseUrl: String\n            },\n\n            attached : function() {\n                this.listenToDisplay();\n                this.$.zombie.whenPersonified().execute((widget) => this.registerPersonifiedDisplay(widget.display.id));\n            },\n\n            _refreshBaseUrl : function(url) {\n            \tthis._proxyBaseUrl = url;\n            },\n\n            _refreshError : function(msg) {\n                this.$.component.style.display = \"none\";\n                this.$.error.style.display = \"block\";\n                this.$.error.innerHTML = msg;\n            }\n\n        });\n    </script>\n</dom-module>")),
			rule().condition((type("widget"))).output(literal("<link rel=\"import\" href=\"../../lib/polymer/polymer.html\">\n<link rel=\"import\" href=\"../../lib/cotton-push/cotton-push-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-carrier/cotton-carrier-behavior.html\">\n<link rel=\"import\" href=\"../../lib/cotton-zombie/cotton-zombie.html\">\n<link rel=\"import\" href=\"../../lib/cotton-translator/cotton-translator-behavior.html\">\n")).output(expression().output(literal("<link rel=\"import\" href=\"../../lib/alexandria-ui-elements/alexandria-")).output(mark("type", "camelCaseToSnakeCase")).output(literal(".html\">"))).output(literal("\n\n")).output(expression().output(mark("parent", "import"))).output(literal("\n")).output(expression().output(mark("imports"))).output(literal("\n")).output(expression().output(mark("routes", "routesImport"))).output(literal("\n<script src=\"")).output(mark("name", "lowercase")).output(literal("/requester.js\"></script>\n<script src=\"")).output(mark("name", "lowercase")).output(literal("/notifier-listener.js\"></script>\n\n<dom-module id=\"")).output(mark("name", "camelCaseToSnakeCase")).output(literal("\">\n\n    <template>\n    \t")).output(mark("routes")).output(literal("\n    \t")).output(mark("parent")).output(literal("\n        ")).output(mark("innerDisplay").multiple("\n")).output(literal("\n        ")).output(mark("attached")).output(literal("\n        ")).output(mark("prototype")).output(literal("\n    </template>\n\n    <style>\n    </style>\n\n    <script>\n\n        const ")).output(mark("name", "firstuppercase")).output(literal("Dictionary = {\n            es: {\n            },\n            en: {\n            }\n        };\n\n        Polymer({\n            is: '")).output(mark("name", "camelCaseToSnakeCase")).output(literal("',\n\n            behaviors: [ CottonBehaviors.CarrierBehavior,\n                         CottonBehaviors.PushBehavior,\n                         CottonBehaviors.TranslatorBehavior,\n\t\t\t\t\t\t ")).output(mark("name", "firstuppercase")).output(literal("Behaviors.Requester,\n\t\t\t\t\t\t ")).output(mark("name", "firstuppercase")).output(literal("Behaviors.NotifierListener\n                         ],\n\n            properties : {\n            },\n\t\t\t")).output(mark("attached", "js")).output(literal("\n\t\t\t")).output(mark("prototype", "js")).output(literal("\n\n        });\n    </script>\n</dom-module>")),
			rule().condition((trigger("routesimport"))).output(literal("<link rel=\"import\" href=\"")).output(mark("name", "lowercase")).output(literal("/")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-routes.html\">")),
			rule().condition((trigger("routes"))).output(literal("<")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-routes></")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-routes>")),
			rule().condition((trigger("imports"))).output(literal("<script src=\"../../lib/alexandria-ui-elements/alexandria")).output(mark("type", "snakecaseToCamelCase", "lowercase")).output(literal("/requester.js\"></script>\n<script src=\"../../lib/alexandria-ui-elements/alexandria")).output(mark("type", "snakecaseToCamelCase", "lowercase")).output(literal("/notifier-listener.js\"></script>")),
			rule().condition((trigger("attached")), (trigger("js"))).output(literal("attached : function() {\n\tthis.translate(")).output(mark("widget", "firstuppercase")).output(literal("Dictionary);\n\tthis.listenToDisplay();\n}")),
			rule().condition((type("attached"))),
			rule().condition((type("prototype")), (trigger("js"))).output(literal("attached : function() {\n\tthis.translate(")).output(mark("widget", "firstuppercase")).output(literal("Dictionary);\n\tthis._linkWithAlexandriaElement();\n\tthis.listenToDisplay();\n},\n\n_linkWithAlexandriaElement : function() {\n\tvar element = this.querySelector(\"alexandria-")).output(mark("type", "camelCaseToSnakeCase")).output(literal("\");\n\telement.display = this.display;\n\telement.behaviors.push(Alexandria")).output(mark("type", "snakeCaseToCamelCase", "firstuppercase")).output(literal("Behaviors.Requester);\n\telement.behaviors.push(Alexandria")).output(mark("type", "snakeCaseToCamelCase", "firstuppercase")).output(literal("Behaviors.NotifierListener);\n\telement.behaviors.push(")).output(mark("widget", "firstuppercase")).output(literal("Behaviors.NotifierListener);\n\tfor (var i in ")).output(mark("widget", "firstuppercase")).output(literal("Behaviors.Requester) element[i] = ")).output(mark("widget", "firstuppercase")).output(literal("Behaviors.Requester[i];\n\telement.listenToDisplay();\n}")),
			rule().condition((type("prototype"))).output(literal("<alexandria-")).output(mark("type", "camelCaseToSnakeCase")).output(literal("></alexandria-")).output(mark("type", "camelCaseToSnakeCase")).output(literal(">")),
			rule().condition((trigger("import"))).output(literal("<link rel=\"import\" href=\"../../lib/")).output(mark("dsl", "lowercase")).output(literal("/")).output(mark("value", "lowercase")).output(literal(".html\">")),
			rule().condition((trigger("innerdisplay"))).output(literal("<div><cotton-zombie display=\"")).output(mark("")).output(literal("\" widget=\"")).output(mark("")).output(literal("\"></cotton-zombie></div>")),
			rule().condition((trigger("parent"))).output(literal("<div><cotton-zombie display=\"")).output(mark("")).output(literal("\" widget=\"")).output(mark("")).output(literal("\"></cotton-zombie></div>"))
		);
	}
}