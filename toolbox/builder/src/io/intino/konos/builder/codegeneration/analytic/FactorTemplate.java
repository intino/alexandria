package io.intino.konos.builder.codegeneration.analytic;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class FactorTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("interface"))).output(literal("package ")).output(mark("package")).output(literal(".analytic;\n\nimport java.util.Collection;\n\npublic interface Axis {\n\tString label();\n\n\tdefault boolean isDynamic() {\n\t\treturn false;\n\t};\n\n\tComponent byIndex(int index);\n\n\tint componentCount();\n\n\tCollection<? extends Component> components();\n\n\tinterface Component {\n\t\tint index();\n\n\t\tString id();\n\n\t\tString label();\n\n\t\tAxis axis();\n\t}\n}")),
			rule().condition((type("factor")), (trigger("getter"))).output(literal("public Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component ")).output(mark("name", "FirstLowerCase")).output(literal("() {\n\treturn ")).output(mark("name", "FirstLowerCase")).output(literal(";\n}")),
			rule().condition((type("factor")), (trigger("getterinstance"))).output(literal("@Override\nprotected ")).output(mark("name", "firstUpperCase")).output(literal(".Component ")).output(mark("name", "firstLowerCase")).output(literal("Of(String[] record) {\n\treturn ")).output(mark("name", "firstUpperCase")).output(literal(".instance().byName(record[")).output(mark("index")).output(literal("]);\n}")),
			rule().condition((type("factor")), (trigger("getterabstract"))).output(literal("protected abstract Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component ")).output(mark("name", "firstLowerCase")).output(literal("Of(String[] record);")),
			rule().condition((type("factor")), (trigger("field"))).output(literal("private Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component ")).output(mark("name", "firstLowerCase")).output(literal(";")),
			rule().condition((type("factor")), (trigger("assign"))).output(mark("name", "firstLowerCase")).output(literal(" = ")).output(mark("name", "firstLowerCase")).output(literal("Of(record);")),
			rule().condition((allTypes("factor","abstract"))).output(literal("package ")).output(mark("package")).output(literal(".analytic.factors;\n\nimport ")).output(mark("package")).output(literal(".analytic.Axis;\n\nimport java.util.*;\nimport java.util.function.Predicate;\nimport java.util.stream.Collectors;\n\npublic abstract class Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" implements Axis {\n\tprotected final Map<Integer, Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component> componentsByIndex = new HashMap<>();\n\tprotected final Map<String, Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component> componentsByName = new HashMap<>();\n\n\t@Override\n\tpublic String label() {\n\t\treturn \"")).output(mark("label")).output(literal("\";\n\t}\n\n\t")).output(expression().output(literal("@Override")).output(literal("\n")).output(literal("public boolean isDynamic() {")).output(literal("\n")).output(literal("\treturn true")).output(mark("dynamic")).output(literal("\n")).output(literal("}"))).output(literal("\n\n\t@Override\n\tpublic Collection<? extends Axis.Component> components() {\n\t\treturn componentsByIndex.values();\n\t}\n\n\tpublic Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component byName(String name) {\n\t\treturn componentsByName.get(name);\n\t}\n\n\tpublic Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component byIndex(int index) {\n\t\treturn componentsByIndex.get(index);\n\t}\n\n\tpublic java.util.stream.Stream<Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component> filter(Predicate<Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".Component> predicate) {\n\t\treturn  componentsByIndex.values().stream().filter(predicate);\n\t}\n\n\t@Override\n\tpublic int componentCount() {\n\t\treturn 0;\n\t}\n\n\tpublic class Component implements Axis.Component {\n\t\tprivate final int index;\n\t\tprivate String id;\n\t\tprivate String label;\n\t\t")).output(mark("factor", "field").multiple("\n\n")).output(literal("\n\t\tpublic Component(String[] record) {\n\t\t\tindex = indexOf(record);\n\t\t\tid = idOf(record);\n\t\t\tlabel = labelOf(record);\n\t\t\t")).output(mark("factor", "assign").multiple("\n\n")).output(literal("\n\t\t}\n\n\t\t@Override\n\t\tpublic int index() {\n\t\t\treturn index;\n\t\t}\n\n\t\t@Override\n\t\tpublic String id() {\n\t\t\treturn id;\n\t\t}\n\n\t\t@Override\n\t\tpublic String label() {\n\t\t\treturn label;\n\t\t}\n\n\t\t@Override\n\t\tpublic Axis axis() {\n\t\t\treturn Abstract")).output(mark("name", "FirstUpperCase")).output(literal(".this;\n\t\t}\n\n\t\t")).output(expression().output(mark("factor", "getter").multiple("\n\n"))).output(literal("\n\t}\n\n\tprotected abstract int indexOf(String[] record);\n\tprotected abstract String idOf(String[] record);\n\tprotected abstract String labelOf(String[] record);\n\t")).output(expression().output(mark("factor", "getterAbstract").multiple("\n\n"))).output(literal("\n}")),
			rule().condition((type("factor"))).output(literal("package ")).output(mark("package")).output(literal(".analytic.factors;\n\npublic class ")).output(mark("name", "FirstUpperCase")).output(literal(" extends Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" {\n\tprivate static ")).output(mark("name", "FirstUpperCase")).output(literal(" instance;\n\n\tpublic static synchronized ")).output(mark("name", "FirstUpperCase")).output(literal(" instance() {\n\t\treturn instance = instance != null ? instance : new ")).output(mark("name", "FirstUpperCase")).output(literal("().load(\"")).output(mark("resourceId")).output(literal("\");\n\t}\n\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal(" load(String resourceId) {\n\t\t// TODO\n\t\treturn this;\n\t}\n\n\t@Override\n\tprotected int indexOf(String[] record) {\n\t\treturn Integer.parseInt(record[0]);\n\t}\n\n\t@Override\n\tprotected String idOf(String[] record) {\n\t\treturn record[1];\n\t}\n\n\t@Override\n\tprotected String labelOf(String[] record) {\n\t\treturn record[2];\n\t}\n\n\t")).output(expression().output(mark("factor", "getterInstance").multiple("\n\n"))).output(literal("\n}"))
		);
	}
}