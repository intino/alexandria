package io.intino.konos.builder.codegeneration.services.ui.display.panel;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractPanelSkeletonTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("desktop"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.Base64;\nimport io.intino.alexandria.ui.displays.AlexandriaDesktop;\nimport io.intino.alexandria.ui.displays.AlexandriaElementDisplay;\nimport io.intino.alexandria.ui.model.Element;\nimport io.intino.alexandria.ui.model.panel.Desktop;\nimport io.intino.alexandria.ui.model.View;\nimport io.intino.alexandria.ui.utils.IOUtils;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\n\nimport java.net.MalformedURLException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic abstract class Abstract")).output(mark("name", "firstUpperCase")).output(literal(" extends AlexandriaDesktop<")).output(mark("name", "firstUpperCase")).output(literal("Notifier> {\n\n\tpublic Abstract")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tsuper(box);\n\t\telement(buildDesktop(box));\n\t}\n\n\tprivate static Desktop buildDesktop(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tDesktop desktop = new Desktop();\n\t\tdesktop.elementDisplayBuilder(new Desktop.ElementDisplayBuilder() {\n\t\t\t@Override\n\t\t\tpublic AlexandriaElementDisplay displayFor(Element element, Object o) {\n\t\t\t\treturn get(element, o);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic Class<? extends AlexandriaElementDisplay> displayTypeFor(Element element, Object o) {\n\t\t\t\treturn get(element, o).getClass();\n\t\t\t}\n\n\t\t\tprivate AlexandriaElementDisplay get(Element element, Object o) {\n\t\t\t\treturn Displays.displayFor(box, element);\n\t\t\t}\n\t\t});\n\t\t")).output(expression().output(literal("desktop.title(\"")).output(mark("title")).output(literal("\");"))).output(literal("\n\t\t")).output(expression().output(literal("desktop.subtitle(\"")).output(mark("subtitle")).output(literal("\");"))).output(literal("\n\t\t")).output(expression().output(literal("desktop.authServiceUrl(")).output(mark("authentication")).output(literal(");"))).output(literal("\n\t\t")).output(expression().output(literal("desktop.logo(toBase64(Abstract")).output(mark("name", "firstUpperCase")).output(literal(".class.getResourceAsStream(\"")).output(mark("logo")).output(literal("\")));"))).output(literal("\n\t\t")).output(expression().output(literal("desktop.favicon(toBase64(Abstract")).output(mark("name", "firstUpperCase")).output(literal(".class.getResourceAsStream(\"")).output(mark("favicon")).output(literal("\")));"))).output(literal("\n\t\t")).output(expression().output(literal("desktop.layout(Desktop.Layout.")).output(mark("layout")).output(literal(");"))).output(literal("\n\t\t")).output(expression().output(mark("toolbar", "empty")).output(literal("desktop.toolbar(buildToolbar(box));"))).output(literal("\n\t\tbuildViews(box).forEach(desktop::add);\n\t\treturn desktop;\n\t}\n\n\t")).output(expression().output(mark("toolbar"))).output(literal("\n\n\tprivate static List<View> buildViews(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tList<View> result = new ArrayList<>();\n\t\t")).output(mark("view", "add").multiple("\n")).output(literal("\n\t\treturn result;\n\t}\n\n\tprivate static String toBase64(java.io.InputStream resource) {\n\t\ttry {\n\t\t\tif (resource == null) return \"\";\n\t\t\treturn \"data:image/png;base64,\" + Base64.encode(toByteArray(resource));\n\t\t} catch (java.io.IOException e) {\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprivate static java.net.URL url(String url) {\n\t\ttry {\n\t\treturn new java.net.URL(url);\n\t\t} catch (java.net.MalformedURLException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprivate static byte[] toByteArray(java.io.InputStream input) throws java.io.IOException {\n\t\tjava.io.ByteArrayOutputStream output = new java.io.ByteArrayOutputStream();\n\t\tIOUtils.copy(input, output);\n\t\treturn output.toByteArray();\n\t}\n}")),
				rule().condition((type("custom")), (trigger("authentication"))).output(literal("url(box.configuration().get(\"")).output(mark("value", "customParameter")).output(literal("\"))")),
				rule().condition((trigger("authentication"))).output(literal("url(\"")).output(mark("")).output(literal("\")")),
				rule().condition((type("panel"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.ui.displays.AlexandriaDisplay;\nimport io.intino.alexandria.ui.displays.AlexandriaPanel;\nimport io.intino.alexandria.ui.displays.CatalogInstantBlock;\nimport io.intino.alexandria.ui.model.View;\nimport io.intino.alexandria.ui.model.Panel;\nimport io.intino.alexandria.ui.model.Toolbar;\nimport io.intino.alexandria.ui.model.View;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.Consumer;\n\npublic abstract class Abstract")).output(mark("name", "firstUpperCase")).output(literal(" extends AlexandriaPanel<")).output(mark("name", "firstUpperCase")).output(literal("Notifier> {\n\n\tpublic Abstract")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tsuper(box);\n\t\telement(buildPanel(box));\n\t}\n\n\tprivate static Panel buildPanel(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tPanel panel = new Panel();\n\t\t")).output(expression().output(literal("panel.name(\"")).output(mark("name")).output(literal("\");"))).output(literal("\n\t\t")).output(expression().output(literal("panel.label(\"")).output(mark("label")).output(literal("\");"))).output(literal("\n\t\t")).output(expression().output(mark("toolbar", "empty")).output(literal("panel.toolbar(buildToolbar(box));"))).output(literal("\n\t\tbuildViews(box).forEach(v -> panel.add(v));\n\t\treturn panel;\n\t}\n\n\t")).output(expression().output(mark("toolbar"))).output(literal("\n\n\tprivate static List<View> buildViews(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tList<View> result = new ArrayList<>();\n\t\t")).output(mark("view", "add").multiple("\n")).output(literal("\n\t\treturn result;\n\t}\n\n}")),
				rule().condition((type("toolbar")), (trigger("empty"))),
				rule().condition((trigger("add"))).output(literal("result.add(")).output(mark("value")).output(literal(");")),
				rule().condition((type("toolbar"))).output(literal("private static Toolbar buildToolbar(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\tToolbar result = new Toolbar();\n\tresult.canSearch(")).output(mark("canSearch")).output(literal(");\n\t")).output(mark("operation", "add").multiple("\n")).output(literal("\n\treturn result;\n}"))
		);
	}
}