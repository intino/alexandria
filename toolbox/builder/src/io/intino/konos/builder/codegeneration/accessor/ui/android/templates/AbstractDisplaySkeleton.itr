def type(display & accessible)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	[import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";]
	[$displayRegistration+import]
	import $name+SnakeCaseToCamelCase+FirstUpperCase from './$name+SnakeCaseToCamelCase+FirstUpperCase';

	export default class $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
		};

	}

	[$displayRegistration+declaration]
end

def type(display & res & noAbstract)
    <?xml version="1.0" encoding="utf-8"?>
    <com.google.android.flexbox.FlexboxLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:alexandria="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        alexandria:flexDirection="$layout">

        <ScrollView android:layout_width="match_parent"
		    android:layout_height="match_parent"
		    android:fillViewport="true">

            <com.google.android.flexbox.FlexboxLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                alexandria:flexDirection="$layout">
                [$component...[$NL]]
    		</com.google.android.flexbox.FlexboxLayout>
	    </ScrollView>

    </com.google.android.flexbox.FlexboxLayout>
end

def type(layout & horizontal)
    row
end

def type(layout & vertical)
    column
end

def type(display & res)
    <?xml version="1.0" encoding="utf-8"?>
    <com.google.android.flexbox.FlexboxLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:alexandria="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        alexandria:flexDirection="$layout">

        <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="I am $name"
            />

        [$component...[$NL]]

    </com.google.android.flexbox.FlexboxLayout>
end

def type(display & noAbstract)
    package $package.mobile.android.displays[.$packageType~s]

    import android.content.Context
    import android.util.AttributeSet
    import androidx.core.content.ContextCompat.*

	[$parent+import]
	$accessibleNotifierImport
	import io.intino.alexandria.mobile.displays.requesters.$requester~Requester
	import $package.mobile.android.R

	class $name+firstUpperCase @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0) : $displayExtends<$requester~Requester, $notifier~Notifier>(context, attrs, defStyleAttr, defStyleRes, R.layout.$name+camelCaseToUnderscoreCase+lowerCase) {

		init {
			this.notifier = $notifier~Notifier(this);
			this.requester = $requester~Requester(this);
			[$properties+initialization]
		}

		$notification...[$NL$NL]
		[$notifyProxyMethod]
	}
end

def type(accessibleNotifierImport & accessible)
	import $package.mobile.displays.notifiers.$name+firstUpperCase~Notifier
end

def type(accessibleNotifierImport)
	import io.intino.alexandria.mobile.displays.notifiers.$notifier~Notifier
end

def type(notifyProxyMethod)
	notifyProxyMessage = (name) => {
		if (!this.props.onProxyMessage) return;
		this.props.onProxyMessage(name);
	};
end

def type(display & collection)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	[import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";]
	[$displayRegistration+import]

	export default class $name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
		};

	}

	[$displayRegistration+declaration]
end

def type(display)
    package $package.mobile.android.displays[.$packageType~s]

    import android.content.Context
    import android.util.AttributeSet
    import androidx.core.content.ContextCompat.*

	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
    import $package.mobile.displays.notifiers.$notDecorated+firstUpperCase~Notifier
    import $package.mobile.displays.requesters.$notDecorated+firstUpperCase~Requester
	[$displayRegistration+import]
    $schemaImport
    import $package.mobile.android.R

    open class $name+firstUpperCase<DR: $notDecorated+firstUpperCase~Requester, DN: $notDecorated+firstUpperCase~Notifier> @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) $displayExtends+display, $package.mobile.displays[.$packageType~s].$name+firstUpperCase {

        init {
            this.requester = $notDecorated+firstUpperCase~Requester(this) as DR
            this.notifier = $notDecorated+firstUpperCase~Notifier(this) as DN
            inflate(viewContext(), layout ?: R.layout.$name+camelCaseToUnderscoreCase+lowerCase, this)
        }

		$notification...[$NL$NL]
        [$reference...[$NL]]
        [$component...[$NL]]

    }
end

def type(notification) trigger(interface)
    fun $name([value : $parameter])
end

def type(notification)
    override fun $name([value: $parameter]) {
    }
end

def trigger(parameterValue)
	value
end

def type(date) trigger(parameter)
    kotlinx.datetime.Instant
end

def type(datetime) trigger(parameter)
    kotlinx.datetime.Instant
end

def type(integer) trigger(parameter)
    Int
end

def trigger(parameter)
    $value
end

def type(displayRegistration) trigger(import)
	import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';
end

def type(displayRegistration & accessible) trigger(declaration)
	DisplayFactory.register("$name+SnakeCaseToCamelCase+FirstUpperCase~Proxy", $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy);
end

def type(displayRegistration) trigger(declaration)
	DisplayFactory.register("$name+firstUpperCase", $name+firstUpperCase);
end

def type(alexandriaImport)
	import Ui$name+firstUpperCase from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";
end

def type(alexandriaImport & embedded)
	import { Embedded$name+firstUpperCase as Ui$name+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";
end

def type(alexandriaComponentImport)
	import Ui$type+firstUpperCase$facet...[] from "alexandria-ui-elements/[$componentTarget]/displays/[$componentDirectory/]$type+firstUpperCase$facet...[]";
end

def type(projectComponentImport & ownertemplatestamp)
	import Displays$name+firstUpperCase from "$ownerModuleName/gen/displays/templates/$name+firstUpperCase";
end

def type(projectComponentImport)
	import Displays$name+firstUpperCase from "$serviceName/[$directory]/displays/[$componentDirectory/]$name+firstUpperCase";
end

def type(displayExtends & generic & isExtensionOf) trigger(display)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & generic) trigger(display)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))
end

def type(displayExtends & template) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Template<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & table) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & dynamictable) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & collection) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & item) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Item<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & row) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Row<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends & dialog) trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Dialog<DR, DN>(context, attrs, defStyleAttr, defStyleRes)
end

def type(displayExtends) trigger(display)
	: io.intino.alexandria.mobile.android.displays.$type+firstUpperCase<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))
end

def type(displayExtends & generic & isExtensionOf)
	$parent
end

def type(displayExtends & generic)
	$parent
end

def type(displayExtends)
	$type+firstUpperCase
end

def type(renderTag & template) trigger(end)
	</UiBlock>
end

def type(renderTag & block) trigger(end)
	</UiBlock>
end

def type(renderTag & item) trigger(end)
	</div>
end

def type(renderTag) trigger(end)
	</React.Fragment>
end

def type(renderTag & template)
	<UiBlock[$properties+common$properties+specific] style={{...this.props.style,...display}}>
end

def type(renderTag & block)
	<UiBlock[$properties+common$properties+specific] style={{...this.props.style,...display}}>
end

def type(renderTag & item)
	<div style={{width:"100%",height:"100%",...this.props.style,...this.style(),...display}} className={className}>
end

def type(renderTag)
	<React.Fragment>
end

def type(renderTagAttributes & block)
	$properties+common$properties+specific
end

def type(renderTagAttributes)
end

def attribute(parent) trigger(import)
    import $package.mobile.android.displays.$parentDirectory.$parent+firstUpperCase
end

def attribute(accessible) trigger(import)
    import io.intino.alexandria.mobile.android.displays.ProxyDisplay
end

def attribute(baseDisplay) trigger(import)
    import io.intino.alexandria.mobile.android.displays.Display
end

def attribute(baseComponent) trigger(import)
    import io.intino.alexandria.mobile.android.displays.Component
end

def attribute(embeddedComponent) trigger(import)
    import io.intino.alexandria.mobile.android.displays.components.$value+firstUpperCase
end

def attribute(component) trigger(import)
    import io.intino.alexandria.mobile.android.displays.components.$value+firstUpperCase
end

def trigger(import)
    import io.intino.alexandria.mobile.android.displays.$value+firstUpperCase
end

def type(schemaImport)
	import $package.mobile.schemas.*;
end
