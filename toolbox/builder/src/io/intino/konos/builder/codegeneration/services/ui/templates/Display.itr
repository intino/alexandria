def type(display)
	package $package.ui.displays[.$packageType~s];

	import io.intino.alexandria.exceptions.*;
	import $package.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.ui.displays[.$packageType~s].Abstract$name+firstUpperCase;
	[$accessibleNotifier+import]

	public class $name+firstUpperCase extends Abstract$name+firstUpperCase<[$accessibleNotifier, ]$box+firstUpperCase~Box> {

		public $name+firstUpperCase($box+firstUpperCase~Box box) {
			super(box);
		}

		[$request...[$NL$NL]]
		[$parameter+setter...[$NL$NL]]
	}
end

def type(accessibleNotifier) trigger(import)
	import $package+validPackage.ui.displays.notifiers.$name+firstUpperCase~Notifier;
end

def type(accessibleNotifier)
	$name+firstUpperCase~Notifier
end

def type(templatesImport)
	import $package+validPackage.ui.displays.templates.*;
end

def type(blocksImport)
	import $package+validPackage.ui.displays.blocks.*;
end

def type(itemsImport)
	import $package+validPackage.ui.displays.items.*;
end

def type(request & asset)
	public io.intino.alexandria.ui.spark.UIFile $name([$parameter value]) {
		return null;
	}
end

def type(request)
	public void $name([$parameter value]) {

	}
end

def trigger(setter)
	public void $value+firstLowerCase(String value) {

	}
end

def type(dateTime | date) type(list) trigger(parameter)
	$value
end

def type(dateTime | date) trigger(parameter)
	$value
end

def type(list) trigger(parameter)
	$value$[]
end

def trigger(parameter)
	$value
end

def type(schemaImport)
	import $package.schemas.*;
end

def trigger(import)
	import $package.ui.displays.*;
end