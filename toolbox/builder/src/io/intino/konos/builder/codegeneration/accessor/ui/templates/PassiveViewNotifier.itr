def type(display)
	$import

	export default class $name+firstUpperCase~$proxy~Notifier extends $parentType {
		constructor(element) {
			super(element);
			this.setup();
		};

		setup() {
			if (this.element == null || this.pushLinked) return;
			super.setup();
			[$notification...[$NL]]
			this.pushLinked = true;
		};
	}
end

def attribute(extensionOf) trigger(import)
	import $parent+firstUpperCase~Notifier from "./$parent+firstUpperCase~Notifier"
end

def attribute(component) trigger(import)
	import Notifier from "alexandria-ui-elements/src/displays/notifiers/ComponentNotifier";
end

def attribute(accessible) trigger(import)
	import Notifier from "alexandria-ui-elements/gen/displays/notifiers/ProxyDisplayNotifier";
end

def attribute(baseType) trigger(import)
	import Notifier from "alexandria-ui-elements/gen/displays/notifiers/$type+firstUpperCase~Notifier";
end

def trigger(import)
	import Notifier from "./Notifier";
end

def attribute(accessible) trigger(proxy)
	Proxy
end

def trigger(proxy)
end

def attribute(extensionOf) trigger(parentType)
	$parent+firstUpperCase~Notifier
end

def trigger(parentType)
	Notifier
end

def trigger(notification)
	this.when("$name")[$target].execute(([$parameter+call]) => this.element.$name([$parameter+value]));
end

def type(parameter) trigger(call)
	parameters
end

def type(parameter) trigger(value)
	parameters.v
end

def attribute(this:Display) trigger(target)
	.toSelf()
end

def trigger(target)
end