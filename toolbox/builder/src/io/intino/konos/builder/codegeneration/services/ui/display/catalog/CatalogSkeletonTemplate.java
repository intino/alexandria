package io.intino.konos.builder.codegeneration.services.ui.display.catalog;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class CatalogSkeletonTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("catalog"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.ui.Resource;\nimport io.intino.alexandria.ui.displays.AlexandriaDisplay;\nimport io.intino.alexandria.ui.displays.CatalogInstantBlock;\nimport io.intino.alexandria.ui.model.Catalog;\nimport io.intino.alexandria.ui.model.Element;\nimport io.intino.alexandria.ui.model.catalog.Scope;\nimport io.intino.alexandria.ui.model.catalog.arrangement.Group;\nimport io.intino.alexandria.ui.model.toolbar.TaskSelection;\nimport io.intino.alexandria.ui.services.push.UISession;\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.InputStream;\nimport java.time.Instant;\nimport java.util.List;\nimport java.util.function.Consumer;\n\nimport static java.util.Collections.emptyList;\nimport static java.util.stream.Collectors.toList;\n\npublic class ")).output(mark("name", "FirstUpperCase")).output(literal(" extends Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" {\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tsuper(box);\n\t}\n\n\t")).output(expression().output(mark("range"))).output(literal("\n\n\t")).output(expression().output(mark("temporalFilter"))).output(literal("\n\n\t")).output(expression().output(mark("toolbar"))).output(literal("\n\n\tpublic static class Source {\n\t\tpublic static java.util.List<")).output(mark("type")).output(literal("> ")).output(mark("type", "shortType", "firstLowerCase")).output(literal("List(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.catalog.Scope scope, String condition")).output(expression().output(literal(", ")).output(mark("mode", "timerange")).output(literal(" range"))).output(literal(", UISession session) {\n\t\t\treturn java.util.Collections.emptyList();//TODO\n\t\t}\n\n\t\tpublic static ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box, String id")).output(expression().output(literal(", ")).output(mark("mode", "timerange")).output(literal(" range"))).output(literal(", UISession session) {\n\t\t\treturn null;//TODO\n\t\t}\n\n\t\t")).output(expression().output(mark("hasMagazineView"))).output(literal("\n\n\t\t")).output(expression().output(mark("range", "created"))).output(literal("\n\n\t\t")).output(expression().output(mark("hasCustomItemsArrivalMessage"))).output(literal("\n\t\tpublic static String ")).output(mark("type", "shortType", "firstLowerCase")).output(literal("Id(")).output(mark("box", "firstUpperCase")).output(literal("Box box, ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(") {\n\t\t\t//return ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(".core$().id();\n\t\t\treturn null;\n\t\t}\n\n\t\tpublic static String ")).output(mark("type", "shortType", "firstLowerCase")).output(literal("Name(")).output(mark("box", "firstUpperCase")).output(literal("Box box, ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(") {\n\t\t\t//return ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(".name$();\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t")).output(expression().output(mark("view"))).output(literal("\n\n\tpublic static class Events {\n\t\t")).output(expression().output(mark("event"))).output(literal("\n\t}\n\n\tpublic static class Arrangements {\n\t\t")).output(expression().output(mark("arrangement", "method").multiple("\n\n"))).output(literal("\n\n\t\t")).output(expression().output(mark("groupingSelection"))).output(literal("\n\n\t\t")).output(expression().output(mark("hasArrangements"))).output(literal("\n\t}\n}")),
				rule().condition((trigger("created"))).output(literal("public static java.time.Instant ")).output(mark("type", "shortType", "FirstLowerCase")).output(literal("Created(")).output(mark("box")).output(literal("Box box, ")).output(mark("type")).output(literal(" object) {\n\t//return ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(".created();\n\treturn null;//TODO\n}")),
				rule().condition((trigger("range"))).output(literal("public static class Temporal {\n\tpublic static io.intino.alexandria.ui.model.TimeRange range(")).output(mark("box", "firstUpperCase")).output(literal("Box box, UISession session) {\n\t\treturn null;\n\t}\n}")),
				rule().condition((trigger("temporalfilter"))).output(literal("public static class TemporalFilter {\n\t")).output(mark("temporalFilterEnabled")).output(literal("\n\t")).output(mark("temporalFilterVisible")).output(literal("\n}")),
				rule().condition((attribute("always")), (trigger("temporalfilterenabled"))),
				rule().condition((attribute("conditional")), (trigger("temporalfilterenabled"))).output(literal("public static boolean enable(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.TemporalCatalog catalog, io.intino.alexandria.ui.model.catalog.Scope scope, UISession session) {\n\treturn true;\n}")),
				rule().condition((attribute("never")), (trigger("temporalfilterenabled"))),
				rule().condition((attribute("always")), (trigger("temporalfiltervisible"))),
				rule().condition((attribute("conditional")), (trigger("temporalfiltervisible"))).output(literal("public static boolean visible(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.TemporalCatalog catalog, io.intino.alexandria.ui.model.catalog.Scope scope, UISession session) {\n\treturn true;\n}")),
				rule().condition((attribute("never")), (trigger("temporalfiltervisible"))),
				rule().condition((trigger("timerange"))).output(literal("io.intino.alexandria.ui.model.TimeRange")),
				rule().condition((trigger("hasmagazineview"))).output(literal("public static ")).output(mark("type")).output(literal(" root")).output(mark("type", "shortType", "firstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box, java.util.List<")).output(mark("type")).output(literal("> objects")).output(expression().output(literal(", ")).output(mark("mode", "timerange")).output(literal(" range"))).output(literal(", UISession session) {\n\treturn null;\n}\n\npublic static ")).output(mark("type")).output(literal(" default")).output(mark("type", "shortType", "firstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box, String id")).output(expression().output(literal(", ")).output(mark("mode", "timerange")).output(literal(" range"))).output(literal(", UISession session) {\n\treturn null;\n}")),
				rule().condition((trigger("hascustomitemsarrivalmessage"))).output(literal("public static String itemsArrivalMessage(")).output(mark("box", "firstUpperCase")).output(literal("Box box, int count, UISession session) {\n\treturn null;\n}")),
				rule().condition((trigger("groupingselection"))).output(literal("public static void createGroup(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Catalog catalog, String grouping, io.intino.alexandria.ui.model.catalog.arrangement.Group group, UISession session) {\n\n}")),
				rule().condition((trigger("hasarrangements"))).output(literal("public static io.intino.alexandria.ui.model.Catalog.ArrangementFilterer filterer(")).output(mark("box", "firstUpperCase")).output(literal("Box box, UISession session) {\n\treturn null;\n}")),
				rule().condition((type("openpanel"))).output(mark("breadcrumbs")),
				rule().condition((trigger("breadcrumbs"))).output(literal("public static io.intino.alexandria.ui.model.mold.stamps.Tree onOpenPanelBreadcrumbs(")).output(mark("box", "firstUpperCase")).output(literal("Box box, ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(", UISession session) {\n\treturn null; //return breadcrumbs\n}")),
				rule().condition((type("opencatalog"))).output(mark("openCatalogLoader")).output(literal("\n")).output(mark("openCatalogFilter")),
				rule().condition((trigger("opencatalogloader"))).output(literal("public static String onOpenCatalog(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Catalog catalog, ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(", UISession session) {\n\treturn null; //return item id to show when catalog is opened\n}")),
				rule().condition((trigger("opencatalogfilter"))).output(literal("public static boolean onOpenCatalogFilter(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Catalog catalog, ")).output(mark("type")).output(literal(" ")).output(mark("type", "shortType", "firstLowerCase")).output(literal(", Object item, UISession session) {\n\treturn true;\n}")),
				rule().condition((trigger("toolbar"))).output(literal("public static class Toolbar {\n\t")).output(mark("operation").multiple("\n\n")).output(literal("\n}")),
				rule().condition((allTypes("arrangement", "grouping"))).output(literal("public static java.util.List<io.intino.alexandria.ui.model.catalog.arrangement.Group> ")).output(mark("name", "firstLowerCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box, java.util.List<")).output(mark("type")).output(literal("> items, UISession session) {\n\treturn emptyList(); //TODO\n}")),
				rule().condition((allTypes("arrangement", "sorting"))).output(literal("public static int ")).output(mark("name", "firstLowerCase")).output(literal("Comparator(")).output(mark("box", "firstUpperCase")).output(literal("Box box, ")).output(mark("type")).output(literal(" item1, ")).output(mark("type")).output(literal(" item2, UISession session) {\n\treturn 0; //TODO\n}"))
		);
	}
}