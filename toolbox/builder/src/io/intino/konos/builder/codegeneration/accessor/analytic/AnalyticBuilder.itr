def type(builder)
	package $package+validPackage.analytic;

	import $package+validPackage.analytic.cubes.schemas.*;
	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.Fingerprint;
	import io.intino.alexandria.led.*;
	import io.intino.alexandria.led.util.LedSessionSorter;

	import java.util.function.Consumer;
	import java.util.function.Function;
	import java.io.File;
	import java.util.Objects;

	import org.apache.commons.io.FileUtils;
	import java.util.List;

	public class $name+snakeCaseToCamelCase+firstUpperCase {

		private static final int DEFAULT_BUFFER_SIZE = 1_000_000;

		private final File stage;
		private Session session;

		public $name+snakeCaseToCamelCase+firstUpperCase(File stage) {
			this(stage, DEFAULT_BUFFER_SIZE);
		}

		public $name+snakeCaseToCamelCase+firstUpperCase(File stage, int factBufferSize) {
			this.stage = stage;
			this.session = new Session(stage, factBufferSize);
		}

		$cube+put...[$NL$NL]

		public void flush() {
			session.flush();
		}

		public void close() {
			session.close();
		}

		private static class Session implements AutoCloseable {

			private final File root;
			private final java.util.Map<Fingerprint, UnsortedLedStreamBuilder<? extends Schema>> builders;
			private final int ledBufferSize;

			public Session(File root, int ledBufferSize) {
				this.root = root;
				this.ledBufferSize = ledBufferSize;
				this.builders = new java.util.HashMap<>();
			}

			public <T extends Schema> void put(String tank, Timetag timetag, Class<T> schemaClass, java.util.stream.Stream<Consumer<T>> stream) {
				LedStream.Builder<T> builder = this.builder(Fingerprint.of(tank, timetag), schemaClass);
				Objects.requireNonNull(builder);
				stream.forEach(builder::append);
			}

			public <T extends Schema> void put(String tank, Timetag timetag, Class<T> schemaClass, Consumer<T> transaction) {
				LedStream.Builder<T> builder = this.builder(Fingerprint.of(tank, timetag), schemaClass);
				builder.append(transaction);
			}

			public void flush() {
				this.builders.forEach((f, b) -> b.flush());
			}

			@Override
			public void close() {
				this.builders.forEach((f, b) -> b.close());
			}

			private <T extends Schema> LedStream.Builder<T> builder(Fingerprint fingerprint, Class<T> schemaClass) {
				if (!this.builders.containsKey(fingerprint)) {
					this.builders.put(fingerprint, new UnsortedLedStreamBuilder(schemaClass, Schema.factoryOf(schemaClass),
						this.ledBufferSize, fileOf(fingerprint)));
				}
				return (io.intino.alexandria.led.LedStream.Builder) this.builders.get(fingerprint);
			}

			private java.io.File fileOf(Fingerprint fingerprint) {
				 return new java.io.File(root, fingerprint.name() + ".led.session");
			}
		}

		public static class Sealer {

			public static void seal(File destination, File stage) {
				File tempFolder = tempFolder(stage);
				File$[] files = FileUtils.listFiles(stage, new String$[]{"session"}, true).toArray(new File$[0]);
				LedSessionSorter.sort(files, (Function<File, File>) f -> datamartFile(destination, cleanedNameOf(f)), tempFolder);
			}

			private static File datamartFile(File destination, String name) {
				File ledFile = new File(destination, name + ".led");
				ledFile.getParentFile().mkdirs();
				return ledFile;
			}

			private static File tempFolder(File stage) {
				File temp = new File(stage, "temp");
				temp.mkdir();
				return temp;
			}

			private static String cleanedNameOf(File file) {
				final String name = file.getName();
				int to = file.getName().indexOf("#");
				to = to < 0 ? name.length() : to;
				return name.substring(0, to).replace("-", "/").replace(".led.session", "");
			}
		}
	}
end

def trigger(put)
	public void put$name+FirstUpperCase(String tank, Timetag timetag, java.util.function.Consumer<$name+FirstUpperCase~Schema> fact) {
		session.put(tank, timetag, $name+FirstUpperCase~Schema.class, fact);
	}
end