def type(interface)
	package $package.analytic;

    import java.util.Collection;

    public interface Axis {
    	String label();

    	default boolean isDynamic() {
			return false;
		};

		Component byIndex(int index);

		int componentCount();

		Collection<? extends Component> components();

		interface Component {
			int index();

			String id();

			String label();

			Axis axis();
		}
    }
end

def type(factor) trigger(getter)
	public Abstract$name+FirstUpperCase.Component $name+FirstLowerCase() {
		return $name+FirstLowerCase;
	}
end


def type(factor) trigger(getterInstance)
	@Override
	protected $name+firstUpperCase.Component $name+firstLowerCase~Of(String$[] record) {
		return $name+firstUpperCase.instance().byName(record$[$index]);
	}
end

def type(factor) trigger(getterAbstract)
	protected abstract Abstract$name+FirstUpperCase.Component $name+firstLowerCase~Of(String$[] record);
end


def type(factor) trigger(field)
	private Abstract$name+FirstUpperCase.Component $name+firstLowerCase;
end

def type(factor) trigger(assign)
	$name+firstLowerCase = $name+firstLowerCase~Of(record);
end

def type(factor & abstract)
	package $package.analytic.factors;

	import $package.analytic.Axis;

    import java.util.*;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;

    public abstract class Abstract$name+FirstUpperCase implements Axis {
    	protected final Map<Integer, Abstract$name+FirstUpperCase.Component> componentsByIndex = new HashMap<>();
    	protected final Map<String, Abstract$name+FirstUpperCase.Component> componentsByName = new HashMap<>();

    	@Override
    	public String label() {
    		return "$label";
    	}

    	@Override
    	public Collection<? extends Axis.Component> components() {
    		return componentsByIndex.values();
    	}

    	public Abstract$name+FirstUpperCase.Component byName(String name) {
    		return componentsByName.get(name);
    	}

    	public Abstract$name+FirstUpperCase.Component byIndex(int index) {
    		return componentsByIndex.get(index);
    	}

    	public java.util.stream.Stream<Abstract$name+FirstUpperCase.Component> filter(Predicate<Abstract$name+FirstUpperCase.Component> predicate) {
    		return  componentsByIndex.values().stream().filter(predicate);
    	}

		@Override
		public int componentCount() {
			return 0;
		}

    	public class Component implements Axis.Component {
    		private final int index;
			private String id;
			private String label;
			$factor+field...[$NL$NL]
    		public Component(String$[] record) {
    			index = indexOf(record);
				id = idOf(record);
				label = labelOf(record);
    			$factor+assign...[$NL$NL]
    		}

    		@Override
			public int index() {
				return index;
			}

			@Override
			public String id() {
				return id;
			}

			@Override
			public String label() {
				return label;
			}

			@Override
			public Axis axis() {
				return Abstract$name+FirstUpperCase.this;
			}

    		[$factor+getter...[$NL$NL]]
    	}

		protected abstract int indexOf(String$[] record);
		protected abstract String idOf(String$[] record);
		protected abstract String labelOf(String$[] record);
    	[$factor+getterAbstract...[$NL$NL]]
    }
end

def type(factor)
	package $package.analytic.factors;

    public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {
    	private static $name+FirstUpperCase instance;

    	public static synchronized $name+FirstUpperCase instance() {
    		return instance = instance != null ? instance : new $name+FirstUpperCase().load("$resourceId");
    	}

    	public $name+FirstUpperCase load(String resourceId) {
    		// TODO
    		return this;
    	}

    	@Override
    	protected int indexOf(String$[] record) {
    		return Integer.parseInt(record$[0]);
    	}

    	@Override
    	protected String idOf(String$[] record) {
    		return record$[1];
    	}

    	@Override
    	protected String labelOf(String$[] record) {
    		return record$[2];
    	}

		[$factor+getterInstance...[$NL$NL]]
    }
end