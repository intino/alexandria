package io.intino.konos.builder.codegeneration.accessor.analytic;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class CubeTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("cube"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".analytic.cubes.schemas;\n\nimport io.intino.alexandria.led.HeapLedStreamBuilder;\nimport io.intino.alexandria.led.Schema;\nimport io.intino.alexandria.led.LedReader;\nimport io.intino.alexandria.led.LedWriter;\nimport io.intino.alexandria.led.LedStream;\nimport io.intino.alexandria.led.Led;\nimport io.intino.alexandria.led.allocators.SchemaFactory;\nimport io.intino.alexandria.led.buffers.store.ByteStore;\nimport io.intino.alexandria.led.buffers.store.ByteBufferStore;\nimport io.intino.alexandria.Timetag;\n\nimport java.util.stream.*;\nimport java.util.List;\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.io.File;\nimport java.util.UUID;\nimport ")).output(mark("package", "validPackage")).output(literal(".analytic.axes.*;\n\npublic class ")).output(mark("name")).output(literal(" extends Schema {\n\n\tpublic static final int SIZE = ")).output(mark("size")).output(literal("; // Bytes\n    public static final UUID SERIAL_UUID = UUID.fromString(\"")).output(mark("serialUUID")).output(literal("\");\n    public static final SchemaFactory<")).output(mark("name")).output(literal("> FACTORY = new SchemaFactory<>(")).output(mark("name")).output(literal(".class) {\n        @Override\n        public ")).output(mark("name")).output(literal(" newInstance(ByteStore store) {\n            return new ")).output(mark("name")).output(literal("(store);\n        }\n    };\n\n\tpublic ")).output(mark("name")).output(literal("() {\n\t\tsuper(new ByteBufferStore(SIZE));\n\t}\n\n\tpublic ")).output(mark("name")).output(literal("(ByteStore store) {\n\t\tsuper(store);\n    }\n\n    @Override\n\tpublic long id() {\n\t\treturn bitBuffer.getAlignedLong(0);\n\t}\n\n    @Override\n\tpublic int size() {\n\t\treturn SIZE;\n\t}\n\n    @Override\n\tpublic UUID serialUUID() {\n\t    return SERIAL_UUID;\n\t}\n\n\t")).output(expression().output(mark("column", "getter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(mark("column", "setter").multiple("\n\n"))).output(literal("\n\n    @Override\n    public String toString() {\n        return \"")).output(mark("name", "FirstUpperCase")).output(literal("{\"\n                + \"id=\" + id()\n                ")).output(expression().output(mark("column", "toString").multiple("\n"))).output(literal("\n                + '}';\n    }\n\n\t")).output(expression().output(mark("split"))).output(literal("\n\n\n\tpublic static class Builder extends HeapLedStreamBuilder<")).output(mark("name")).output(literal("> {\n\n        public Builder() {\n            this(1_000_000);\n        }\n\n        public Builder(File tempDirectory) {\n            this(1_000_000, tempDirectory);\n        }\n\n        public Builder(int numSchemasPerBlock) {\n            this(numSchemasPerBlock, new File(System.getProperty(\"java.io.tmpdir\")));\n        }\n\n        public Builder(int numSchemasPerBlock, File tempDirectory) {\n            super(")).output(mark("name")).output(literal(".class, numSchemasPerBlock, tempDirectory);\n        }\n    }\n\n    public static class Tank {\n\n        public static File get(File root) {\n            return new File(root, \"")).output(mark("cube")).output(literal("\");\n        }\n\n        public static File get(File root, Divisiones.Component division) {\n            return new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id());\n        }\n\n        public static File on(File root, Timetag timetag) {\n            return new File(root, \"")).output(mark("cube")).output(literal("/\" + timetag + \".led\");\n        }\n\n        public static File on(File root, Divisiones.Component division, Timetag timetag) {\n            return new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id() + \"/\" + timetag + \".led\");\n        }\n    }\n\n    public static class Reader {\n\n        public static List<LedStream<")).output(mark("name")).output(literal(">> readAll(File root, Divisiones.Component division) {\n        \tFile[] leds = getLedFiles(new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id()));\n        \treturn Arrays.stream(leds).map(Reader::openLedStream).collect(Collectors.toList());\n        }\n\n        public static List<LedStream<")).output(mark("name")).output(literal(">> read(File root, Divisiones.Component division, Timetag from, Timetag to) {\n        \tFile[] leds = getLedFiles(new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id()));\n        \treturn Arrays.stream(leds)\n        \t    .filter(led -> {\n        \t        final String name = led.getName();\n        \t        final Timetag timetag = Timetag.of(name.substring(0, name.indexOf('.')));\n        \t        return (timetag.equals(from) || timetag.isAfter(from)) && (timetag.equals(to) || timetag.isBefore(to));\n        \t    })\n        \t    .map(Reader::openLedStream)\n        \t    .collect(Collectors.toList());\n        }\n\n        public static LedStream<")).output(mark("name")).output(literal("> read(File root, Divisiones.Component division, Timetag timetag) {\n        \tFile[] leds = getLedFiles(new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id()));\n        \treturn Arrays.stream(leds)\n        \t    .filter(led -> {\n        \t        final String name = led.getName();\n        \t        final Timetag t = Timetag.of(name.substring(0, name.indexOf('.')));\n        \t        return t.equals(timetag);\n        \t    })\n        \t    .map(Reader::openLedStream)\n        \t    .findFirst().orElse(null);\n        }\n\n    \tpublic static LedStream<")).output(mark("name")).output(literal("> readFirst(File root, Divisiones.Component division) {\n        \tFile[] leds = getLedFiles(new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id()));\n        \tif(leds.length == 0) return LedStream.empty(")).output(mark("name")).output(literal(".class);\n            return openLedStream(leds[0]);\n        }\n\n    \tpublic static LedStream<")).output(mark("name")).output(literal("> readLast(File root, Divisiones.Component division) {\n            File[] leds = getLedFiles(new File(root, \"")).output(mark("cube")).output(literal(".\" + division.id()));\n            if(leds.length == 0) return LedStream.empty(")).output(mark("name")).output(literal(".class);\n        \treturn openLedStream(leds[leds.length - 1]);\n    \t}\n\n    \tpublic static LedStream<")).output(mark("name")).output(literal("> readLedStream(File ledFile) {\n            return new LedReader(ledFile).read(")).output(mark("name")).output(literal(".class);\n        }\n\n        public static Led<")).output(mark("name")).output(literal("> readLed(File ledFile) {\n            return new LedReader(ledFile).readAll(")).output(mark("name")).output(literal(".class);\n        }\n\n        private static LedStream<")).output(mark("name")).output(literal("> openLedStream(File led) {\n        \tif(led == null || !led.exists()) return LedStream.empty(")).output(mark("name")).output(literal(".class);\n        \treturn new LedReader(led).read(")).output(mark("name")).output(literal(".class);\n        }\n\n        private static File[] getLedFiles(File dir) {\n    \t\tFile[] leds = dir.listFiles(f -> f.getName().endsWith(\".led\"));\n    \t\tif(leds == null || leds.length == 0) return new File[0];\n    \t\tArrays.sort(leds, Comparator.comparing(File::getName));\n    \t\treturn leds;\n        }\n    }\n\n    public static class Writer {\n\n        public static void write(File file, LedStream.Builder<")).output(mark("name")).output(literal("> builder) {\n            write(file, builder.build());\n        }\n\n        public static void write(File file, LedStream<")).output(mark("name")).output(literal("> ledStream) {\n            new LedWriter(file).write(ledStream);\n        }\n\n        public static void write(File file, Led<")).output(mark("name")).output(literal("> led) {\n            new LedWriter(file).write(led);\n        }\n    }\n}")),
			rule().condition((trigger("axisimport"))).output(literal("import ")).output(mark("")).output(literal(".axis.*;")),
			rule().condition((trigger("split"))).output(literal("public enum Split {\n\t")).output(mark("enum", "asEnum").multiple(", ")).output(literal(";\n\n\tpublic abstract String qn();\n\n\tpublic static Split splitByQn(String qn) {\n\t    for(Split split : values()) {\n\t        if(split.qn().equals(qn)) return split;\n\t    }\n\t    return null;\n\t}\n}")),
			rule().condition((trigger("asenum"))).output(mark("value", "snakeCaseToCamelCase")).output(literal(" {\n\tpublic String qn() {\n\t\treturn \"")).output(mark("qn")).output(literal("\";\n\t}\n}")),
			rule().condition((trigger("nbits"))).output(literal("NBits"))
		);
	}
}