package io.intino.konos.builder.codegeneration.datalake;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class DatalakeTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("tanks"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".datalake;\n\nimport io.intino.alexandria.logger.Logger;\nimport io.intino.alexandria.nessaccessor.NessAccessor;\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport io.intino.ness.core.Datalake.EventStore.MessageHandler;\n\n")).output(expression().output(mark("tankImport"))).output(literal("\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.function.Predicate;\n\npublic class Datalake {\n\tprivate static Map<String, MessageHandler> handlers = new HashMap<>();\n\t")).output(mark("tank", "field").multiple("\n")).output(literal("\n\n\tpublic static void registerTanks(")).output(mark("box", "firstUppercase")).output(literal("Box box) {\n\t\tfinal String clientID = ")).output(mark("clientId")).output(literal(";\n\t\tio.intino.ness.core.Datalake.EventStore eventStore = box.nessAccessor().eventStore();\n\t\t")).output(mark("tank", "assign").multiple("\n")).output(literal("\n\t\t")).output(mark("tank", "subscribe").multiple("\n")).output(literal("\n\t}\n\n\tpublic static List<TankAccessor> tanks() {\n\t\tList<TankAccessor> tanks = new ArrayList<>();\n\t\t")).output(mark("tank", "add").multiple("\n")).output(literal("\n\t\treturn tanks;\n\t}\n\n\tpublic static Map<String, io.intino.ness.core.Datalake.EventStore.MessageHandler> handlers() {\n\t\treturn handlers;\n\t}\n\n\tpublic static List<TankAccessor> byName(List<String> names) {\n\t\treturn tanks().stream().filter(t -> names.contains(t.name())).collect(java.util.stream.Collectors.toList());\n\t}\n\n\tpublic static TankAccessor byName(String type) {\n\t\treturn tanks().stream().filter(t -> type.equals(t.name())).findFirst().orElse(null);\n\t}\n\n\tpublic static void unsubscribeAll(NessAccessor accessor) {\n\t\t")).output(mark("tank", "unsubscribe").multiple("\n")).output(literal("\n\t}\n\n\t")).output(mark("tank", "getter").multiple("\n\n")).output(literal("\n\n\t")).output(mark("tank", "class").multiple("\n\n")).output(literal("\n\n\tpublic static class TankAccessor {\n\t\tprotected final ")).output(mark("box", "firstUppercase")).output(literal("Box box;\n\t\tprivate final NessAccessor accessor;\n\t\tprivate final io.intino.ness.core.Datalake.EventStore.Tank tank;\n\n\t\tTankAccessor(")).output(mark("box", "firstUppercase")).output(literal("Box box, io.intino.ness.core.Datalake.EventStore.Tank tank) {\n\t\t\tthis.box = box;\n\t\t\tthis.accessor = box.nessAccessor();\n\t\t\tthis.tank = tank;\n\t\t}\n\n\t\tpublic String name() {\n\t\t\treturn tank.name();\n\t\t}\n\n\t\tpublic io.intino.alexandria.zim.ZimStream content() {\n\t\t\treturn tank.content();\n\t\t}\n\n\t\tpublic io.intino.alexandria.zim.ZimStream content(Predicate<io.intino.alexandria.Timetag> predicate) {\n\t\t\treturn tank.content(predicate);\n\t\t}\n\n\t\tpublic void feed(io.intino.alexandria.inl.Message... messages) {\n\t\t\tif (accessor.eventStore() instanceof io.intino.alexandria.nessaccessor.tcp.TCPEventStore)\n\t\t\t\t((io.intino.alexandria.nessaccessor.tcp.TCPEventStore) accessor.eventStore()).feed(tank.name(), messages);\n\t\t}\n\n\t\tpublic void send(io.intino.alexandria.Timetag timetag, io.intino.alexandria.inl.Message... messages) {\n\t\t\tio.intino.ness.core.memory.MemoryStage stage = new io.intino.ness.core.memory.MemoryStage();\n\t\t\tio.intino.ness.core.sessions.EventSession session = stage.createEventSession();\n\t\t\tfor (io.intino.alexandria.inl.Message message : messages) session.put(tank.name(), timetag, message);\n\t\t\tsession.close();\n\t\t\taccessor.push(stage);\n\t\t}\n\t}\n}")),
			rule().condition((type("custom")), (trigger("clientid"))).output(literal("box.configuration().get(\"")).output(mark("value")).output(literal("\");")),
			rule().condition((trigger("clientid"))).output(literal("\"")).output(mark("value")).output(literal("\"")),
			rule().condition((type("tank")), (trigger("field"))).output(literal("private static TankAccessor ")).output(mark("name", "firstLowerCase")).output(literal("Accessor;")),
			rule().condition((type("tank")), (trigger("assign"))).output(mark("name", "firstLowerCase")).output(literal("Accessor = new ")).output(mark("name", "firstUpperCase")).output(literal("Accessor(box, eventStore.tank(\"")).output(mark("fullname")).output(literal("\"));")),
			rule().condition((type("tank")), (anyTypes("input","mounter")), (trigger("subscribe"))).output(literal("handlers.put(\"")).output(mark("messageType")).output(literal("\", (MessageHandler) ")).output(mark("name", "firstLowerCase")).output(literal("Accessor);\neventStore.subscribe(")).output(mark("name", "firstLowerCase")).output(literal("Accessor.tank).using(clientID != null ? clientID + \"-")).output(mark("messageType")).output(literal("\" : null, handlers.get(\"")).output(mark("messageType")).output(literal("\"));")),
			rule().condition((type("tank")), (trigger("unsubscribe"))).output(literal("accessor.eventStore().unsubscribe(")).output(mark("name", "firstLowerCase")).output(literal("Accessor.tank);")),
			rule().condition((type("tank")), (trigger("add"))).output(literal("tanks.add(Datalake.")).output(mark("name", "firstLowerCase")).output(literal("Accessor);")),
			rule().condition((type("tank")), (trigger("addhandler"))).output(literal("tanks.put(\"")).output(mark("name")).output(literal("\", new ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Handler(box));")),
			rule().condition((type("tank")), (trigger("getter"))).output(literal("public static TankAccessor ")).output(mark("name", "firstLowerCase")).output(literal("() {\n\treturn Datalake.")).output(mark("name", "firstLowerCase")).output(literal("Accessor;\n}")),
			rule().condition((type("custom")), (trigger("replace"))).output(literal(".replace(\"{")).output(mark("value")).output(literal("}\", ")).output(mark("value", "validname", "firstLowerCase")).output(literal(")")),
			rule().condition((trigger("formatmessage"))).output(literal("\"")).output(mark("name")).output(literal("\"")).output(expression().output(mark("custom", "customType").multiple(""))),
			rule().condition((allTypes("mounter","tank")), (trigger("class"))).output(literal("public static class ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor extends TankAccessor implements MessageHandler {\n\n\tpublic ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor(")).output(mark("box", "firstUppercase")).output(literal("Box box, io.intino.ness.core.Datalake.EventStore.Tank tank) {\n\t\tsuper(box, tank);\n\t}\n\n\tpublic void handle(io.intino.alexandria.inl.Message m) {\n\t\ttry {\n\t\t\t")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Mounter mounter = new ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Mounter();\n\t\t\tmounter.box = box;\n\t\t\tmounter.")).output(mark("type", "typeName")).output(literal(" = ")).output(mark("type", "load")).output(literal(";\n\t\t\tmounter.execute();\n\t\t} catch(Throwable e) {\n\t\t\tLogger.error(e);\n\t\t}\n\t}\n}")),
			rule().condition((allTypes("input","tank")), (trigger("class"))).output(literal("public static class ")).output(mark("messageType", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor extends TankAccessor implements MessageHandler {\n\n\tpublic ")).output(mark("messageType", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor(")).output(mark("box", "firstUppercase")).output(literal("Box box, io.intino.ness.core.Datalake.EventStore.Tank tank) {\n\t\tsuper(box, tank);\n\t}\n\n\tpublic void handle(io.intino.alexandria.inl.Message m) {\n\t\ttry {\n\t\t\t")).output(mark("handler").multiple("\n")).output(literal("\n\t\t} catch(Throwable e) {\n\t\t\tLogger.error(e);\n\t\t}\n\t}\n}")),
			rule().condition((type("tank")), (trigger("class"))).output(literal("public static class ")).output(mark("messageType", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor  extends TankAccessor {\n\n\tpublic ")).output(mark("messageType", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Accessor(")).output(mark("box", "firstUppercase")).output(literal("Box box, io.intino.ness.core.Datalake.EventStore.Tank tank) {\n\t\tsuper(box, tank);\n\t}\n}")),
			rule().condition((trigger("handler"))).output(mark("processPackage", "lowerCase")).output(literal(".")).output(mark("processName", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Process ")).output(mark("processName", "snakeCaseToCamelCase", "FirstLowerCase")).output(literal(" = new ")).output(mark("processPackage", "lowerCase")).output(literal(".")).output(mark("processName", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Process();\n")).output(mark("processName", "snakeCaseToCamelCase", "FirstLowerCase")).output(literal(".box = box;\n")).output(mark("processName", "snakeCaseToCamelCase", "FirstLowerCase")).output(literal(".")).output(mark("type", "typeName")).output(literal(" = ")).output(mark("type", "load")).output(literal(";\n")).output(mark("processName", "snakeCaseToCamelCase", "FirstLowerCase")).output(literal(".outputs = java.util.Arrays.asList(")).output(mark("output", "quoted", "lowercase").multiple(", ")).output(literal(");\n")).output(mark("processName", "snakeCaseToCamelCase", "FirstLowerCase")).output(literal(".execute();")),
			rule().condition((trigger("replace"))).output(literal(".replace(\"{")).output(mark("value")).output(literal("}\", configuration().")).output(mark("conf", "firstLowerCase")).output(literal("Configuration.")).output(mark("value", "validname", "firstLowerCase")).output(literal(")")),
			rule().condition((trigger("tankimport"))).output(literal("import ")).output(mark("", "validPackage")).output(literal(".datalake.mounters.*;")),
			rule().condition((type("schema")), (trigger("load"))).output(literal("io.intino.alexandria.inl.Inl.fromMessage(m, ")).output(mark("package")).output(literal(".schemas.")).output(mark("name", "FirstUpperCase")).output(literal(".class)")),
			rule().condition((trigger("load"))).output(literal("m")),
			rule().condition((type("schema")), (trigger("typename"))).output(mark("name", "firstLowerCase")),
			rule().condition((trigger("typename"))).output(literal("message")),
			rule().condition((trigger("quoted"))).output(literal("\"")).output(mark("")).output(literal("\""))
		);
	}
}