package io.intino.konos.builder.codegeneration.services.ui.display;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class DisplayRequesterTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("accessible", "display"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".displays.requesters;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.")).output(mark("name", "FirstUppercase")).output(literal(";\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.")).output(mark("name", "FirstUpperCase")).output(literal("Proxy;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.ui.displays.AlexandriaDisplayNotifierProvider;\nimport io.intino.alexandria.ui.displays.requesters.AlexandriaProxyDisplayRequester;\nimport io.intino.alexandria.ui.spark.UISparkManager;\n\npublic class ")).output(mark("name", "FirstUpperCase")).output(literal("ProxyRequester extends AlexandriaProxyDisplayRequester {\n\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal("ProxyRequester(UISparkManager manager, AlexandriaDisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\tString operation = operation();\n\t\tif (operation.equals(\"registerPersonifiedDisplay\")) {\n\t\t\t")).output(mark("name", "FirstUpperCase")).output(literal("Proxy display = display();\n\t\t\tif (display != null) display.registerPersonifiedDisplay(manager.fromQuery(\"value\", String.class));\n\t\t}\n\t\telse {\n\t\t\t")).output(mark("name", "FirstUppercase")).output(literal(" display = personifiedDisplay();\n\t\t\tif (display == null) return;\n\t\t\tif (operation.equals(\"refreshPersonifiedDisplay\")) {\n\t\t\t\t")).output(mark("parameter").multiple("\n")).output(literal("\n\t\t\t\tdisplay.refresh();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t")).output(expression().output(literal("else ")).output(mark("request").multiple("\nelse "))).output(literal("\n\t\t\tsuper.execute();\n\t\t}\n\t}\n}")),
				rule().condition((type("display"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".displays.requesters;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.")).output(mark("name", "FirstUpperCase")).output(literal(";\nimport io.intino.alexandria.exceptions.*;\nimport ")).output(mark("package", "validPackage")).output(literal(".*;\n")).output(mark("schemaImport")).output(literal("\n\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\nimport io.intino.alexandria.ui.displays.requesters.Alexandria")).output(expression().output(mark("type", "class", "FirstUpperCase"))).output(literal("Requester;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.ui.displays.AlexandriaDisplayNotifierProvider;\nimport io.intino.alexandria.ui.spark.UISparkManager;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Requester extends ")).output(expression().output(literal("Alexandria")).output(mark("type", "class", "FirstUpperCase"))).output(literal("Requester {\n\n\tpublic ")).output(mark("name", "firstUpperCase")).output(literal("Requester(UISparkManager manager, AlexandriaDisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\t")).output(mark("name", "firstUpperCase")).output(literal(" display = display();\n\t\tif (display == null) return;\n\t\tString operation = operation();\n\n\t\t")).output(mark("request").multiple("\nelse ")).output(literal("\n\t\tsuper.execute();\n\t}\n}")),
				rule().condition((attribute("display")), (trigger("class"))).output(literal("Display")),
				rule().condition((allTypes("request", "asset")), (trigger("request"))).output(literal("if (operation.equals(\"")).output(mark("name")).output(literal("\")) {\n\tio.intino.alexandria.ui.spark.UIFile file = display.")).output(mark("name")).output(literal("(")).output(mark("parameter")).output(literal(");\n\tmanager.write(file.content(), file.label(), file.embedded());\n\treturn;\n}")),
				rule().condition((type("request")), (trigger("request"))).output(literal("if (operation.equals(\"")).output(mark("name")).output(literal("\")) {\n\tdisplay.")).output(mark("name")).output(literal("(")).output(mark("parameter")).output(literal(");\n\treturn;\n}")),
				rule().condition((allTypes("accessible", "parameter")), (trigger("parameter"))).output(literal("display.")).output(mark("value", "firstLowercase")).output(literal("(manager.fromQuery(\"")).output(mark("value")).output(literal("\", String.class));")),
				rule().condition((type("list")), (trigger("parameter"))).output(literal("manager.fromQuery(\"value\", ")).output(mark("value")).output(literal("[].class)")),
				rule().condition((allTypes("file", "parameter")), (trigger("parameter"))).output(literal("manager.fromForm(\"value\", ")).output(mark("value")).output(literal(".class)")),
				rule().condition((type("parameter")), (trigger("parameter"))).output(literal("manager.fromQuery(\"value\", ")).output(mark("value")).output(literal(".class)")),
				rule().condition((trigger("parameter"))),
				rule().condition((type("schemaimport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;"))
		);
	}
}