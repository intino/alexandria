package io.intino.konos.builder.codegeneration.accessor.ui.widget;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class WidgetRoutesTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("routes"))).output(literal("<link rel=\"import\" href=\"../../../lib/polymer/polymer.html\">\n<link rel=\"import\" href=\"../../../lib/cotton-carrier/cotton-carrier-behavior.html\">\n<link rel=\"import\" href=\"../../../lib/alexandria-ui-elements/_common/alexandria-configuration-behavior.html\">\n<link rel=\"import\" href=\"../../../lib/app-route/app-route.html\">\n<link rel=\"import\" href=\"../../../lib/app-route/app-location.html\">\n\n<script src=\"requester.js\"></script>\n\n<dom-module id=\"")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-routes\">\n\n    <template>\n        <app-location route=\"{{route}}\"></app-location>\n        <app-route route=\"{{route}}\" pattern=\"{_path}/\" data=\"{{showHomeRouteData}}\"></app-route>\n        ")).output(mark("route", "define").multiple("\n")).output(literal("\n    </template>\n\n    <style></style>\n\n    <script>\n\n        Polymer({\n            is: '")).output(mark("name", "camelCaseToSnakeCase")).output(literal("-routes',\n\n            behaviors: [ CottonBehaviors.CarrierBehavior, ")).output(mark("name", "firstuppercase")).output(literal("Behaviors.Requester, AlexandriaBehaviors.ConfigurationBehavior ],\n\n            observers: [\n                '_pathChanged(route.path)'\n            ],\n\n\t\t\tproperties : {\n\t\t\t\t_path : String\n\t\t\t},\n\n            attached : function() {\n                var parent = $(this).parent().get(0);\n                this.display = parent.display;\n                this._path = this.getBasePath();\n            },\n\n            setPath : function(path) {\n                this.set(\"route.path\", path);\n            },\n\n            _pathChanged : function(path) {\n                if (this.timeout != null)\n                    window.clearTimeout(this.timeout);\n\n                this.timeout = window.setTimeout(() => {\n                    if (path == \"/\" && this.routeShowHome != null) this.routeShowHome(this.display);\n                    ")).output(mark("route", "onChanged").multiple("\n")).output(literal("\n                }, 50);\n            },\n\n\t\t\t_isRoute : function(path, match) {\n\t\t\t\treturn path.replace(match, \"\").indexOf(\"/\") == -1;\n\t\t\t},\n\n\t\t\t_samePath : function(path) {\n\t\t\t\treturn path == this.route.path;\n\t\t\t},\n\n\t\t\t")).output(mark("route", "function").multiple(",\n")).output(literal("\n        });\n    </script>\n\n</dom-module>")),
				rule().condition((type("listenforchanges")), (trigger("onchanged"))).output(literal("else if (this._isRoute(path, this._path + \"")).output(mark("value", "subpath")).output(literal("\")) this.route")).output(mark("request", "FirstUpperCase")).output(literal("(this.display, ")).output(mark("routePath", "call")).output(literal(");")),
				rule().condition((trigger("onchanged"))),
				rule().condition((type("parameter")), (trigger("function"))).output(literal(" ")).output(mark("request")).output(literal(" : function(value) {\n\tvar path = ")).output(mark("routePath", "register")).output(literal(";\n\tif (this._samePath(path)) this.route")).output(mark("request", "FirstUpperCase")).output(literal("(this.display, value);\n\tthis.set(\"route.path\", path);\n}")),
				rule().condition((trigger("function"))).output(literal(" ")).output(mark("request")).output(literal(" : function() {\n\tvar path = this._path + \"")).output(mark("value", "subpath")).output(literal("\";\n\tif (this._samePath(path)) this.route")).output(mark("request", "FirstUpperCase")).output(literal("(this.display);\n\tthis.set(\"route.path\", path);\n}")),
				rule().condition((type("route")), (trigger("define"))).output(literal("<app-route route=\"{{route}}\" pattern=\"{_path}")).output(mark("value")).output(literal("\" data=\"{{")).output(mark("request")).output(literal("RouteData}}\"></app-route>")),
				rule().condition((allTypes("routepath", "encoded")), (trigger("call"))).output(literal("window.atob(path.replace(this._path + \"")).output(mark("value", "subpath")).output(literal("enc:\",\"\"))")),
				rule().condition((allTypes("routepath", "encoded")), (trigger("register"))).output(literal("this.path + \"")).output(mark("value", "subpath")).output(literal("\" + \"enc:\" + window.btoa(value)")),
				rule().condition((type("routepath")), (trigger("call"))).output(literal("path.replace(this._path + \"")).output(mark("value", "subpath")).output(literal("\",\"\")")),
				rule().condition((type("routepath")), (trigger("register"))).output(literal("this._path + \"")).output(mark("value", "subpath")).output(literal("\" + value"))
		);
	}
}