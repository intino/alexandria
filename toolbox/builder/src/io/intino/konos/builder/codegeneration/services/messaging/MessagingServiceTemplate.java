package io.intino.konos.builder.codegeneration.services.messaging;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class MessagingServiceTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("jms"))).output(literal("package ")).output(mark("package")).output(literal(";\n\nimport io.intino.alexandria.message.MessageHub;\nimport io.intino.alexandria.logger.Logger;\n\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n")).output(mark("schemaImport")).output(literal("\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Service {\n\tprivate final ")).output(mark("box", "firstUpperCase")).output(literal("Box box;\n\tprivate final ")).output(mark("box", "firstUpperCase")).output(literal("Configuration configuration;\n\tprivate final MessageHub messageHub;\n\n\tpublic ")).output(mark("name", "firstUpperCase")).output(literal("Service(MessageHub messageHub, ")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tthis.box = box;\n\t\tthis.configuration = box.configuration();\n\t\tthis.messageHub = messageHub;\n\t\t")).output(expression().output(literal("registerProcessListener()")).output(mark("hasProcess"))).output(literal("\n\t\t")).output(mark("request").multiple("\n")).output(literal("\n\t}\n\n\tprivate void registerProcessListener() {\n\t\tmessageHub.attachListener(\"Task\", \"")).output(mark("box", "lowercase-task")).output(literal("\", message -> {\n\t\t\tString name = message.get(\"name\").data();\n\t\t\t")).output(mark("request", "processlistener").multiple("\n")).output(literal("\n\t\t});\n\t\tmessageHub.attachListener(")).output(expression().output(literal("\"")).output(mark("businessUnit")).output(literal(".\" +"))).output(literal(" io.intino.alexandria.bpm.Workflow.EventType, message -> {\n\t\t\tio.intino.alexandria.bpm.ProcessStatus status = new io.intino.alexandria.bpm.ProcessStatus(message);\n\t\t\tif (!status.hasCallback()) return;\n\t\t\tString callback = message.get(\"callback\").data();\n\t\t\tObject data = dispatcher(status.processName()).onResponse();\n\t\t\tio.intino.alexandria.message.Message result = new io.intino.alexandria.message.Message(callback.substring(callback.lastIndexOf(\".\") + 1))\n\t\t\t\t.set(\"callbackProcess\", status.callbackProcess())\n\t\t\t\t.set(\"callbackState\", status.callbackState())\n\t\t\t\t.set(\"data\", io.intino.alexandria.Json.toString(data));\n\t\t\tmessageHub.sendMessage(callback, result);\n\t\t});\n\t}\n\n\t")).output(expression().output(mark("notification").multiple("\n\n"))).output(literal("\n\n\tprivate InboxDispatcher dispatcher(String name) {\n\t\t")).output(mark("request", "processSelect").multiple("\n")).output(literal("\n\t\treturn null;\n\t}\n\n\tpublic interface InboxDispatcher<Response> {\n\t\tResponse onResponse();\n\t}\n}")),
			rule().condition((type("process")), (trigger("processlistener"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("process")).output(literal("\")) {\n\tString callbackData = message.get(\"callback\").data();\n\tio.intino.alexandria.bpm.Callback callback = io.intino.alexandria.bpm.Callback.from(callbackData);\n\tnew ")).output(mark("package")).output(literal(".actions.")).output(mark("name", "FirstUpperCase")).output(literal("Action(box).onRequest(")).output(expression().output(literal("io.intino.alexandria.Json.fromString(message.get(\"data\").data(), ")).output(mark("parameter", "type")).output(literal(".class)"))).output(literal(");\n\tmessageHub.sendMessage(\"")).output(mark("businessUnit")).output(literal(".\" + io.intino.alexandria.bpm.Workflow.EventType, new io.intino.alexandria.bpm.ProcessStatus(java.util.UUID.randomUUID().toString(), \"")).output(mark("process")).output(literal("\", io.intino.alexandria.bpm.Process.Status.Enter, message.get(\"owner\").data(), callback.requesterId(), callback.requesterState()).message().set(\"callback\", callback.value()));\n}")),
			rule().condition(not(type("process")), (trigger("processlistener"))),
			rule().condition((type("process")), (trigger("processselect"))).output(literal("if (name.equalsIgnoreCase(\"")).output(mark("name")).output(literal("\")) return new ")).output(mark("package")).output(literal(".actions.")).output(mark("name", "FirstUpperCase")).output(literal("Action(box);")),
			rule().condition(not(type("process")), (trigger("processselect"))),
			rule().condition(not(type("process")), (type("request"))).output(literal("messageHub.attachRequestListener(")).output(mark("queue", "format")).output(literal(", m -> new ")).output(mark("package")).output(literal(".requests.")).output(mark("name", "firstUpperCase")).output(literal("Request(box).execute());")),
			rule().condition((type("notification"))).output(literal("public void notify")).output(mark("name", "firstUpperCase")).output(literal("(")).output(expression().output(mark("parameter", "signature").multiple(", "))).output(literal(") throws JMSException {//TODO\n\tfinal ")).output(mark("returnMessageType")).output(literal("Message message = session.create")).output(mark("returnMessageType")).output(literal("Message();\n\tfill")).output(mark("name", "firstUpperCase")).output(literal("Message(message")).output(expression().output(literal(", ")).output(mark("parameter", "name").multiple(", "))).output(literal(");\n\tnew ")).output(mark("model")).output(literal("Producer(session, ")).output(mark("queue", "format")).output(literal(").produce(message);\n}\n\nprivate void fill")).output(mark("name", "firstUpperCase")).output(literal("Message(")).output(mark("returnMessageType")).output(literal("Message message")).output(expression().output(literal(", ")).output(mark("parameter", "signature").multiple(", "))).output(literal(") throws JMSException {\n\t")).output(mark("parameter", "assign").multiple("\n")).output(literal("\n}")),
			rule().condition((type("queue")), (trigger("format"))).output(literal("\"")).output(mark("name")).output(literal("\"")).output(expression().output(mark("custom").multiple(""))),
			rule().condition((trigger("custom"))).output(literal(".replace(\"{")).output(mark("value")).output(literal("}\", configuration.get(\"")).output(mark("value")).output(literal("\"))")),
			rule().condition((type("parameter")), (trigger("type"))).output(mark("type", "formatted")),
			rule().condition((type("parameter")), (trigger("name"))).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")),
			rule().condition((type("parameter")), (trigger("signature"))).output(mark("type")).output(literal(" ")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")),
			rule().condition((allTypes("parameter","fileData")), (trigger("assign"))).output(literal("message.writeBytes(toByteArray(")).output(mark("name")).output(literal("));")),
			rule().condition((allTypes("parameter","objectData")), (trigger("assign"))).output(literal("message.setText(new Gson().toJson(")).output(mark("name")).output(literal("));")),
			rule().condition((type("parameter")), (trigger("assign"))).output(literal("message.set")).output(mark("type", "formatted")).output(literal("Property(\"")).output(mark("name")).output(literal("\", ")).output(mark("name")).output(literal(");")),
			rule().condition((attribute("integer")), (trigger("formatted"))).output(literal("Int")),
			rule().condition((type("schemaImport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;"))
		);
	}
}