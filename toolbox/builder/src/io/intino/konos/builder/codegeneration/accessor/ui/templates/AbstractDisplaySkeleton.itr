def type(display)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	$accessorType+import;
	[import $notDecorated+firstUpperCase~Notifier from "../notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "../requesters/$notDecorated+firstUpperCase~Requester";]

	export default class $abstract$name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
		};
		
		render() {
			return [this.$baseMethod](
				[$renderTag]
					[$reference...[$NL]]
					[$component...[$NL]]
				[$renderTag+end]
			);
		}
	}
end

def type(alexandriaBlockImport)
	import { Block as UiBlock } from "alexandria-ui-elements/src/displays/components/Block";
end

def type(alexandriaComponentImport)
	import { $type+firstUpperCase$facet...[] as Ui$type+firstUpperCase$facet...[] } from "alexandria-ui-elements/src/displays/[$componentDirectory/]$type+firstUpperCase$facet...[]";
end

def type(projectComponentImport)
	import { $name+firstUpperCase as Displays$name+firstUpperCase } from "app-elements/src/displays/[$componentDirectory/]$name+firstUpperCase";
end

def type(displayExtends & generic & isExtensionOf)
	Displays~$parent
end

def type(displayExtends & generic)
	Ui~$parent
end

def type(displayExtends)
	Ui~$type+firstUpperCase
end

def type(renderTag & template) trigger(end)
	</UiBlock>
end

def type(renderTag & block) trigger(end)
	</UiBlock>
end

def type(renderTag & item) trigger(end)
	</div>
end

def type(renderTag) trigger(end)
	</React.Fragment>
end

def type(renderTag & template)
	<UiBlock[$properties+common$properties+specific]>
end

def type(renderTag & block)
	<UiBlock[$properties+common$properties+specific]>
end

def type(renderTag & item)
	<div style={this.props.style}>
end

def type(renderTag)
	<React.Fragment>
end

def type(renderTagAttributes & block)
	$properties+common$properties+specific
end

def type(renderTagAttributes)
end

def attribute(baseDisplay) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/Display"
end

def attribute(baseComponent) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/Component"
end

def attribute(component) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/$value+firstUpperCase"
end

def trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/$value+firstUpperCase"
end