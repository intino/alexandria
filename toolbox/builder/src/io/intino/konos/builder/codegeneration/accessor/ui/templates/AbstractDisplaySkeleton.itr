def type(display & accessible)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	[import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";]
	[$displayRegistration+import]
	import $name+SnakeCaseToCamelCase+FirstUpperCase from './$name+SnakeCaseToCamelCase+FirstUpperCase';

	export default class $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
    	};

	}

	[$displayRegistration+declaration]
end

def type(display & noAbstract)
	import React from "react";
	import { withStyles } from '@material-ui/core/styles';
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	import $name+firstUpperCase~Notifier from "alexandria-ui-elements/gen/displays/notifiers/$notifier~Notifier";
	import $name+firstUpperCase~Requester from "alexandria-ui-elements/gen/displays/requesters/$requester~Requester";
    import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';
    import { withSnackbar } from 'notistack';

	const styles = theme => ({});

	class $name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			this.notifier = new $name+firstUpperCase~Notifier(this);
			this.requester = new $name+firstUpperCase~Requester(this);
			[$properties+initialization]
		};

		render() {
		    const display = !this.state.visible ? {display:'none'} : undefined;
		    const className = "layout vertical center-justified" + (this.hiddenClass() !== "" ? " " + this.hiddenClass() : "");
			return [this.$baseMethod](
				[$renderTag]
					[$reference...[$NL]]
					[$component...[$NL]]
				[$renderTag+end]
			);
		}

		$notification...[$NL$NL]
	}

	export default withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase));
    DisplayFactory.register("$name+firstUpperCase", withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase)));
end

def type(display & collection)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	[import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";]
	[$displayRegistration+import]

	export default class $abstract$name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
    	};

	}

	[$displayRegistration+declaration]
end

def type(display)
	import React from "react";
	[$alexandriaBlockImport]
	[$alexandriaTemplateStampImport]
	[$alexandriaDisplayStampImport]
	[$alexandriaComponentImport...[$NL]]
	[$projectComponentImport...[$NL]]
	[$parent+import]
	[import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";]
	[import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";]
	[$displayRegistration+import]

	export default class $abstract$name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			[this.notifier = new $notDecorated+firstUpperCase~Notifier(this);]
			[this.requester = new $notDecorated+firstUpperCase~Requester(this);]
			[$properties+initialization]
    	};

		render() {
		    const display = !this.state.visible ? {display:'none'} : undefined;
		    const className = "layout vertical center-justified" + (this.hiddenClass() !== "" ? " " + this.hiddenClass() : "");
			return [this.$baseMethod](
				[$renderTag]
					[$reference...[$NL]]
					[$component...[$NL]]
				[$renderTag+end]
			);
		}
	}

	[$displayRegistration+declaration]
end

def type(displayRegistration) trigger(import)
    import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';
end

def type(displayRegistration & accessible) trigger(declaration)
    DisplayFactory.register("$name+SnakeCaseToCamelCase+FirstUpperCase~Proxy", $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy);
end

def type(displayRegistration) trigger(declaration)
    DisplayFactory.register("$name+firstUpperCase", $name+firstUpperCase);
end

def type(alexandriaImport)
	import Ui$name+firstUpperCase from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";
end

def type(alexandriaImport & embedded)
	import { Embedded$name+firstUpperCase as Ui$name+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";
end

def type(alexandriaComponentImport)
	import Ui$type+firstUpperCase$facet...[] from "alexandria-ui-elements/[$componentTarget]/displays/[$componentDirectory/]$type+firstUpperCase$facet...[]";
end

def type(projectComponentImport & ownertemplatestamp)
	import Displays$name+firstUpperCase from "$ownerModuleName/gen/displays/templates/$name+firstUpperCase";
end

def type(projectComponentImport)
	import Displays$name+firstUpperCase from "$webModuleName/[$directory]/displays/[$componentDirectory/]$name+firstUpperCase";
end

def type(displayExtends & generic & isExtensionOf)
	Displays~$parent
end

def type(displayExtends & generic)
	Ui~$parent
end

def type(displayExtends)
	Ui~$type+firstUpperCase
end

def type(renderTag & template) trigger(end)
	</UiBlock>
end

def type(renderTag & block) trigger(end)
	</UiBlock>
end

def type(renderTag & item) trigger(end)
	</div>
end

def type(renderTag) trigger(end)
	</React.Fragment>
end

def type(renderTag & template)
	<UiBlock[$properties+common$properties+specific] style={{...this.props.style,...display}}>
end

def type(renderTag & block)
	<UiBlock[$properties+common$properties+specific] style={{...this.props.style,...display}}>
end

def type(renderTag & item)
	<div style={{width:"100%",height:"100%",...this.props.style,...this.style(),...display}} className={className}>
end

def type(renderTag)
	<React.Fragment>
end

def type(renderTagAttributes & block)
	$properties+common$properties+specific
end

def type(renderTagAttributes)
end

def attribute(parent) trigger(import)
	import Displays$parent+firstUpperCase from "../../../src/displays/$parentDirectory/$parent+firstUpperCase";
end

def attribute(accessible) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/ProxyDisplay";
end

def attribute(baseDisplay) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/Display";
end

def attribute(baseComponent) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/Component";
end

def attribute(embeddedComponent) trigger(import)
	import { Embedded$value+firstUpperCase as Ui$value+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$value+firstUpperCase";
end

def attribute(component) trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/$value+firstUpperCase";
end

def trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/$value+firstUpperCase";
end