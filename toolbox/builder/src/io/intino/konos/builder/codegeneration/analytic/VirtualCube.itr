def type(cube & src)
	package $package.analytic.cubes;

	import $package.analytic.axes.*;
	import $package.analytic.Axis;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase(java.util.List<Loader> loaders) {
			super(loaders);
		}

		public static long $name+firstLowerCase~Id($name+FirstUpperCase.Fact fact) {
			return fact.id();//TODO
		}

		[$customDimension+staticMethod...[$NL$NL]]

		[$customFilter+staticMethod...[$NL$NL]]

		[$customIndicator+staticMethod...[$NL$NL]]

		public static long idOf($mainCube+idOf) {
			return $mainCube.id(); //TODO
		}

		public static class Loader extends Abstract$name+FirstUpperCase.Loader {

			public Loader(Datasource datasource[, $split+parameter]) {
				super(datasource[, $split+name]);
			}

			// TODO write here a cache if necessary
		}
	}
end
def trigger(idOf)
	$this+FirstUpperCase.Fact $this+firstLowerCase
end

def type(cube)
	package $package.analytic.cubes;

    import io.intino.alexandria.Timetag;
    import io.intino.alexandria.led.LedReader;
    import io.intino.alexandria.led.LedStream;
    import io.intino.alexandria.led.Schema;
    import io.intino.alexandria.led.buffers.store.ByteStore;
    import io.intino.alexandria.led.util.iterators.MergedIterator;
    import io.intino.alexandria.led.util.iterators.StatefulIterator;

    import $package.analytic.axes.*;
    import $package.analytic.Axis;

	import java.io.File;
    import java.util.*;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.stream.Stream;
    import java.util.stream.StreamSupport;

    import static java.util.Comparator.comparingLong;
    import static java.util.Spliterators.spliteratorUnknownSize;

    public abstract class Abstract$name+FirstUpperCase {

		public static final Fact NULL_FACT = new NullFact();

		private final List<? extends Loader> loaders;
		private final List<Predicate<Fact>> filterList = new ArrayList<>();
		private final List<Axis> axes = new ArrayList<>();
		private final Map<Axis, Set<Axis.Component>> components = new HashMap<>();
		private final List<Function<Fact, Axis.Component>> groupByList = new ArrayList<>();
		private Aggregation$[] result;

    	public Abstract$name+FirstUpperCase(List<? extends Loader> loaders) {
    		this.loaders = loaders;
    	}

    	[$dimension+method...[$NL$NL]]

    	[$customFilter+method...[$NL$NL]]

		public Abstract$name+firstUpperCase execute() {
			result = new Aggregation$[resultsSize()];
			results().forEach(this::append);
			fillCategories();
			calculateTotals();

			return this;
		}

    	public Iterator<Fact> detail() {
			MergedIterator<Fact> iterator = new MergedIterator<>(loaders.stream().map(Iterable::iterator), comparingLong(Fact::id));
			return StreamSupport.stream(spliteratorUnknownSize(iterator, Spliterator.SORTED), false).filter(this::check).iterator();
		}

		public Aggregation aggregation(List<Axis.Component> components) {
			return result$[indexOf(components.toArray(new Axis.Component$[0]))];
		}

		private void fillCategories() {
			for (Aggregation aggregation : result) {
				if (aggregation == null) continue;
				for (int i = 0; i < aggregation.components.length; i++)
					components.get(axes.get(i)).add(aggregation.components$[i]);
			}
		}

		private void calculateTotals() {
			for (Loader loader : loaders) {
				if(loader.axes().size() != axes.size()) return;
				for (int i = 0; i < loader.totals().length; i++) {
					if (result$[i] == null) continue;
					result$[i].append(loader.totals()$[i]);
				}
			}
		}

		private int resultsSize() {
			int accumulator = 1;
			for (Axis axis : axes) accumulator *= axis.size() + 1;
			return accumulator;
		}

		private Stream<Aggregation$[]> results() {
			return loaders.parallelStream().map(this::results);
		}

		private Aggregation$[] results(Iterable<Fact> facts) {
			Aggregation$[] result = new Aggregation$[resultsSize()];
			for (Fact fact : facts) {
				if (!check(fact)) continue;
				Axis.Component$[] components = componentsOf(fact);
				int index = indexOf(components);
				if (result$[index] == null) result$[index] = new Aggregation(components);
				result$[index].append(fact);
			}
			return result;
		}

		private synchronized void append(Aggregation$[] results) {
			for (int i = 0; i < results.length; i++) {
				if (results$[i] == null) continue;
				if (result$[i] == null) result$[i] = results$[i];
				else result$[i].append(results$[i]);
			}
		}

		private int indexOf(Axis.Component$[] components) {
			int index = 0;
			for (int i = 0; i < components.length; i++) {
				index *= axes.get(i).size();
				index += components$[i].index();
			}
			return index;
		}

		private boolean check(Fact item) {
			for (Predicate<Fact> filter : filterList) if (!filter.test(item)) return false;
			return true;
		}

		private Axis.Component$[] componentsOf(Fact item) {
			Axis.Component$[] components = new Axis.Component$[groupByList.size()];
			for (int i = 0; i < components.length; i++) components$[i] = groupByList.get(i).apply(item);
			return components;
		}

		public static class Fact {

			[$cube+fieldFact...[$NL]]

			public Fact($cube+factParameter...[, ]) {
				$cube+assignFact...[$NL]
			}

			public long id() {
				return $mainCube+firstLowerCase.id();
			}

			[$column+factGetter...[$NL$NL]]

			public int size() {
				return $cube+size...[ + ];
			}

		    @Override
		    public boolean equals(Object o) {
		    	if(o == null || o.getClass() != getClass()) return false;
		    	final Fact other = (Fact) o;
		    	return Objects.equals($mainCube+firstLowerCase, other.$mainCube+firstLowerCase);
		    }

		    @Override
		    public int hashCode() {
		    	return $mainCube+firstLowerCase.hashCode();
		    }

		    @Override
		    public String toString() {
		    	return "$name~Fact{" +
		    	        "$mainCube=" + $mainCube+firstLowerCase +
		    	        ", $joinCube=" + $joinCube+firstLowerCase +
		    	        "}";
		    }
		}

		public static class NullFact extends Fact {

			private NullFact() {
				super($cube+nullFactParameter...[, ]);
			}

			[$column+nullgetter...[$NL$NL]]

			@Override
			public long id() {
				return 0;
			}
		}

		public static class Aggregation {

			private final Axis.Component$[] components;
			private long aggregationCount = 0;
			[$index+field]
			[$indicator+field...[$NL]]
			private long total$name+FirstUpperCase;

			public Aggregation(Axis.Component$[] components) {
				this.components = components;
			}

			public void append(Fact fact) {
				[$indicator+sum...[$NL]]
				[$index+append]
				aggregationCount++;
			}

			public void append(Aggregation aggregation) {
				[$indicator+sumAggregation...[$NL]]
				[$index+append2]
			}

			public Aggregation append(long ids) {
				this.total$name+FirstUpperCase += ids;
				return this;
			}

			public long total$name+FirstUpperCase() {
				return total$name+FirstUpperCase;
			}

			$index+getter

			public Axis.Component$[] components() {
				return components;
			}

			[$indicator+getter...[$NL$NL]]
		}

    	public static class Loader implements Iterable<Fact> {

			private final StatefulIterator<$joinCube+FirstUpperCase.Fact> ids;
			private final List<Axis> axes = new ArrayList<>();
			private long$[] totals;
			private final List<Predicate<$joinCube+FirstUpperCase.Fact>> filters = new ArrayList<>();
			private final List<Function<$joinCube+FirstUpperCase.Fact, Axis.Component>> groupsBy = new ArrayList<>();
			protected final Datasource datasource;
			[$split+field]

			public Loader(Datasource datasource[, $split+parameter]) {
				this.datasource = datasource;
				[$split+assign]
				this.ids = StatefulIterator.of(new $joinCube+FirstUpperCase.Loader(new $joinCube+FirstUpperCase.Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)[, $split+name]).iterator());
			}

			@Override
			public Iterator<Fact> iterator() {
				StatefulIterator<$mainCube+FirstUpperCase.Fact> facts = StatefulIterator.of(new $mainCube+FirstUpperCase.Loader(new $mainCube+FirstUpperCase.Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)[, $split+name]).iterator());
				process(ids.current());
				ids.next();
				return StreamSupport.stream(Spliterators.spliteratorUnknownSize(facts, Spliterator.SORTED), false)
						.map(f -> {
							long id = $name+FirstUpperCase.idOf(facts.current());
							while (ids.current() != null && ids.current().id() < id) {
								ids.next();
								process(ids.current());
							}
							if (!facts.hasNext()) end();
							return new Fact(f, ids.current() != null && ids.current().id() == id ?
									ids.current() : Abstract$joinCube+FirstUpperCase.NULL_FACT);
						})
						.iterator();
			}

			private void end() {
				while (ids.hasNext()) {
					ids.next();
					process(ids.current());
				}
			}

			private int totalsSize() {
				int accumulator = 1;
				for (Axis axis : axes) accumulator *= axis.size();
				return accumulator;
			}

			private void process($joinCube+FirstUpperCase.Fact fact) {
				if (fact == null) return;
				if (totals == null) totals = new long$[totalsSize()];
				for (Predicate<$joinCube+FirstUpperCase.Fact> filter : filters) if (!filter.test(fact)) return;
				Axis.Component$[] components = componentsOf(fact);
				totals$[indexOf(components)] += 1;
			}

			private int indexOf(Axis.Component$[] components) {
				int index = 0;
				for (int i = 0; i < components.length; i++) {
					i *= axes.get(i).size();
					i += components$[i].index();
				}
				return index;
			}

			private Axis.Component$[] componentsOf($joinCube+FirstUpperCase.Fact item) {
				Axis.Component$[] components = new Axis.Component$[axes.size()];
				for (int i = 0; i < components.length; i++) components$[i] = groupsBy.get(i).apply(item);
				return components;
			}

			private long totalOf(List<Axis.Component> categories) {
				return totals$[indexOf(categories.toArray(new Axis.Component$[0]))];
			}

			private void filter(Predicate<$joinCube+FirstUpperCase.Fact> filter) {
				if (filter == null) return;
				filters.add(filter);
			}

			private void by(Axis axis, Function<$joinCube+FirstUpperCase.Fact, Axis.Component> dimension) {
				axes.add(axis);
				if (dimension == null) return;
				groupsBy.add(dimension);
			}

			public List<Axis> axes() {
				return axes;
			}

			public long$[] totals() {
				return totals;
			}

			public static class Datasource {

				private final File root;
				private final Timetag from;
				private final Timetag to;

				public Datasource(File root, Timetag from, Timetag to) {
					this.root = root;
					this.from = from;
					this.to = to;
				}

				public Timetag from() {
					return from;
				}

				public Timetag to() {
					return to;
				}
			}
		}
    }
end


def type(index & total) trigger(field)
	private long aggregationTotal = 0;
	private long last = 0;
end

def type(index & total) trigger(append)
	if (last != fact.id()) {
		aggregationTotal++;
		last = fact.id();
	}
end

def type(index & total) trigger(append2)
	aggregationTotal += aggregation.aggregationTotal;
end

def type(index & total) trigger(getter)
	public long aggregationTotal() {
		return aggregationTotal;
	}
end

def type(index) trigger(field)
	private final List<Long> ids = new java.util.ArrayList<>();
end

def type(index) trigger(append)
	if (ids.isEmpty() || ids.get(ids.size() - 1) != fact.id()) ids.add(fact.id());
end

def type(index) trigger(append2)
	ids.addAll(aggregation.ids);
end

def type(index) trigger(getter)
	public List<Long> ids() {
		return ids;
	}
end

def trigger(assignFact)
	this.$this+FirstLowerCase = $this+FirstLowerCase;
end

def trigger(fieldFact)
	private final $this+FirstUpperCase.Fact $this+FirstLowerCase;
end

def trigger(factParameter)
	$this+FirstUpperCase.Fact $this+FirstLowerCase
end

def trigger(nullFactParameter)
	Abstract$this+FirstUpperCase.NULL_FACT
end

def trigger(size)
	$this+FirstLowerCase.size()
end

def trigger(nbits)
	NBits
end

def type(customFilter) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase() {
		filterList.add(v -> $cube+firstUpperCase.$name+firstLowerCase~Filter(v));
		return this;
	}
end

def type(customFilter) trigger(staticMethod)
	public static boolean $name+firstLowerCase~Filter(Fact fact) {
		return true;
	}
end

def type(dimension) trigger(staticMethod)
	public static Predicate<Fact> $name+firstLowerCase~Predicate(Set<$name+FirstUpperCase.Component> $name+firstLowerCase) {
		return v -> false; //TODO
	}

	public static Function<Fact, Axis.Component> $name+firstLowerCase~Function() {
		return v -> null; //TODO
	}
end

def type(dimension & categorical) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase) {
		filterList.add(v -> $name+firstLowerCase~Filter(v, $axis+snakeCaseToCamelCase+firstLowerCase));
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+firstUpperCase() {
		axes.add($axis+snakeCaseToCamelCase+firstUpperCase.instance());
		components.put($axis+snakeCaseToCamelCase+firstUpperCase.instance(), new HashSet<>());
		groupByList.add(v -> $name+firstLowerCase~Function(v));
		return this;
	}

	public static boolean $name+firstLowerCase~Filter(Fact fact, Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase) {
		return $axis+snakeCaseToCamelCase+firstLowerCase.contains($name+firstLowerCase~Function(fact));
	}

	public static Axis.Component $name+firstLowerCase~Function(Fact fact) {
		return fact.$source+snakeCaseToCamelCase+firstLowerCase()[.$child+snakeCaseToCamelCase+firstLowerCase];
	}
end

def type(dimension & continuous) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Range> $axis+snakeCaseToCamelCase+firstLowerCase) {
		filterList.add(v -> $name+firstLowerCase~Filter(v, $axis+snakeCaseToCamelCase+firstLowerCase));
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+firstUpperCase() {
		axes.add($axis+snakeCaseToCamelCase+firstUpperCase.instance());
		components.put($axis+snakeCaseToCamelCase+firstUpperCase.instance(), new HashSet<>());
		groupByList.add(v -> $name+firstLowerCase~Function(v));
		return this;
	}

	public static boolean $name+firstLowerCase~Filter(Fact fact, Set<$axis+snakeCaseToCamelCase+firstUpperCase.Range> $axis+snakeCaseToCamelCase+firstLowerCase) {
		return $axis+snakeCaseToCamelCase+firstLowerCase.contains($name+firstLowerCase~Function(fact));
	}

	private static Axis.Component $name+firstLowerCase~Function(Fact fact) {
		return $axis+snakeCaseToCamelCase+firstUpperCase.rangeOf(fact.$source+firstLowerCase());
	}
end


def type(indicator) trigger(sum)
	$name+firstLowerCase += fact.$source+firstLowerCase();
end

def type(indicator) trigger(sumAggregation)
	$name+firstLowerCase += aggregation.$name+firstLowerCase;
end

def type(indicator & average) trigger(field)
	double $name+firstLowerCase;
end

def type(indicator & sum) trigger(field)
	long $name+firstLowerCase;
end

def type(indicator & average) trigger(getter)
	public double $name+firstLowerCase() {
		return $name+firstLowerCase / (double) $index;
	}
end

def type(total) trigger(index)
	aggregationTotal
end

def type(index) trigger(index)
	ids.size()
end

def type(indicator & sum) trigger(getter)
	public long $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def type(indicator & average) trigger(staticMethod)
	public static double $name(Fact fact) {
		return 0.;
	}
end

def type(indicator & sum) trigger(staticMethod)
	public static long $name(Fact fact) {
		return 0;
	}
end

def type(split) trigger(parameter)
	String $name+firstLowerCase
end

def type(split) trigger(setParameter)
	java.util.Set<String> $name+firstLowerCase
end

def type(split) trigger(assign)
	this.$name+firstLowerCase = $name+firstLowerCase;
end

def type(split) trigger(name)
	$name+firstLowerCase
end

def type(split) trigger(nameUpper)
	$name+firstUpperCase
end

def type(split) trigger(field)
	protected final String $name+firstLowerCase;
end

def type(split) trigger(method)
	private static Set<String> all$name+FirstUpperCase() {
		return java.util.Set.of($value+quoted...[, ]);
	}
end


def trigger(dimension)
	public static Predicate<$cube+FirstUpperCase.Fact> $axis+snakeCaseToCamelCase+firstLowerCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase~List) {
		return r -> $axis+snakeCaseToCamelCase+firstLowerCase~List.contains(r.$axis+snakeCaseToCamelCase+firstLowerCase());
	}

	public static Function<$cube+FirstUpperCase.Fact, String> $axis+snakeCaseToCamelCase+firstLowerCase() {
		return r -> r.$axis+snakeCaseToCamelCase+firstLowerCase().id();
	}
end

def type(column & int & unsigned) trigger(factGetter)
	public long $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & int) trigger(factGetter)
	public int $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & float) trigger(factGetter)
	public float $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & double) trigger(factGetter)
	public double $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(id | long) trigger(factGetter)
	public long $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(byte & unsigned) trigger(factGetter)
	public short $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(byte) trigger(factGetter)
	public byte $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(short & unsigned) trigger(factGetter)
	public int $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(short) trigger(factGetter)
	public short $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) type(boolean) trigger(factGetter)
	public boolean $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & categorical) trigger(factGetter)
	public $type+firstUpperCase.Component $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) trigger(factGetter)
	public $type+firstUpperCase $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & virtual) trigger(factGetter)
	public $type $name+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column & categorical) trigger(nullGetter)
	public $type+firstUpperCase.Component $name+firstLowerCase() {
		return $type+firstUpperCase.NA;
	}
end

def type(column & int & unsigned) trigger(nullGetter)
	public long $name+firstLowerCase() {
		return 0;
	}
end

def type(column & int) trigger(nullGetter)
	public int $name+firstLowerCase() {
		return 0;
	}
end

def type(column) type(id | long) trigger(nullGetter)
	public long $name+firstLowerCase() {
		return 0L;
	}
end

def type(column & short & unsigned) trigger(nullGetter)
	public int $name+firstLowerCase() {
		return 0;
	}
end

def type(column & short) trigger(nullGetter)
	public short $name+firstLowerCase() {
		return 0;
	}
end

def type(column & byte & unsigned) trigger(nullGetter)
	public short $name+firstLowerCase() {
		return 0;
	}
end

def type(column & byte) trigger(nullGetter)
	public byte $name+firstLowerCase() {
		return 0;
	}
end

def type(column & float) trigger(nullGetter)
	public float $name+firstLowerCase() {
		return 0.0f;
	}
end

def type(column & double) trigger(nullGetter)
	public double $name+firstLowerCase() {
		return 0.0f;
	}
end

def type(column & boolean) trigger(nullGetter)
	public boolean $name+firstLowerCase() {
		return false;
	}
end

def type(column & boolean) trigger(nullGetter)
	public boolean $name+firstLowerCase() {
		return false;
	}
end

def type(column & boolean) trigger(nullGetter)
	public boolean $name+firstLowerCase() {
		return false;
	}
end