package io.intino.konos.builder.codegeneration.services.ui.display;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class DisplaysTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("displays"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.ui.displays.AlexandriaDisplay;\nimport io.intino.alexandria.ui.displays.*;\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.InvocationTargetException;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Displays {\n\tprivate static Map<String, ElementDisplayBuilder> displayMap = new HashMap<>();\n\n\tstatic {\n\t\t{\n\t\t\t")).output(mark("display").multiple("\n")).output(literal("\n\t\t\t")).output(mark("dialog").multiple("\n")).output(literal("\n\t\t}\n\t}\n\n\tpublic static AlexandriaElementDisplay displayFor(")).output(mark("box", "firstUpperCase")).output(literal("Box box, String name) {\n\t\tif (!displayMap.containsKey(name)) return null;\n\t\treturn displayMap.get(name).build(box);\n\t}\n\n\tpublic static AlexandriaElementDisplay displayFor(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Element element) {\n\t\tif (!displayMap.containsKey(element.name())) return defaultElement(box, element);\n\t\treturn displayMap.get(element.name()).build(box);\n\t}\n\n\tpublic static <T extends io.intino.alexandria.ui.model.Element> T elementFor(")).output(mark("box", "firstUpperCase")).output(literal("Box box, Class<T> tClass, String name) {\n\t\tif (!displayMap.containsKey(name)) return null;\n\t\treturn (T) displayMap.get(name).build(box).element();\n\t}\n\n\tpublic static Class<? extends AlexandriaElementDisplay> displayTypeFor(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Element element) {\n\t\tif (!displayMap.containsKey(element.name())) return defaultElementType(box, element);\n\t\treturn displayMap.get(element.name()).build(box).getClass();\n\t}\n\n\tprivate static Class<? extends AlexandriaElementDisplay> defaultElementType(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Element element) {\n\t\tif (element instanceof io.intino.alexandria.ui.model.Panel) return AlexandriaPanel.class;\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.TemporalCatalog)\n\t\t\treturn ((io.intino.alexandria.ui.model.TemporalCatalog) element).type() == io.intino.alexandria.ui.model.TemporalCatalog.Type.Range ? AlexandriaTemporalRangeCatalog.class : AlexandriaTemporalTimeCatalog.class;\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.Catalog)\n\t\t\treturn AlexandriaCatalog.class;\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.panel.Desktop)\n\t\t\treturn AlexandriaDesktop.class;\n\n\t\treturn null;\n\t}\n\n\tprivate static AlexandriaElementDisplay defaultElement(")).output(mark("box", "firstUpperCase")).output(literal("Box box, io.intino.alexandria.ui.model.Element element) {\n\t\tif (element instanceof io.intino.alexandria.ui.model.Panel) return new AlexandriaPanel(box);\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.TemporalCatalog)\n\t\t\treturn ((io.intino.alexandria.ui.model.TemporalCatalog) element).type() == io.intino.alexandria.ui.model.TemporalCatalog.Type.Range ? new AlexandriaTemporalRangeCatalog(box) : new AlexandriaTemporalTimeCatalog(box);\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.Catalog)\n\t\t\treturn new AlexandriaCatalog(box);\n\n\t\tif (element instanceof io.intino.alexandria.ui.model.panel.Desktop)\n\t\t\treturn new AlexandriaDesktop(box);\n\n\t\treturn null;\n\t}\n\n/*\t\tprivate void refreshCatalog(")).output(mark("box", "firstUpperCase")).output(literal("Box box, String catalog, Item... items) {\n\t\tuiSouls.values().stream().map(Soul::getAll).flatMap(Collection::stream)\n\t\t\t\t.filter(d -> d instanceof AlexandriaAbstractCatalog && ((AlexandriaAbstractCatalog) d)\n\t\t\t\t\t\t.isFor(catalog)).forEach(d -> {\n\t\t\tAlexandriaAbstractCatalog display = (AlexandriaAbstractCatalog) d;\n\t\t\tdisplay.dirty(true);\n\t\t\tif (categorizationsHaveChanges || items.length == 0)\n\t\t\t\tdisplay.refresh();\n\t\t\telse\n\t\t\t\tdisplay.refresh(items);\n\t\t});\n\t}\n*/\n\tprivate interface ElementDisplayBuilder {\n\t\tAlexandriaElementDisplay build(")).output(mark("box", "firstUpperCase")).output(literal("Box box);\n\t}\n}")),
				rule().condition((trigger("display"))).output(literal("displayMap.put(\"")).output(mark("name")).output(literal("\", (box) -> new ")).output(mark("name", "FirstUpperCase")).output(literal("(box));")),
				rule().condition((trigger("dialog"))).output(literal("dialogMap.put(\"")).output(mark("name")).output(literal("\", (box) -> new ")).output(mark("name", "FirstUpperCase")).output(literal("(box));"))
		);
	}
}