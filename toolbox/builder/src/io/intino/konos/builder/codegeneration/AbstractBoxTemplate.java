package io.intino.konos.builder.codegeneration;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractBoxTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("box"))).output(literal("package ")).output(mark("package")).output(literal(";\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\nimport java.util.UUID;\n")).output(expression().output(literal("\n")).output(literal("import java.util.HashMap;")).output(literal("\n")).output(literal("import java.util.Map;")).output(mark("hasUi", "hideUi"))).output(literal("\n\nimport io.intino.alexandria.logger.Logger;\nimport java.util.logging.ConsoleHandler;\nimport java.util.logging.Level;\n\n")).output(expression().output(mark("datahub", "import"))).output(literal("\n")).output(expression().output(literal("import io.intino.alexandria.rest.AlexandriaSpark;")).output(mark("hasREST"))).output(literal("\n")).output(expression().output(literal("import io.intino.alexandria.ui.displays.Soul;")).output(mark("hasUi", "hideUi"))).output(literal("\n\npublic abstract class AbstractBox extends ")).output(expression().output(mark("hasUi", "uiBox")).next(expression().output(literal("io.intino.alexandria.core.Box")))).output(literal(" {\n\tprotected ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Configuration configuration;\n\t")).output(expression().output(mark("service", "field").multiple("\n"))).output(literal("\n\t")).output(expression().output(mark("dataHub", "field"))).output(literal("\n\t")).output(expression().output(mark("task", "field"))).output(literal("\n    ")).output(expression().output(literal("protected Map<String, Soul> uiSouls = new java.util.HashMap<>();")).output(mark("hasUi", "hideUi"))).output(literal("\n    ")).output(expression().output(literal("private java.util.List<io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed> soulsClosedListeners = new java.util.ArrayList<>();")).output(mark("hasUi", "hideUi"))).output(literal("\n\t")).output(expression().output(literal("private io.intino.alexandria.ui.services.AuthService authService;")).output(mark("hasUi", "hideUi"))).output(literal("\n\t")).output(expression().output(literal("private io.intino.alexandria.ui.services.EditorService editorService;")).output(mark("hasUi", "hideUi"))).output(literal("\n\n\tpublic AbstractBox(String[] args) {\n\t\tthis(new ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Configuration(args));\n\t}\n\t\n\tpublic AbstractBox(")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Configuration configuration) {\n\t\t")).output(expression().output(literal("owner = new ")).output(mark("parent")).output(literal("Box(configuration);"))).output(literal("\n\t\tthis.configuration = configuration;\n\t\tinitJavaLogger();\n\t\t")).output(expression().output(mark("service", "setup").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(mark("dataHub", "setup"))).output(literal("\n\t}\n\n\tpublic ")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("Configuration configuration() {\n\t\treturn configuration;\n\t}\n\n\t@Override\n\tpublic io.intino.alexandria.core.Box put(Object o) {\n\t\t")).output(expression().output(mark("hasParent")).output(literal("owner.put(o);"))).output(literal("\n\t\treturn this;\n\t}\n\n\tpublic io.intino.alexandria.core.Box open() {\n\t\tif (owner != null) owner.open();\n\t\tinitUI();\n\t\tinitRESTServices();\n\t\tinitJMXServices();\n\t\tinitJMSServices();\n\t\tinitDataHub();\n\t\tinitTasks();\n\t\tinitSlackBots();\n\t\treturn this;\n\t}\n\n\tpublic void close() {\n\t\tif (owner != null) owner.close();\n\t\t")).output(expression().output(mark("spark").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(mark("service", "quit").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(mark("dataHub", "quit"))).output(literal("\n\t}\n\n\t")).output(expression().output(mark("hasUi", "registerSoul"))).output(literal("\n\n\t")).output(expression().output(mark("service", "getter").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(mark("hasUi", "authService"))).output(literal("\n\n\t")).output(expression().output(mark("hasUi", "editorService"))).output(literal("\n\n\t")).output(expression().output(mark("dataHub", "getter"))).output(literal("\n\n\t")).output(expression().output(mark("datamart", "getter"))).output(literal("\n\n\t")).output(expression().output(mark("task", "getter").multiple("\n\n"))).output(literal("\n\n\n\tprivate void initRESTServices() {\n\t\t")).output(mark("service", "rest").multiple("\n")).output(literal("\n\t}\n\n\tprivate void initJMSServices() {\n\t\t")).output(expression().output(mark("jms")).output(literal("javax.jms.Connection connection;"))).output(literal("\n\t\t")).output(mark("service", "jms").multiple("\n")).output(literal("\n\t}\n\n\tprivate void initJMXServices() {\n\t\t")).output(mark("service", "jmx").multiple("\n")).output(literal("\n\t}\n\n\tprivate void initSlackBots() {\n\t\t")).output(mark("service", "slack").multiple("\n")).output(literal("\n\t}\n\n\tprivate void initUI() {\n\t\t")).output(mark("service", "ui").multiple("\n")).output(literal("\n\t}\n\n\tprivate void initDataHub() {\n\t\t")).output(expression().output(mark("dataHub", "init"))).output(literal("\n\t}\n\n\tprivate void initTasks() {\n\t\t")).output(expression().output(mark("task", "init").multiple("\n"))).output(literal("\n\t}\n\n\tprivate void initJavaLogger() {\n\t\tfinal java.util.logging.Logger Logger = java.util.logging.Logger.getGlobal();\n\t\tfinal ConsoleHandler handler = new ConsoleHandler();\n\t\thandler.setLevel(Level.INFO);\n\t\thandler.setFormatter(new io.intino.alexandria.logger.Formatter());\n\t\tLogger.setUseParentHandlers(false);\n\t\tLogger.addHandler(handler);\n\t}\n\n\tprivate java.net.URL url(String url) {\n\t\ttry {\n\t\t\treturn new java.net.URL(url);\n\t\t} catch (java.net.MalformedURLException e) {\n\t\t\treturn null;\n\t\t}\n\t}\n}")),
			rule().condition((trigger("uibox"))).output(literal("io.intino.alexandria.ui.AlexandriaUiBox")),
			rule().condition((allTypes("service","ui")), (trigger("setup"))).output(literal("this.authService = ")).output(expression().output(literal("this.authService(")).output(mark("authentication")).output(literal(")")).next(expression().output(literal("null")))).output(literal(";\nthis.editorService = ")).output(expression().output(literal("this.editorService(")).output(mark("edition")).output(literal(")")).next(expression().output(literal("null")))).output(literal(";\n")).output(expression().output(literal("if(")).output(mark("parameter")).output(literal(" != null && !")).output(mark("parameter")).output(literal(".isEmpty())"))).output(expression().output(literal("io.intino.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt(")).output(mark("parameter")).output(literal("), \"www/\")"))).output(literal(";\nio.intino.alexandria.rest.AlexandriaSparkBuilder.setUI(true);\nio.intino.alexandria.rest.AlexandriaSparkBuilder.addParameters(this.authService, this.editorService);")),
			rule().condition((allTypes("service","rest")), (trigger("setup"))).output(literal("io.intino.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt(")).output(mark("parameter")).output(literal("), \"www/\");")),
			rule().condition((type("datahub")), (trigger("setup"))).output(literal("this.dataHub = new DataHub(new Configuration(")).output(mark("workspace", "parameter")).output(literal(",\n\t")).output(expression().output(mark("broker")).next(expression().output(literal("null")))).output(literal(",\n\t")).output(expression().output(mark("datasource"))).output(literal(",\n\t")).output(expression().output(mark("tanks"))).output(literal("));")),
			rule().condition((type("remote")), (trigger("datasource"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Remote(")).output(mark("messageHub")).output(literal(")")),
			rule().condition((type("standalone")), (trigger("datasource"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.StandAlone(")).output(mark("path", "parameter")).output(literal(", ")).output(expression().output(mark("scale")).next(expression().output(literal("io.intino.alexandria.Scale.Day")))).output(literal(", ")).output(expression().output(mark("sealing")).next(expression().output(literal("null")))).output(literal(")")),
			rule().condition((type("local")), (trigger("datasource"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Local(")).output(mark("path", "parameter")).output(literal(")")),
			rule().condition((type("mirror")), (trigger("datasource"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Mirror(")).output(mark("originUrl", "parameter")).output(literal(", ")).output(mark("originPath", "parameter")).output(literal(", ")).output(mark("destinationPath", "parameter")).output(literal(", \"")).output(mark("startingTimetag")).output(literal("\", ")).output(mark("user", "parameter")).output(literal(", ")).output(mark("password", "parameter")).output(literal(",")).output(expression().output(mark("messageHub")).next(expression().output(literal("null")))).output(literal(")")),
			rule().condition((trigger("broker"))).output(literal("new io.intino.alexandria.datahub.model.Broker(")).output(mark("port", "parameter")).output(literal(", ")).output(mark("mqtt_port", "parameter")).output(literal(", ")).output(mark("connectorId", "parameter")).output(literal(",\n\tjava.util.Arrays.asList(")).output(mark("user").multiple(", ")).output(literal("),\n\tjava.util.Arrays.asList(")).output(mark("pipe").multiple(", ")).output(literal("))")),
			rule().condition((trigger("tanks"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Tanks(java.util.Arrays.asList(")).output(mark("split").multiple(", ")).output(literal("),\n\tjava.util.Arrays.asList(")).output(mark("tank").multiple(",\n ")).output(literal("))")),
			rule().condition((trigger("split"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Tanks.Split(\"")).output(mark("name")).output(literal("\", java.util.Arrays.asList(")).output(mark("value", "quoted").multiple(", ")).output(literal("))")),
			rule().condition((trigger("tank"))).output(literal("new io.intino.alexandria.datahub.model.Configuration.Tanks.Tank(\"")).output(mark("name")).output(literal("\", Configuration.Tanks.Tank.Type.")).output(mark("type", "firstUpperCase")).output(literal(", ")).output(expression().output(literal("\"")).output(mark("splitName")).output(literal("\"")).next(expression().output(literal("null")))).output(literal(")")),
			rule().condition((trigger("user"))).output(literal("new io.intino.alexandria.datahub.model.Broker.User(")).output(mark("name", "parameter")).output(literal(", ")).output(mark("password", "parameter")).output(literal(")")),
			rule().condition((trigger("messagehub"))).output(literal("new ")).output(mark("package")).output(literal(".datahub.MessageHub(this);")),
			rule().condition((trigger("pipe"))).output(literal("new io.intino.alexandria.datahub.model.Broker.Pipe(\"")).output(mark("origin")).output(literal("\", \"")).output(mark("destination")).output(literal("\")")),
			rule().condition((trigger("scale"))).output(literal("io.intino.alexandria.Scale.")).output(mark("", "FirstUpperCase")),
			rule().condition((allTypes("service","jmx")), (trigger("jmx"))).output(literal("this.")).output(mark("name", "SnakeCaseToCamelCase", "FirstLowerCase")).output(literal(" = new JMX")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("().init(((")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this));\nLogger.info(\"JMX service ")).output(mark("name")).output(literal(": started!\");")),
			rule().condition((allTypes("service","slack")), (trigger("slack"))).output(literal("if (")).output(mark("parameter")).output(literal(" == null || ")).output(mark("parameter")).output(literal(".isEmpty()) return;\nthis.")).output(mark("name", "SnakeCaseToCamelCase", "FirstLowerCase")).output(literal(" = new ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("SlackBot((")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this, ")).output(mark("parameter")).output(literal(");\nLogger.info(\"Slack service ")).output(mark("name")).output(literal(": started!\");")),
			rule().condition((allTypes("service","rest")), (trigger("rest"))).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Service.setup(io.intino.alexandria.rest.AlexandriaSparkBuilder.instance(), (")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this).start();\nLogger.info(\"REST service ")).output(mark("name")).output(literal(": started!\");")),
			rule().condition((allTypes("service","ui")), (trigger("ui"))).output(expression().output(literal("if (")).output(mark("parameter")).output(literal(" == null || !io.intino.alexandria.rest.AlexandriaSparkBuilder.isUI()) return;"))).output(literal("\nio.intino.alexandria.ui.UIAlexandriaSpark sparkInstance = (io.intino.alexandria.ui.UIAlexandriaSpark) io.intino.alexandria.rest.AlexandriaSparkBuilder.instance();\n")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Service.init(sparkInstance, (")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this);\nio.intino.alexandria.ui.UiElementsService.initDisplays(sparkInstance);\n")).output(mark("use").multiple("\n")).output(literal("\nsparkInstance.start();\nLogger.info(\"UI ")).output(mark("name")).output(literal(": started!\");")),
			rule().condition((trigger("use"))).output(mark("")).output(literal(".initDisplays(sparkInstance);")),
			rule().condition((allTypes("service","jms")), (trigger("init"))).output(literal("try {\n\tconnection = new org.apache.activemq.ActiveMQConnectionFactory(")).output(mark("parameter").multiple(", ")).output(literal(").createConnection();\n\tjava.lang.Thread thread = new java.lang.Thread(() -> {\n\t\ttry {\n\t\t\tconnection.start();\n\t\t\tthis.")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" = new ")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("Service(connection, (")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this);\n\t\t\tLogger.info(\"JMS service ")).output(mark("name")).output(literal(": started!\");\n\t\t} catch (javax.jms.JMSException e) {\n\t\t\tLogger.error(e.getMessage());\n\t\t}\n\t}, \"jms init\");\n\tthread.start();\n\tthread.join(10000);\n} catch (javax.jms.JMSException | InterruptedException e) {\n\tLogger.error(e.getMessage());\n}")),
			rule().condition((type("dataHub")), (trigger("import"))).output(literal("import io.intino.alexandria.datahub.DataHub;\nimport io.intino.alexandria.datahub.model.Configuration;")),
			rule().condition((type("dataHub")), (trigger("init"))).output(literal("this.dataHub.start();\n")).output(expression().output(literal("registerFeeders();")).output(mark("feeder", "hide"))).output(literal("\nLogger.info(\"Ness connection: started!\");")),
			rule().condition((allTypes("service","jmx")), (trigger("field"))).output(literal("private io.intino.alexandria.jmx.JMXServer ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(";")),
			rule().condition((allTypes("service","slack")), (trigger("field"))).output(literal("private io.intino.alexandria.slack.Bot ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(";")),
			rule().condition((allTypes("service","jms")), (trigger("field"))).output(literal("private ")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("Service ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(";")),
			rule().condition((type("task")), (trigger("field"))).output(literal("private io.intino.alexandria.scheduler.AlexandriaScheduler scheduler = new io.intino.alexandria.scheduler.AlexandriaScheduler();")),
			rule().condition((type("dataHub")), (trigger("field"))).output(literal("private io.intino.alexandria.datahub.DataHub dataHub;")),
			rule().condition((allTypes("service","jms")), (trigger("getter"))).output(literal("public ")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("Service ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal("() {\n\treturn ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(";\n}")),
			rule().condition((type("dataHub")), (trigger("getter"))).output(literal("public io.intino.alexandria.datahub.DataHub dataHub() {\n\treturn this.dataHub;\n}\n\n")).output(expression().output(literal("public io.intino.alexandria.core.Feeders feeders() {")).output(literal("\n")).output(literal("\treturn io.intino.alexandria.core.Feeders.get();")).output(literal("\n")).output(literal("}")).output(literal("\n")).output(literal("\n")).output(literal("private void registerFeeders() {")).output(literal("\n")).output(literal("\t")).output(mark("feeder").multiple("\n")).output(literal("\n")).output(literal("}"))),
			rule().condition((type("datamart")), (trigger("getter"))).output(literal("public java.io.File ")).output(mark("name", "firstLowerCase")).output(literal("Datamart() {\n\treturn new java.io.File(this.configuration().get(\"")).output(mark("path", "parameter")).output(literal("\"));\n}")),
			rule().condition((trigger("feeder"))).output(literal("io.intino.alexandria.core.Feeders.get().register(new ")).output(mark("package", "validPackage")).output(literal(".datalake.feeders.")).output(mark("name", "FirstUpperCase")).output(literal("((")).output(mark("box", "FirstUpperCase")).output(literal("Box) this));")),
			rule().condition((allTypes("service","slack")), (trigger("getter"))).output(literal("public ")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("SlackBot ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal("() {\n\treturn (")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("SlackBot) ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(";\n}")),
			rule().condition((type("service")), (trigger("getter"))),
			rule().condition((trigger("spark"))).output(literal("io.intino.alexandria.rest.AlexandriaSparkBuilder.instance().stop();")),
			rule().condition((type("service")), (type("jms")), (trigger("quit"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(" != null) ")).output(mark("name", "SnakeCaseToCamelCase", "firstlowerCase")).output(literal(".closeSession();")),
			rule().condition((type("dataHub")), (trigger("quit"))).output(literal("if (dataHub != null) dataHub.stop();")),
			rule().condition((type("service")), (trigger("quit"))),
			rule().condition((type("service"))),
			rule().condition((type("task")), (trigger("init"))).output(literal("Tasks.init(this.scheduler, (")).output(mark("configuration", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Box) this);")),
			rule().condition((type("task")), (trigger("getter"))).output(literal("public io.intino.alexandria.scheduler.AlexandriaScheduler scheduler() {\n\treturn this.scheduler;\n}")),
			rule().condition((trigger("authservice"))).output(literal("protected abstract io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl);")),
			rule().condition((trigger("editorservice"))).output(literal("protected abstract io.intino.alexandria.ui.services.EditorService editorService(java.net.URL editorServiceUrl);\n\npublic io.intino.alexandria.ui.services.EditorService editorService() {\n\treturn this.editorService;\n}")),
			rule().condition((trigger("registersoul"))).output(literal("public java.util.List<Soul> souls() {\n\treturn new java.util.ArrayList<>(uiSouls.values());\n}\n\n\tpublic java.util.Optional<Soul> soul(String clientId) {\n\t\treturn java.util.Optional.ofNullable(uiSouls.get(clientId));\n\t}\n\n\tpublic void registerSoul(String clientId, Soul soul) {\n\t\t")).output(expression().output(literal("if (owner != null) ((")).output(mark("parent")).output(literal("Box) owner).registerSoul(clientId, soul);"))).output(literal("\n\t\tuiSouls.put(clientId, soul);\n\t}\n\n\tpublic void unRegisterSoul(String clientId) {\n\t\t")).output(expression().output(literal("if (owner != null) ((")).output(mark("parent")).output(literal("Box) owner).unRegisterSoul(clientId);"))).output(literal("\n\t\tuiSouls.remove(clientId);\n\t\tif (uiSouls.size() <= 0) notifySoulsClosed();\n\t}\n\n\tpublic void onSoulsClosed(io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed listener) {\n\t\t")).output(expression().output(literal("if (owner != null) ((")).output(mark("parent")).output(literal("Box) owner).onSoulsClosed(listener);"))).output(literal("\n\t\tthis.soulsClosedListeners.add(listener);\n\t}\n\n\tprivate void notifySoulsClosed() {\n\t\tsoulsClosedListeners.forEach(l -> l.accept());\n\t}")),
			rule().condition((type("custom")), (trigger("parameter"))).output(literal("configuration().get(\"")).output(mark("value", "customParameter")).output(literal("\")")),
			rule().condition((type("custom")), (trigger("authentication"))).output(literal("url(configuration().get(\"")).output(mark("value", "customParameter")).output(literal("\"))")),
			rule().condition((type("custom")), (trigger("edition"))).output(literal("url(configuration().get(\"")).output(mark("value", "customParameter")).output(literal("\"))")),
			rule().condition((type("int")), (trigger("parameter"))).output(mark("value")),
			rule().condition((trigger("parameter"))).output(literal("\"")).output(mark("value")).output(literal("\"")),
			rule().condition((trigger("authentication"))).output(literal("url(\"")).output(mark("value")).output(literal("\")")),
			rule().condition((trigger("edition"))).output(literal("url(\"")).output(mark("value")).output(literal("\")")),
			rule().condition((trigger("parentinit"))),
			rule().condition((trigger("hide"))),
			rule().condition((trigger("hideui"))).output(literal(";"))
		);
	}
}