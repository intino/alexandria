def type(interface)
	package $package+ValidPackage.analytic;

	import $package+ValidPackage.analytic.axes.*;

    import java.util.List;
    import java.util.stream.Stream;

    public interface Axis {

		String getLabel();

		int getSize();

		List<? extends Component> getComponents();

		Component getComponent(int index);

		Component getComponent(String id);

		default boolean isDynamic() {
			return false;
		};

		default Stream<? extends Component> toStream() {
		    return getComponents().stream();
		}

		default Stream<? extends Component> toParallelStream() {
		    return toStream().parallel();
		}


		interface Component {

			int index();

			String id();

			default String label() {
				return "";
			}

			Axis axis();
		}

		static Axis byName(String name) {
		    if(name == null) throw new NullPointerException("Name cannot be null");
		    switch(name) {
		        [$axisNameCase...[$NL]]
		    }
		    throw new IllegalArgumentException("Unknown axis " + name);
		}

		static Axis byLabel(String label) {
            if(label == null) throw new NullPointerException("Label cannot be null");
            switch(label) {
                [$axisLabelCase...[$NL]]
            }
            throw new IllegalArgumentException("Unknown axis " + label);
        }

        static List<Axis> getAll() {
            return List.of(
                [$axisListElement...[,$NL]]
            );
        }
    }
end

def type(axisNameCase)
    case "$axis+snakeCaseToCamelCase+firstUpperCase": return $axis+snakeCaseToCamelCase+firstUpperCase.get();
end

def type(axisLabelCase)
    case $axis+snakeCaseToCamelCase+firstUpperCase.AXIS_LABEL: return $axis+snakeCaseToCamelCase+firstUpperCase.AXIS_LABEL;
end

def type(axisListElement)
    $axis+snakeCaseToCamelCase+firstUpperCase.get(),
end