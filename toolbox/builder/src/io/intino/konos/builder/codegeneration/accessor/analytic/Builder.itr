def type(builder)
	package $package+validPackage.analytic;

	import io.intino.alexandria.logger.Logger;
	import $package+validPackage.cubes.*;

	import java.util.function.Consumer;
	import org.apache.commons.io.FileUtils;
	import java.util.List;

	public class $name+snakeCaseToCamelCase+firstUpperCase {
		private final java.io.File destination;
		private final java.io.File temporalStage;
		private final io.intino.alexandria.ingestion.TransactionSession session;

		public $name+snakeCaseToCamelCase+firstUpperCase(java.io.File destination) {
			this(destination, temporalStage, new Config());
		}

		public $name+snakeCaseToCamelCase+firstUpperCase(java.io.File destination, int factBufferSise) {
			this.destination = destination;
			this.temporalStage = new File(destination, "session" + java.util.UUID.randomUUID().toString());
			this.session = new io.intino.alexandria.ingestion.SessionHandler(temporalStage).createTransactionSession(factBufferSise);
		}

		$cube+put...[$NL$NL]

		public void flush() {
			session.close();
		}

		public void finish() {
			session.close();
			seal();
			FileUtils.deleteDirectory(temporalStage);
		}

		private void seal() {
			io.intino.alexandria.sealing.TransactionSessionManager.seal(temporalStage, destination, tempFolder());
		}

		private File tempFolder() {
			File temp = new File(this.stageFolder, "temp");
			temp.mkdir();
			return temp;
		}
	}
end

def trigger(put)
	public void put$name+FirstUpperCase(String tank, Timetag timetag, java.util.function.Consumer<$name+FirstUpperCase> fact) {
		session.put(tank, timetag, $name+FirstUpperCase.class, fact);
	}
end