def type(terminal)
	package $package+validPackage;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.Scale;
	import io.intino.alexandria.event.Event;
	import io.intino.alexandria.logger.Logger;
	import $package+validPackage.events.*;

	import java.util.function.Consumer;
	import java.util.List;

	public class $name+snakeCaseToCamelCase+firstUpperCase {
		private final java.io.File dataHubStage;
		private final java.io.File temporalStage;
		private final io.intino.alexandria.ingestion.TransactionSession session;

		public $name+snakeCaseToCamelCase+firstUpperCase(java.io.File destination, java.io.File temporalStage) {
			this(destination, temporalStage, new Config());
		}

		public $name+snakeCaseToCamelCase+firstUpperCase(java.io.File destination, java.io.File temporalStage, Config config) {
			this.destination = destination;
			this.temporalStage = temporalStage;
			this.sessionHandler = new io.intino.alexandria.ingestion.SessionHandler(temporalStage);
			this.eventSession = sessionHandler.createEventSession();
			this.setSession = sessionHandler.createSetSession(config.setsBufferSise);
			this.transactionSession = sessionHandler.createTransactionSession(config.transactionsBufferSise);
		}

		$cube+put...[$NL$NL]

		public void flush() {
			session.close();
		}

		public void finish() {
			session.close();
			seal();
		}

		private void seal() {

		}

		public static class Config {
			private int transactionsBufferSise = 1_000_000;
			private int setsBufferSise = 1_000_000;

			public Config transactionsBufferSise(int transactionsBufferSise) {
				this.transactionsBufferSise = transactionsBufferSise;
				return this;
			}

			public Config setsBufferSise(int setsBufferSise) {
				this.setsBufferSise = setsBufferSise;
				return this;
			}
		}
	}


		public interface SessionEventConsumer extends java.util.function.Consumer<io.intino.alexandria.event.SessionEvent> {
		}

		$event+interface...[$NL$NL]
	}
end

def trigger(put)
	public void feed$namespace+FirstUpperCase$name+FirstUpperCase(String tank, Timetag timetag, java.util.function.Consumer<$qn> fact) {
		session.put(tank, timetag, $qn.class, fact);
	}
end