def type(display)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.[$packageType~s.]$name+FirstUpperCase;
	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.services.push.UIClient;
	import io.intino.alexandria.ui.services.push.UIMessage;
	import io.intino.alexandria.ui.spark.UISparkManager;

	public class $name+firstUpperCase~PushRequester extends io.intino.alexandria.ui.displays.requesters.[$type+class+FirstUpperCase]~PushRequester {

		public void execute(UIClient client, UIMessage message) {
			$name+firstUpperCase display = display(client, message);
			if (display == null) return;
			String operation = operation(message);
			String data = data(message);

			[$request...[$NL~else ]]

			super.execute(client, message);
		}

	}
end

def attribute(this:Display) trigger(class)
	Display
end

def type(request & file) trigger(request)
end

def type(request & asset) trigger(request)
end

def type(request) trigger(request)
	if (operation.equals("$name")) {
		display.$name($parameter);
		return;
	}
end

def type(list) trigger(parameter)
	java.util.List.of(io.intino.alexandria.Json.fromString(data, $value~$[].class))
end

def type(parameter & file) trigger(parameter)
end

def type(parameter & String) trigger(parameter)
	data
end

def type(parameter & Double) trigger(parameter)
	Double.parseDouble(data)
end

def type(parameter & Integer) trigger(parameter)
	Integer.parseInt(data)
end

def type(parameter & Long) trigger(parameter)
	Long.parseLong(data)
end

def type(parameter & DateTime) trigger(parameter)
	java.time.Instant.ofEpochMilli(Long.parseLong(data))
end

def type(parameter) trigger(parameter)
	io.intino.alexandria.Json.fromString(data, $value.class)
end

def	trigger(parameter)
	aaaaa
end

def type(schemaImport)
	import $package.schemas.*;
end