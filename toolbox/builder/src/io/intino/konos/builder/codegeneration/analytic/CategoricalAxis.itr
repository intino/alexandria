def type(interface)
	package $package.analytic;

    import java.util.Collection;

    	public interface Axis {
			String label();

			int size();

			Collection<? extends Component> components();

			Component component(int index);

			Component component(String id);

			default boolean isDynamic() {
				return false;
			};


		interface Component {
			int index();

			String id();

			default String label() {
				return "";
			}

			Axis axis();
		}
    }
end

def type(axis)
	package $package+ValidPackage.analytic.axes;

	import $package+ValidPackage.analytic.Axis;

	import java.util.ArrayList;
    import java.util.List;
    import java.util.function.Predicate;
    import java.util.stream.Collectors;
    import java.util.concurrent.atomic.AtomicInteger;


	public class $name+snakeCaseToCamelCase+FirstUpperCase implements Axis {
		private static $name+snakeCaseToCamelCase+FirstUpperCase instance;
		public final Component NA = new Component(0, "NA"[,$include+defaultValue...[, ]]);
		private final java.util.Map<Integer, Component> components;
		private final java.util.Map<String, Component> componentsByName;
		private final int size;

		public static $name+snakeCaseToCamelCase+FirstUpperCase instance() {
			return instance == null ? (instance = new $name+snakeCaseToCamelCase+FirstUpperCase()): instance;
		}

		private $name+snakeCaseToCamelCase+FirstUpperCase() {
			components = new java.util.HashMap<>();
			componentsByName = new java.util.HashMap<>();
			AtomicInteger size = new AtomicInteger();
			try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader($name+snakeCaseToCamelCase+FirstUpperCase.class.getResourceAsStream("/analytic/axes/$name.tsv")))) {
				reader.lines().map(l -> l.split("\\t", -1)).
				map(l -> new Component(Integer.parseInt(l$[0]), l$[1][,$include+constructor...[, ]])).
				forEach(c -> { components.put(c.index, c); componentsByName.put(c.id, c);  size.getAndIncrement(); });
			} catch (java.io.IOException e) {
				io.intino.alexandria.logger.Logger.error(e);
			}
			this.size = size.get();
		}

		public String label() {
			return "$label";
		}

		public int size() {
			return this.size;
		}

		public List<Component> components() {
			return new ArrayList<>(components.values());
		}

		public List<Component> components(Predicate<Component> filter) {
			return components.values().stream().filter(filter).collect(Collectors.toList());
		}

		public Component component(int index) {
			return components.getOrDefault(index, NA);
		}

		public Component component(String name) {
			return componentsByName.getOrDefault(name, NA);
		}

		public Component component(Predicate<Component> filter) {
			return components.values().stream().filter(filter).findFirst().orElse(NA);
		}

		public class Component implements Axis.Component {
			public final int index;
			public final String id;
			$include+declaration...[$NL]

			Component(int index, String id[, $include+parameter...[, ]]) {
				this.index = index;
				this.id = id;
				$include+assign...[$NL]
			}

			public int index() {
				return index;
			}

			public String id() {
				return id;
			}

			public Axis axis() {
				return $name+snakeCaseToCamelCase+FirstUpperCase.this;
			}

			public boolean equals(Component component) {
				return this.index == component.index;
			}
		}
	}
end

def attribute(name:label) trigger(declaration)
	public final String $name+firstLowerCase;
end

def trigger(declaration)
	public final $name+snakeCaseToCamelCase+firstUpperCase.Component $name+snakeCaseToCamelCase+firstLowerCase;
end

def attribute(name:label) trigger(defaultValue)
	""
end

def trigger(defaultValue)
	$name+snakeCaseToCamelCase+firstUpperCase.instance().NA
end

def attribute(name:label) trigger(parameter)
	String $name+snakeCaseToCamelCase+firstLowerCase
end

def trigger(parameter)
	$name+snakeCaseToCamelCase+firstUpperCase.Component $name+snakeCaseToCamelCase+firstLowerCase
end

def attribute(name:label) trigger(constructor)
	l.length > $index ? l$[$index] : "NA"
end

def trigger(constructor)
	l.length > $index ? $name+snakeCaseToCamelCase+firstUpperCase.instance().component(l$[$index]) : $name+snakeCaseToCamelCase+firstUpperCase.instance().NA
end

def trigger(assign)
	this.$name+snakeCaseToCamelCase+firstLowerCase = $name+snakeCaseToCamelCase+firstLowerCase;
end

def trigger(put)
	components.put($index, $name+FirstUpperCase);
	componentsByName.put("$name", $name+FirstUpperCase);
end


def trigger(field)
	public static final Component $name+snakeCaseToCamelCase+FirstUpperCase = new Component($index, "$name"[, "$label"]);
end