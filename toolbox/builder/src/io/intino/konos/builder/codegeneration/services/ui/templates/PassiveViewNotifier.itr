def type(display & accessible)
	package $package+validPackage.ui.displays.notifiers;

	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

    public class $name+FirstUpperCase~ProxyNotifier extends io.intino.alexandria.ui.displays.notifiers.ProxyDisplayNotifier  {

        public $name+FirstUpperCase~ProxyNotifier(io.intino.alexandria.ui.displays.Display display, io.intino.alexandria.rest.pushservice.MessageCarrier carrier) {
            super(display, carrier);
        }

		public void refreshBaseUrl(String value) {
			putToDisplay("refreshBaseUrl", "v", value);
		}

		public void refreshError(String value) {
			putToDisplay("refreshError", "v", value);
		}
    }
end

def type(display)
	package $package+validPackage.ui.displays.notifiers;

	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

    public class $name+FirstUpperCase~Notifier extends $parentType {

        public $name+FirstUpperCase~Notifier(io.intino.alexandria.ui.displays.Display display, io.intino.alexandria.rest.pushservice.MessageCarrier carrier) {
            super(display, carrier);
        }

		$notification...[$NL$NL]
    }
end

def attribute(extensionOf) trigger(parentType)
	$parent+firstUpperCase~Notifier
end

def attribute(catalog) trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.CatalogNotifier
end

def attribute(temporalTimeCatalog) trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.TemporalTimeCatalogNotifier
end

def attribute(temporalRangeCatalog) trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.TemporalRangeCatalogNotifier
end

def attribute(MenuLayout) trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.MenuLayoutNotifier
end

def attribute(TabLayout) trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.TabLayoutNotifier
end

def trigger(parentType)
	io.intino.alexandria.ui.displays.notifiers.$value+FirstUpperCase~Notifier
end

def type(notification) trigger(notification)
	public void $name+firstLowercase([$parameter value]) {
		put[$target]("$name+firstLowercase"[, "v", $parameter+empty~value]);
	}
end

def type(parameter) trigger(empty)
end

def type(list) trigger(parameter)
    java.util.List<$value>
end

def trigger(parameter)
    $value
end

def type(schemaImport)
	import $package.schemas.*;
end

def attribute(All) trigger(target)
	ToAll
end

def attribute(Display) trigger(target)
	ToDisplay
end

def attribute(Client) trigger(target)
end