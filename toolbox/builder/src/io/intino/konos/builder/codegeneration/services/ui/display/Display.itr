def type(display & accessible)
	package $package.displays;

    import $package.displays.notifiers.$name+SnakeCaseToCamelCase+FirstUpperCase~ProxyNotifier;
    import io.intino.alexandria.ui.displays.AlexandriaProxyDisplay;
    import io.intino.alexandria.ui.services.push.UISession;

    import java.util.HashMap;
    import java.util.Map;

    public class $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy extends AlexandriaProxyDisplay<$name+SnakeCaseToCamelCase+FirstUpperCase~ProxyNotifier> {
        $parameter+field...[$NL]

        public $name+SnakeCaseToCamelCase+FirstUpperCase~Proxy(UISession session, String appUrl) {
            super(session, appUrl, "/$name+SnakeCaseToCamelCase+lowercase~proxy");
        }

		$request+accessible...[$NL$NL]
		$parameter+method...[$NL$NL]

        @Override
        protected Map<String, String> parameters() {
            Map<String, String> result = new HashMap<>();
            $parameter+map...[$NL]
            return result;
        }

        @Override
        protected void refreshBaseUrl(String url) {
            notifier.refreshBaseUrl(url);
        }

        @Override
        protected void refreshError(String error) {
            notifier.refreshError(error);
        }

    }
end

def type(display)
	package $package.displays;

	import io.intino.alexandria.exceptions.*;
	import $package.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;
    import $package+validPackage.displays.notifiers.$name+firstUpperCase~Notifier;
    import io.intino.alexandria.ui.displays.AlexandriaDisplay;
    $parent+import

    public class $name+firstUpperCase extends AlexandriaDisplay<$name+firstUpperCase~Notifier> {
        private $box+firstUpperCase~Box box;

        public $name+firstUpperCase($box+firstUpperCase~Box box) {
            super();
            this.box = box;
        }
		[
        @Override
		protected void init() {
			super.init();
			$parent
			$innerDisplay...[$NL]
		}
	]
		$request...[$NL$NL]
		$parameter+setter...[$NL$NL]
    }
end

def type(request & asset)
	public io.intino.alexandria.ui.spark.UIFile $name([$parameter value]) {
        return null;
	}
end

def type(request) trigger(accessible)
	public void $name([$parameter value]) {
		request("$name"[, $parameter+parameterValue]);
	}
end

def trigger(parameterValue)
	value
end

def type(request)
	public void $name([$parameter value]) {

	}
end

def trigger(setter)
	public void $value+firstLowerCase(String value) {

	}
end

def trigger(field)
	private String $value+firstLowerCase;
end


def trigger(map)
	result.put("$value", $value+firstLowerCase);
end

def trigger(method)
    public void $value+firstLowerCase(String value) {
        this.$value+firstLowerCase = value;
    }
end

def type(dateTime | date) type(list) trigger(parameter)
    $value
end

def type(dateTime | date) trigger(parameter)
    $value
end

def type(list) trigger(parameter)
    $value$[]
end

def trigger(parameter)
    $value
end

def type(schemaImport)
	import $package.schemas.*;
end

def trigger(import)
	import $package.displays.*;
end

def trigger(parent)
	addAndPersonify(new $value+firstUpperCase(($dsl~Box) box.owner()));
end

def trigger(innerDisplay)
	addAndPersonify(new $value+firstUpperCase((box)));
end