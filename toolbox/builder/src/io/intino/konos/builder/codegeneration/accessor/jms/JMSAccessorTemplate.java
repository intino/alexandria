package io.intino.konos.builder.codegeneration.accessor.jms;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class JMSAccessorTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("accessor"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(";\n\nimport io.intino.alexandria.exceptions.*;\nimport io.intino.alexandria.jms.QueueProducer;\nimport com.google.gson.Gson;\n\nimport java.util.List;\nimport javax.jms.*;\n")).output(mark("schemaImport")).output(literal("\n\npublic class ")).output(mark("name", "firstUpperCase", "camelCase")).output(literal("Accessor {\n\n\tprivate final Session session;\n\t")).output(mark("custom", "field").multiple("\n")).output(literal("\n\n\tpublic ")).output(mark("name", "firstUpperCase", "camelCase")).output(literal("Accessor(Session session")).output(expression().output(literal(", ")).output(mark("custom", "signature").multiple(", "))).output(literal(") {\n\t\tthis.session = session;\n\t\t")).output(mark("custom", "assign").multiple("\n")).output(literal("\n\t}\n\n\t")).output(mark("request").multiple("\n\n")).output(literal("\n\n\t")).output(mark("request", "interface").multiple("\n\n")).output(literal("\n\n\tprivate static String createRandomString() {\n\t\tjava.util.Random random = new java.util.Random(System.currentTimeMillis());\n\t\tlong randomLong = random.nextLong();\n\t\treturn Long.toHexString(randomLong);\n\t}\n\n\tprivate byte[] toByteArray(java.io.InputStream stream) {\n\t\ttry {\n\t\t\tjava.io.ByteArrayOutputStream buffer = new java.io.ByteArrayOutputStream();\n\t\t\tint nRead;\n\t\t\tbyte[] data = new byte[16384];\n\t\t\twhile ((nRead = stream.read(data, 0, data.length)) != -1) {\n\t\t\t\tbuffer.write(data, 0, nRead);\n\t\t\t}\n\t\t\tbuffer.flush();\n\t\t\treturn buffer.toByteArray();\n\t\t} catch (java.io.IOException e) {\n\t\t\tio.intino.alexandria.logger.Logger.error(e.getMessage(), e);\n\t\t}\n\t\treturn new byte[0];\n\t}\n}")),
				rule().condition((allTypes("request", "reply")), (trigger("interface"))).output(literal("public interface ")).output(mark("name", "firstUpperCase")).output(literal("Response extends MessageListener {\n\n\tvoid callback(")).output(mark("reply", "return")).output(literal(" value);\n\n\tdefault void onMessage(Message message) {\n\t\ttry {\n\t\t\t")).output(mark("reply")).output(literal("\n\t\t} catch (JMSException e) {\n\t\t\tio.intino.alexandria.logger.Logger.error(e.getMessage(), e);\n\t\t}\n\t}\n}")),
			rule().condition((type("request")), (trigger("interface"))),
			rule().condition((allTypes("request","reply"))).output(literal("public MessageConsumer ")).output(mark("name")).output(literal("(")).output(expression().output(mark("parameter", "signature").multiple(", ")).output(literal(", "))).output(mark("name", "firstUpperCase")).output(literal("Response callback) throws JMSException {\n\tDestination temporaryQueue = session.createTemporaryQueue();\n\tMessageConsumer consumer = session.createConsumer(temporaryQueue);\n\tconsumer.setMessageListener(callback);\n\tfinal ")).output(mark("messageType")).output(literal("Message message = session.create")).output(mark("messageType")).output(literal("Message();\n\tmessage.setJMSReplyTo(temporaryQueue);\n\tmessage.setJMSCorrelationID(createRandomString());\n\tfill")).output(mark("name", "firstUpperCase")).output(literal("(message")).output(expression().output(literal(", ")).output(mark("parameter", "name").multiple(", "))).output(literal(");\n\tQueueProducer producer = new QueueProducer(session, \"")).output(mark("queue")).output(literal("\"")).output(expression().output(mark("custom").multiple(""))).output(literal(");\n\tproducer.produce(message);\n\tproducer.close();\n\treturn consumer;\n}\n\nprivate void fill")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("messageType")).output(literal("Message message")).output(expression().output(literal(", ")).output(mark("parameter", "signature").multiple(", "))).output(literal(") throws JMSException {\n\t")).output(mark("parameter", "assign").multiple("\n")).output(literal("\n}")),
				rule().condition(not(type("parameter")), (trigger("field"))).output(literal("private String ")).output(mark("", "validname")).output(literal(";")),
				rule().condition(not(type("parameter")), (trigger("signature"))).output(literal("String ")).output(mark("", "validname")),
				rule().condition(not(type("parameter")), (trigger("assign"))).output(literal("this.")).output(mark("", "validname")).output(literal(" = ")).output(mark("", "validname")).output(literal(";")),
				rule().condition(not(type("parameter")), (trigger("custom"))).output(literal(".replace(\"{")).output(mark("")).output(literal("}\", this.")).output(mark("", "validname")).output(literal(")")),
			rule().condition((type("request"))).output(literal("public void ")).output(mark("name")).output(literal("(")).output(expression().output(mark("parameter", "signature").multiple(", "))).output(literal(") throws JMSException {\n\tfinal TextMessage message = session.createTextMessage();\n\tfill")).output(mark("name", "firstUpperCase")).output(literal("(message")).output(expression().output(literal(", ")).output(mark("parameter", "name").multiple(", "))).output(literal(");\n\tQueueProducer producer = new QueueProducer(session, \"")).output(mark("queue")).output(literal("\");\n\tnew QueueProducer(session, \"")).output(mark("queue")).output(literal("\").produce(message);\n\tproducer.close();\n}\n\nprivate void fill")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("messageType")).output(literal("Message message")).output(expression().output(literal(", ")).output(mark("parameter", "signature").multiple(", "))).output(literal(") throws JMSException {\n\t")).output(mark("parameter", "assign").multiple("\n")).output(literal("\n}")),
				rule().condition((allTypes("parameter", "list")), (trigger("signature"))).output(literal("java.util.List<")).output(mark("type")).output(literal("> ")).output(mark("name", "camelCase", "firstLowerCase")),
				rule().condition((type("parameter")), (trigger("signature"))).output(mark("type")).output(literal(" ")).output(mark("name", "camelCase", "firstLowerCase")),
				rule().condition((type("parameter")), (trigger("name"))).output(mark("name", "camelCase", "firstLowerCase")),
				rule().condition((allTypes("parameter", "objectData")), (trigger("assign"))).output(literal("message.setText(new Gson().toJson(")).output(mark("name")).output(literal("));")),
				rule().condition((allTypes("parameter", "fileData")), (trigger("assign"))).output(literal("message.writeBytes(toByteArray(")).output(mark("name")).output(literal(".content()));")),
			rule().condition((allTypes("parameter","list")), (trigger("assign"))).output(literal("message.setStringProperty(\"")).output(mark("name")).output(literal("\", new Gson().toJson(")).output(mark("name")).output(literal("));")),
			rule().condition((type("parameter")), (trigger("assign"))).output(literal("message.set")).output(mark("type", "format")).output(literal("Property(\"")).output(mark("name")).output(literal("\", ")).output(mark("name")).output(literal(");")),
			rule().condition((type("reply")), (trigger("type"))).output(literal("Text")),
				rule().condition((allTypes("reply", "fileData")), (trigger("type"))).output(literal("Bytes")),
			rule().condition((allTypes("reply","list")), (trigger("return"))).output(literal("List<")).output(mark("value")).output(literal(">")),
			rule().condition((type("reply")), (trigger("return"))).output(mark("value")),
				rule().condition((attribute("", "Integer")), (trigger("format"))).output(literal("Int")),
				rule().condition((allTypes("reply", "fileData")), (trigger("reply"))).output(literal("byte[] bytes = new byte[(int) ((BytesMessage) message).getBodyLength()];\n((BytesMessage) message).readBytes(bytes);\ncallback(new io.intino.alexandria.Resource(\"file\",\"\", new java.io.ByteArrayInputStream(bytes)));")),
			rule().condition((allTypes("reply","list")), (trigger("reply"))).output(literal("java.lang.reflect.Type listType = new com.google.gson.reflect.TypeToken<java.util.ArrayList<")).output(mark("value")).output(literal(">>(){}.getType();\ncallback(new Gson().fromJson(((TextMessage) message).getText(), listType));")),
			rule().condition((type("reply")), (trigger("reply"))).output(literal("callback(new Gson().fromJson(((TextMessage) message).getText(), ")).output(mark("value")).output(literal(".class));")),
				rule().condition((type("schemaImport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;"))
		);
	}
}