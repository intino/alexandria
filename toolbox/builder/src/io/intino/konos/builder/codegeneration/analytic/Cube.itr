def type(cube & src)
	package $package.analytic.cubes;

    import io.intino.alexandria.led.buffers.store.ByteStore;

    import java.util.List;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase(List<Loader> loaders) {
			super(loaders);
		}

		[$customDimension+staticMethod...[$NL$NL]]

		[$customFilter+staticMethod...[$NL$NL]]

		[$customIndicator+staticMethod...[$NL$NL]]

		public static class Loader extends Abstract$name+FirstUpperCase.Loader {

			public Loader(Datasource datasource[, $split+parameter]) {
				super(datasource[, $split+name]);
			}

			// TODO write here a cache if necessary
		}

		public static class Fact extends Abstract$name+FirstUpperCase.AbstractFact {

		    public Fact(ByteStore store) {
		        super(store);
		    }

		    [$virtualColumn+implementation...[$NL$NL]]
		}
	}
end

def type(cube)
	package $package.analytic.cubes;

    import io.intino.alexandria.Timetag;
    import io.intino.alexandria.led.LedReader;
    import io.intino.alexandria.led.LedStream;
    import io.intino.alexandria.led.Schema;
    import io.intino.alexandria.led.allocators.SchemaFactory;
    import io.intino.alexandria.led.buffers.store.ByteStore;
    import io.intino.alexandria.led.util.iterators.MergedIterator;

	import $package.analytic.axes.*;
    import $package.analytic.Axis;

	import java.io.File;
    import java.util.*;
    import java.util.function.Function;
    import java.util.function.Predicate;
    import java.util.stream.Stream;
    import java.util.stream.StreamSupport;

    import static java.util.Comparator.comparingLong;
    import static java.util.Spliterators.spliteratorUnknownSize;

    import $package.analytic.cubes.$name+FirstUpperCase.Fact;

    @SuppressWarnings("unused")
    public abstract class Abstract$name+FirstUpperCase {

		public static final Fact NULL_FACT = new NullFact();

		private final List<? extends Loader> loaders;
		private final List<Predicate<Fact>> filterList = new ArrayList<>();
		private final List<Axis> axes = new ArrayList<>();
		private final Map<Axis, Set<Axis.Component>> components = new HashMap<>();
		private final List<Function<Fact, Axis.Component>> groupByList = new ArrayList<>();
		private Aggregation$[] result;

    	public Abstract$name+FirstUpperCase(List<? extends Loader> loaders) {
    		this.loaders = java.util.Objects.requireNonNull(loaders);
    	}

    	[$dimension+method...[$NL$NL]]

    	[$customFilter+method...[$NL$NL]]

		public Abstract$name+firstUpperCase execute() {
			result = new Aggregation$[resultsSize()];
			results().forEach(this::append);
			fillCategories();
			return this;
		}

    	public Iterator<Fact> detail() {
			MergedIterator<Fact> iterator = new MergedIterator<>(loaders.stream().map(Iterable::iterator), comparingLong(Fact::id));
			return StreamSupport.stream(spliteratorUnknownSize(iterator, Spliterator.SORTED), false).filter(this::check).iterator();
		}

		public Aggregation aggregation(List<Axis.Component> components) {
		    final int index = indexOf(components);
			return result$[index];
		}

	    public Aggregation aggregation(Axis.Component... components) {
            final int index = indexOf(components);
        	return result$[index];
        }

		private void fillCategories() {
			for (Aggregation aggregation : result) {
				if (aggregation == null) continue;
				for (int i = 0; i < aggregation.components.length; i++)
					components.get(axes.get(i)).add(aggregation.components$[i]);
			}
		}

		private int resultsSize() {
			int accumulator = 1;
			for (Axis axis : axes) accumulator *= axis.getSize() + 1;
			return accumulator;
		}

		private Stream<Aggregation$[]> results() {
			return loaders.parallelStream().map(this::results);
		}

		private Aggregation$[] results(Iterable<Fact> facts) {
			Aggregation$[] result = new Aggregation$[resultsSize()];
			for (Fact fact : facts) {
			    fact.setCube(this);
				if (!check(fact)) continue;
				Axis.Component$[] components = componentsOf(fact);
				int index = indexOf(components);
				if (result$[index] == null) result$[index] = new Aggregation(components);
				result$[index].append(fact);
			}
			return result;
		}

		private synchronized void append(Aggregation$[] results) {
			for (int i = 0; i < results.length; i++) {
			    final Aggregation aggregation = results$[i];
				if (aggregation == null) continue;
				if (result$[i] == null)
                    result$[i] = aggregation;
                else
                    result$[i].append(aggregation);
			}
		}

		private int indexOf(Axis.Component$[] components) {
			int index = 0;
			for (int i = 0; i < components.length; i++) {
				index *= axes.get(i).getSize();
				index += components$[i].index();
			}
			return index;
		}

		private int indexOf(Collection<Axis.Component> components) {
        	int index = 0;
        	int i = 0;
        	for (Axis.Component component : components) {
        		index *= axes.get(i++).getSize();
        		index += component.index();
        	}
        	return index;
        }

		private boolean check(Fact item) {
			for (Predicate<Fact> filter : filterList) if (!filter.test(item)) return false;
			return true;
		}

		private Axis.Component$[] componentsOf(Fact item) {
			Axis.Component$[] components = new Axis.Component$[groupByList.size()];
			for (int i = 0; i < components.length; i++) components$[i] = groupByList.get(i).apply(item);
			return components;
		}

		public static abstract class AbstractFact extends Schema {

            public static final int SIZE = $size; // Bytes
            public static final UUID SERIAL_UUID = UUID.fromString("$serialUUID");
            public static final SchemaFactory<Fact> FACTORY = new SchemaFactory<>(Fact.class) {
                @Override
                public Fact newInstance(ByteStore store) {
                    return new Fact(store);
                }
            };

            private Timetag timetag;
            private Abstract$name+FirstUpperCase cube;

            public AbstractFact(ByteStore store) {
            	super(store);
            }

            [$virtualColumn+abstract...[$NL$NL]]

            [$column+getter...[$NL$NL]]

            @Override
            public long id() {
            	return $id();
            }

            public final Abstract$name+FirstUpperCase cube() {
                return cube;
            }

            void setCube(Abstract$name+FirstUpperCase cube) {
                this.cube = cube;
            }

            public final Timetag timetag() {
                return timetag;
            }

            void setTimetag(Timetag timetag) {
                this.timetag = timetag;
            }

            @Override
            public int size() {
            	return SIZE;
            }

            @Override
            public UUID serialUUID() {
                return SERIAL_UUID;
            }

             @Override
             public String toString() {
                 return "$name+FirstUpperCase~.Fact{"
                         + "id=" + id()
                         + ", timetag=" + timetag()
                         [$column+toString...[$NL]]
                         + '}';
             }
        }

		public static class NullFact extends Fact {

			public static final int SIZE = Fact.SIZE; // Bytes
			public static final UUID SERIAL_UUID = Fact.SERIAL_UUID;
            public static final SchemaFactory<NullFact> FACTORY = new SchemaFactory<>(NullFact.class) {
                @Override
            	public NullFact newInstance(ByteStore store) {
            	    return new NullFact();
            	}
            };

			private NullFact() {
				super(ByteStore.empty());
			}

			@Override
			public long id() {
				return $id();
			}

			@Override
			public int size() {
				return SIZE;
			}

			@Override
			public UUID serialUUID() {
			    return SERIAL_UUID;
			}
		}

		public static class Aggregation {

			private final Axis.Component$[] components;
			private long aggregationCount = 0;
			$index+field
			$indicator+field...[$NL]

			public Aggregation(Axis.Component$[] components) {
				this.components = components;
			}

			public void append(Fact fact) {
				$indicator+sum...[$NL]
				$index+append
			}

			public void append(Aggregation aggregation) {
				$indicator+sumAggregation...[$NL]
				$index+append2
				aggregationCount += aggregation.aggregationCount;
			}

			public long aggregationCount() {
				return aggregationCount;
			}

			$index+getter

			public Axis.Component$[] components() {
				return components;
			}

			$indicator+getter...[$NL$NL]

			@Override
			public String toString() {
			    return "$name+FirstUpperCase.Aggregation{"
			        + "aggregationCount=" + aggregationCount
			        $indicator+toString...[$NL]
			        + "}";
			}
		}

    	public static abstract class Loader implements Iterable<Fact> {

			protected final Datasource datasource;
			[$split+field]

			public Loader(Datasource datasource[, $split+parameter]) {
				this.datasource = datasource;
				[$split+assign]
			}

			@Override
			public Iterator<Fact> iterator() {
			    return datasource.leds($split+name).asJavaStream().iterator();
			}

			[$split+method]

			public static class Datasource {

				private final File root;
				private final Timetag from;
				private final Timetag to;

				public Datasource(File root, Timetag from, Timetag to) {
					this.root = root;
					this.from = from;
					this.to = to;
				}

				public Timetag from() {
					return from;
				}

				public Timetag to() {
					return to;
				}

				private LedStream<Fact> leds($split+parameter) {
					return LedStream.merged(StreamSupport.stream(from.iterateTo(to).spliterator(), false).map(t -> on(t[, $split+name])));
				}

				private LedStream<Fact> on(Timetag timetag[, $split+parameter]) {
					File file = new File(root + "/$name+FirstUpperCase" [+ "." + $split+name], timetag.value() + ".led");
					LedStream<Fact> facts = file.exists() ? new LedReader(file).read(Fact.class) : LedStream.empty(Fact.class);
					return facts.peek(fact -> fact.setTimetag(timetag));
				}
			}
		}
    }
end

def type(index & total) trigger(field)
	private long aggregationTotal = 0;
	private long last = 0;
end

def type(index & total) trigger(append)
	if (last != fact.id()) {
		++aggregationCount;
		last = fact.id();
	}
	++aggregationTotal;
end

def type(index & total) trigger(append2)
	aggregationTotal += aggregation.aggregationTotal;
end

def type(index & total) trigger(getter)
	public long aggregationTotal() {
		return aggregationTotal;
	}
end

def type(index) trigger(field)
	private final io.intino.alexandria.led.util.collections.SparseLongList ids = new io.intino.alexandria.led.util.collections.SparseLongList();
end

def type(index) trigger(append)
	if (ids.isEmpty() || ids.get(ids.size() - 1) != fact.id()) ids.add(fact.id());
end

def type(index) trigger(append2)
	ids.addAll(aggregation.ids);
end

def type(index) trigger(getter)
	public List<Long> ids() {
		return ids.asList();
	}
end

def trigger(nbits)
	NBits
end

def type(customFilter) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase() {
		filterList.add($cube+FirstUpperCase::$name+firstLowerCase~Filter);
		return this;
	}
end

def type(customFilter) trigger(staticMethod)
	public static boolean $name+firstLowerCase~Filter(Fact fact) {
		// TODO: write here your code
		return true;
	}
end

def type(customDimension) trigger(staticMethod)
	public static $name+firstLowerCase[$isDistribution~Range] $name+firstLowerCase~Function() {
	    // TODO: write here your code
		return v -> null;
	}
end

def type(dimension & categorical) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase) {
		filterList.add(v -> $name+firstLowerCase~Filter(v, $axis+snakeCaseToCamelCase+firstLowerCase));
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+firstUpperCase() {
		axes.add($axis+snakeCaseToCamelCase+firstUpperCase.get());
		components.put($axis+snakeCaseToCamelCase+firstUpperCase.get(), new HashSet<>());
		groupByList.add(Abstract$cube+FirstUpperCase::$name+firstLowerCase~Function);
		return this;
	}

	public static boolean $name+firstLowerCase~Filter(Fact fact, Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase) {
		return $axis+snakeCaseToCamelCase+firstLowerCase.contains($name+firstLowerCase~Function(fact));
	}

	public static $axis+snakeCaseToCamelCase+firstUpperCase.Component $name+firstLowerCase~Function(Fact fact) {
		return fact.$source+snakeCaseToCamelCase+firstLowerCase()[.$child+snakeCaseToCamelCase+firstLowerCase];
	}
end

def type(dimension & continuous) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Range> $axis+snakeCaseToCamelCase+firstLowerCase) {
		filterList.add(v -> $name+firstLowerCase~Filter(v, $axis+snakeCaseToCamelCase+firstLowerCase));
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+firstUpperCase() {
		axes.add($axis+snakeCaseToCamelCase+firstUpperCase.get());
		components.put($axis+snakeCaseToCamelCase+firstUpperCase.get(), new HashSet<>());
		groupByList.add(Abstract$cube+FirstUpperCase::$name+firstLowerCase~Function);
		return this;
	}

	public static boolean $name+firstLowerCase~Filter(Fact fact, Set<$axis+snakeCaseToCamelCase+firstUpperCase.Range> $axis+snakeCaseToCamelCase+firstLowerCase) {
		return $axis+snakeCaseToCamelCase+firstLowerCase.contains($name+firstLowerCase~Function(fact));
	}

	private static $axis+snakeCaseToCamelCase+firstUpperCase.Range $name+firstLowerCase~Function(Fact fact) {
		return $axis+snakeCaseToCamelCase+firstUpperCase.rangeOf(fact.$source+firstLowerCase());
	}
end


def type(customDimension & continuous) trigger(method)
	public Abstract$cube+firstUpperCase filter$name+firstUpperCase(Set<$axis+snakeCaseToCamelCase.Range> ranges) {//TODO
		filterList.add(v -> $name+firstLowerCase~Filter(v, ranges));
		return this;
	}

	public Abstract$cube+firstUpperCase groupBy$name+firstUpperCase() {
		axes.add($axis+snakeCaseToCamelCase.get);
		components.put($axis+snakeCaseToCamelCase.get, new HashSet<>());
		groupByList.add(Abstract$cube+firstUpperCase::$name+firstLowerCase~Function);
		return this;
	}

	public static boolean $name+firstLowerCase~Filter(Fact fact, Set<$axis+snakeCaseToCamelCase.Range> rangos) {
		return rangos.contains($cube+firstUpperCase.$name+firstLowerCase~Function(fact));
	}
end

def type(indicator) trigger(toString)
	 + ", $name+firstLowerCase=" + $name+firstLowerCase~()
end

def type(indicator) trigger(sum)
	$name+firstLowerCase += fact.$source+firstLowerCase();
end

def type(indicator) trigger(sumAggregation)
	$name+firstLowerCase += aggregation.$name+firstLowerCase;
end

def type(indicator & average) trigger(field)
	double $name+firstLowerCase;
end

def type(indicator & sum) trigger(field)
	long $name+firstLowerCase;
end

def type(indicator & average) trigger(getter)
	public double $name+firstLowerCase() {
		return $name+firstLowerCase / (double) $index;
	}
end

def type(total) trigger(index)
	aggregationTotal
end

def type(index) trigger(index)
	ids.size()
end

def type(indicator & sum) trigger(getter)
	public long $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def type(indicator & average) trigger(staticMethod)
	public static double $name(Fact fact) {
		return 0.;
	}
end

def type(indicator & sum) trigger(staticMethod)
	public static long $name(Fact fact) {
		return 0;
	}
end

def type(split) trigger(parameter)
	String $name+firstLowerCase
end

def type(split) trigger(setParameter)
	Set<String> $name+firstLowerCase
end

def type(split) trigger(assign)
	this.$name+firstLowerCase = $name+firstLowerCase;
end

def type(split) trigger(name)
	$name+firstLowerCase
end

def type(split) trigger(nameUpper)
	$name+firstUpperCase
end

def type(split) trigger(field)
	protected final String $name+firstLowerCase;
end

def type(split) trigger(method)
	private static Set<String> all$name+FirstUpperCase() {
		return java.util.Set.of($value+quoted...[, ]);
	}
end

def trigger(dimension)
	public static Predicate<$cube+FirstUpperCase.Fact> $axis+snakeCaseToCamelCase+firstLowerCase(Set<$axis+snakeCaseToCamelCase+firstUpperCase.Component> $axis+snakeCaseToCamelCase+firstLowerCase~List) {
		return r -> $axis+snakeCaseToCamelCase+firstLowerCase~List.contains(r.$axis+snakeCaseToCamelCase+firstLowerCase());
	}

	public static Function<$cube+FirstUpperCase.Fact, String> $axis+snakeCaseToCamelCase+firstLowerCase() {
		return r -> r.$axis+snakeCaseToCamelCase+firstLowerCase().id();
	}
end

def type(column) trigger(toString)
    + ", $name=" + $name()
end


