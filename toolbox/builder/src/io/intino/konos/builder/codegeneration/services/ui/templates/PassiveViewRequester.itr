def type(display & accessible)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.[$packageType~s.]$name+FirstUppercase;
	import $package+validPackage.ui.displays.[$packageType~s.]$name+FirstUpperCase~Proxy;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.spark.UISparkManager;

	public class $name+FirstUpperCase~ProxyRequester extends io.intino.alexandria.ui.displays.requesters.DisplayProxyRequester {

		public $name+FirstUpperCase~ProxyRequester(UISparkManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
		}

		@Override
		public void execute() throws AlexandriaException {
			String operation = operation();
			$name+FirstUppercase display = personifiedDisplay();
			if (display == null) return;
			if (operation.equals("refreshPersonifiedDisplay")) {
				$parameter...[$NL]
				display.refresh();
				return;
			}
			[else $request...[$NL~else ]]
			super.execute();
		}
	}
end

def type(display)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.[$packageType~s.]$name+FirstUpperCase;
	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.spark.UISparkManager;

	public class $name+firstUpperCase~Requester extends $parentType {

		public $name+firstUpperCase~Requester(UISparkManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
		}

		@Override
		public void execute() throws AlexandriaException {
			$name+firstUpperCase display = display();
			if (display == null) return;
			String operation = operation();

			[$request...[$NL~else ]]

			super.execute();
		}
	}
end

def attribute(extensionOf) trigger(parentType)
	$parent+firstUpperCase~Requester
end

def trigger(parentType)
	io.intino.alexandria.ui.displays.requesters.[$type+class+FirstUpperCase]~Requester
end

def attribute(this:Display) trigger(class)
	Display
end

def type(request & asset) trigger(request)
	if (operation.equals("$name")) {
		io.intino.alexandria.ui.spark.UIFile file = display.$name($parameter);
		if (file == null) return;
		manager.write(file.content(), file.label(), file.embedded());
		return;
	}
end

def type(request) trigger(request)
	if (operation.equals("$name")) {
		display.$name($parameter);
		return;
	}
end

def type(parameter & accessible) trigger(parameter)
	display.$value+firstLowercase(manager.fromQuery("$value"));
end

def type(list) trigger(parameter)
	java.util.List.of(io.intino.alexandria.Json.fromString(manager.fromQuery("v"), $value~$[].class))
end

def type(parameter & file) trigger(parameter)
	manager.fromFormAsResource("v")
end

def type(parameter & String) trigger(parameter)
	manager.fromQuery("v")
end

def type(parameter & Double) trigger(parameter)
	Double.parseDouble(manager.fromQuery("v"))
end

def type(parameter & Integer) trigger(parameter)
	Integer.parseInt(manager.fromQuery("v"))
end

def type(parameter & Long) trigger(parameter)
	Long.parseLong(manager.fromQuery("v"))
end

def type(parameter & DateTime) trigger(parameter)
	manager.fromQuery("v") != null ? java.time.Instant.ofEpochMilli(Long.parseLong(manager.fromQuery("v"))) : null
end

def type(parameter) trigger(parameter)
	io.intino.alexandria.Json.fromString(manager.fromQuery("v"), $value.class)
end

def	trigger(parameter)
	aaaaa $value
end

def type(schemaImport)
	import $package.schemas.*;
end