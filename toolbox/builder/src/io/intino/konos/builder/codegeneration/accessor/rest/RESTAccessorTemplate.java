package io.intino.konos.builder.codegeneration.accessor.rest;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class RESTAccessorTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("accessor"))).output(literal("package ")).output(mark("package", "ValidPackage")).output(literal(";\n\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Arrays;\nimport java.net.URL;\nimport io.intino.alexandria.exceptions.*;\nimport io.intino.alexandria.Resource;\nimport io.intino.alexandria.restaccessor.core.RestAccessor;\nimport io.intino.alexandria.restaccessor.core.RestAccessorNotifier;\nimport io.intino.alexandria.restaccessor.exceptions.RestfulFailure;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.reflect.TypeToken;\n\n")).output(mark("schemaImport")).output(literal("\n\npublic class ")).output(mark("name", "firstUpperCase", "SnakeCaseToCamelCase")).output(mark("<missing ID>")).output(literal("Accessor {\n\tprivate URL url;\n\tprivate static Gson gsonReader = gsonReader();\n\tprivate static Gson gsonWriter = gsonWriter();\n\tprivate RestAccessor accessor;\n\tprivate RestAccessorNotifier notifier = new RestAccessorNotifier();\n\t")).output(expression().output(mark("certificate")).output(literal("private URL certificate;"))).output(literal("\n\t")).output(expression().output(mark("token")).output(literal("private String token;"))).output(literal("\n\n\tpublic ")).output(mark("name", "firstUpperCase", "SnakeCaseToCamelCase")).output(literal("Accessor(URL url")).output(expression().output(literal(", ")).output(mark("certificate")).output(literal("URL certificate"))).output(expression().output(mark("token")).output(literal(", String token"))).output(literal(") {\n\t\tthis.url = url;\n\t\t")).output(expression().output(mark("certificate")).output(literal("this.certificate = certificate;"))).output(literal("\n\t\t")).output(expression().output(mark("token")).output(literal("this.token = token;"))).output(literal("\n\t\tthis.accessor = new RestAccessor();\n\t}\n\n\tpublic ")).output(mark("name", "firstUpperCase", "SnakeCaseToCamelCase")).output(literal("Accessor(URL url, int timeoutMillis")).output(expression().output(literal(", ")).output(mark("certificate")).output(literal("URL certificate"))).output(expression().output(mark("token")).output(literal(", String token"))).output(literal(") {\n\t\tthis.url = url;\n\t\t")).output(expression().output(mark("certificate")).output(literal("this.certificate = certificate;"))).output(literal("\n\t\t")).output(expression().output(mark("token")).output(literal("this.token = token;"))).output(literal("\n\t\tthis.accessor = new RestAccessor(timeoutMillis);\n\t}\n\n\t")).output(mark("resource").multiple("\n\n")).output(literal("\n\n\t")).output(mark("notification").multiple("\n\n")).output(literal("\n\n\tprivate String encode(String value) {\n\t\ttry {\n\t\t\treturn java.net.URLEncoder.encode(value, \"UTF-8\");\n\t\t} catch (java.io.UnsupportedEncodingException e) {\n\t\t\tio.intino.alexandria.logger.Logger.error(e.getMessage(), e);\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tprivate static Gson gsonReader() {\n        return new GsonBuilder().\n            registerTypeAdapter(java.time.Instant.class, (com.google.gson.JsonDeserializer<java.time.Instant>) (json, type1, jsonDeserializationContext) -> java.time.Instant.ofEpochMilli(json.getAsJsonPrimitive().getAsLong())).\n            registerTypeAdapter(java.util.Date.class, (com.google.gson.JsonDeserializer<java.util.Date>) (json, type1, jsonDeserializationContext) -> new java.util.Date(json.getAsJsonPrimitive().getAsLong())).\n            create();\n\t}\n\n\tprivate static Gson gsonWriter() {\n        return new GsonBuilder().\n            registerTypeAdapter(java.time.Instant.class, (com.google.gson.JsonSerializer<java.time.Instant>) (instant, type, context) -> new com.google.gson.JsonPrimitive(instant.toEpochMilli())).\n            registerTypeAdapter(java.util.Date.class, (com.google.gson.JsonSerializer<java.util.Date>) (date, type, context) -> new com.google.gson.JsonPrimitive(date.getTime())).\n            create();\n    }\n}")),
				rule().condition((type("resource"))).output(literal("public ")).output(mark("returnType", "firstUpperCase", "ReturnTypeFormatter")).output(literal(" ")).output(mark("operation", "firstLowerCase")).output(mark("name", "SnakeCaseToCamelCase", "firstUpperCase")).output(literal("(")).output(mark("parameter", "signature").multiple(", ")).output(literal(") ")).output(mark("exceptionResponses", "declaration")).output(literal(" {\n\ttry {\n\t\t")).output(expression().output(literal("java.util.Map<String, String> parameters = new java.util.HashMap<String, String>() {{")).output(literal("\n")).output(literal("\t")).output(mark("parameter", "declaration").multiple("\n")).output(literal("\n")).output(literal("}};"))).output(literal("\n\t\t")).output(mark("invokeSentence")).output(literal("\n\t} catch (RestfulFailure e) {\n\t\t")).output(mark("exceptionResponses", "throws")).output(literal("\n\t}\n}")),
				rule().condition((type("notification"))).output(literal("public void listen")).output(mark("name", "SnakeCaseToCamelCase", "firstUppercase")).output(literal("(")).output(expression().output(mark("parameter", "signature").multiple(", ")).output(literal(", "))).output(literal("java.util.function.Consumer<String> listener) throws Unknown {\n\ttry {\n\t\t")).output(expression().output(literal("java.util.Map<String, String> parameters = new java.util.HashMap<String, String>() {{")).output(literal("\n")).output(literal("\t")).output(mark("parameter", "declaration").multiple("\n")).output(literal("\n")).output(literal("}};"))).output(literal("\n\t\tthis.notifier.listen(listener, accessor.")).output(expression().output(mark("secure")).output(literal("secure(this.url, this.token)"))).output(literal(".post(\"")).output(mark("path")).output(literal("\"")).output(expression().output(literal(", ")).output(mark("parameters"))).output(literal(").content().trim());\n\t} catch (RestfulFailure e) {\n\t\tthrow new Unknown(e.label());\n\t}\n}\n\npublic void stopListen")).output(mark("name", "SnakeCaseToCamelCase", "firstUppercase")).output(literal("() {\n\tthis.notifier.close();\n}")),
				rule().condition((type("parameter")), (trigger("signature"))).output(mark("parameterType")).output(literal(" ")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")),
				rule().condition((type("parameter")), (trigger("invoke"))).output(literal("parameters")),
				rule().condition((allTypes("parameter", "query", "list")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", String.valueOf(gsonWriter.toJson(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(")));")),
				rule().condition((allTypes("parameter", "query", "required")), (type("date")), (trigger("declaration"))).output(literal("put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(".toInstant().toEpochMilli()));")),
				rule().condition((allTypes("parameter", "query", "required")), (type("dateTime")), (trigger("declaration"))).output(literal("put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(".toEpochMilli()));")),
				rule().condition((allTypes("parameter", "query", "required", "text")), (trigger("declaration"))).output(literal("put(\"")).output(mark("name")).output(literal("\", ")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(");")),
				rule().condition((allTypes("parameter", "query", "required")), (anyTypes("bool", "integer", "real", "longInteger")), (trigger("declaration"))).output(literal("put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal("));")),
				rule().condition((allTypes("parameter", "query", "required", "object")), (trigger("declaration"))).output(literal("put(\"")).output(mark("name")).output(literal("\", String.valueOf(gsonWriter.toJson(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(")));")),
				rule().condition((allTypes("parameter", "query")), (type("date")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(".toInstant().toEpochMilli()));")),
				rule().condition((allTypes("parameter", "query")), (anyTypes("dateTime", "date")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(".toEpochMilli()));")),
				rule().condition((allTypes("parameter", "query")), (type("text")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", ")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(");")),
				rule().condition((allTypes("parameter", "query")), (anyTypes("bool", "integer", "real", "longInteger")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", String.valueOf(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal("));")),
				rule().condition((allTypes("parameter", "object")), (anyTypes("query", "body")), (trigger("declaration"))).output(literal("if (")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal(" != null) put(\"")).output(mark("name")).output(literal("\", encode(String.valueOf(gsonWriter.toJson(")).output(mark("name", "SnakeCaseToCamelCase", "firstLowerCase")).output(literal("))));")),
				rule().condition((type("parameter")), (trigger("declaration"))),
				rule().condition((type("parameter")), (trigger("filedeclaration"))),
				rule().condition((allTypes("invokeSentence", "void"))).output(mark("doInvoke")).output(literal(";")),
				rule().condition((allTypes("invokeSentence", "object", "list"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), new TypeToken<")).output(mark("returnType")).output(literal(">(){}.getType());")),
				rule().condition((allTypes("invokeSentence", "object"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), ")).output(mark("returnType")).output(literal(".class);")),
				rule().condition((allTypes("invokeSentence", "file", "list"))).output(literal("return null; //TODO")),
				rule().condition((allTypes("invokeSentence", "file"))).output(literal("return ")).output(mark("doInvoke")).output(literal(";")),
				rule().condition((allTypes("invokeSentence", "date", "list"))).output(literal("return null; //TODO")),
				rule().condition((type("invokeSentence")), (anyTypes("date", "instant"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), ")).output(mark("returnType")).output(literal(".class);")),
				rule().condition((allTypes("invokeSentence", "datetime", "list"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), new TypeToken<ArrayList<Instant>>(){}.getType());")),
				rule().condition((allTypes("invokeSentence", "datetime"))).output(literal("return java.time.Instant.ofEpochMilli(Long.valueOf(")).output(mark("doInvoke")).output(literal(".content()));")),
				rule().condition((allTypes("invokeSentence", "primitive", "int", "list"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), new TypeToken<ArrayList<Integer>>(){}.getType());")),
				rule().condition((allTypes("invokeSentence", "primitive", "int"))).output(literal("return Integer.valueOf(")).output(mark("doInvoke")).output(literal(".content());")),
				rule().condition((allTypes("invokeSentence", "primitive", "list"))).output(literal("return gsonReader.fromJson(")).output(mark("doInvoke")).output(literal(".content(), new TypeToken<ArrayList<")).output(mark("returnType")).output(literal(">>(){}.getType());")),
				rule().condition((allTypes("invokeSentence", "primitive"))).output(literal("return ")).output(mark("returnType", "firstUpperCase")).output(literal(".valueOf(")).output(mark("doInvoke")).output(literal(".content());")),
				rule().condition((allTypes("exceptionResponses", "none")), (trigger("throws"))).output(literal("throw new Unknown(e.label());")),
				rule().condition((type("exceptionResponses")), (trigger("throws"))).output(mark("exceptionResponse", "throws").multiple("\nelse ")).output(literal("\nthrow new Unknown(e.label());")),
				rule().condition((type("exceptionResponse")), (trigger("throws"))).output(literal("if (e.code().equals(\"")).output(mark("code")).output(literal("\")) throw new ")).output(mark("exceptionName")).output(literal("(e.label());")),
				rule().condition((type("exceptionResponses")), (trigger("declaration"))).output(literal("throws ")).output(expression().output(mark("exceptionResponse", "declaration").multiple(", ")).output(literal(","))).output(literal(" Unknown")),
				rule().condition((type("exceptionResponse")), (trigger("declaration"))).output(mark("exceptionName")),
				rule().condition((allTypes("auth", "cert", "doInvoke"))).output(literal("accessor.secure(this.url, ")).output(mark("certificate")).output(literal("this.certificate, this.password).")).output(mark("type", "firstLowerCase")).output(literal("(")).output(mark("relativePath")).output(expression().output(literal(", ")).output(mark("parameters"))).output(expression().output(literal(", Arrays.asList(")).output(mark("inputStream").multiple(",")).output(literal(")"))).output(literal(")")),
				rule().condition((allTypes("auth", "doInvoke"))).output(literal("accessor.secure(this.url, this.token).")).output(mark("type", "firstLowerCase")).output(literal("(")).output(mark("relativePath")).output(expression().output(literal(", ")).output(mark("parameters"))).output(expression().output(literal(", Arrays.asList(")).output(mark("inputStream").multiple(",")).output(literal(")"))).output(literal(")")),
				rule().condition((type("doInvoke"))).output(literal("accessor.")).output(mark("type", "firstLowerCase")).output(literal("(this.url, ")).output(mark("relativePath")).output(expression().output(literal(", ")).output(mark("parameters"))).output(expression().output(literal(", Arrays.asList(")).output(mark("inputStream").multiple(",")).output(literal(")"))).output(literal(")")),
				rule().condition((type("doInvoke"))).output(literal("accessor.")).output(mark("type", "firstLowerCase")).output(literal("(this.url, ")).output(mark("relativePath")).output(expression().output(literal(", ")).output(mark("parameters"))).output(expression().output(literal(", Arrays.asList(")).output(mark("inputStream").multiple(",")).output(literal(")"))).output(literal(")")),
				rule().condition((type("schemaImport")), (trigger("schemaimport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;")),
				rule().condition((trigger("inputstream"))).output(literal("new io.intino.alexandria.Resource(\"")).output(mark("")).output(literal("\", ")).output(mark("")).output(literal(")"))
		);
	}
}