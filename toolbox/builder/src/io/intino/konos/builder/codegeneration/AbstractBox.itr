def type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.Map;
	import java.util.UUID;
	[
	import java.util.HashMap;
    import java.util.Map$hasUi+hideUi]

	import io.intino.alexandria.logger.Logger;
	import java.util.logging.ConsoleHandler;
	import java.util.logging.Level;

	[$messageHub+import]
	[import io.intino.alexandria.rest.AlexandriaSpark;$hasREST]
    [import io.intino.alexandria.ui.Soul$hasUi+hideUi]

	public abstract class AbstractBox extends [$hasUi+uiBox?io.intino.alexandria.core.Box] {
		protected $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration;
		[$service+field...[$NL]]
		[$messageHub+field]
		[$datalake+field]
		[$task+field]
		[$workflow+field]
        [protected Map<String, Soul> uiSouls = new java.util.HashMap<>()$hasUi+hideUi]
	    [private java.util.List<io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed> soulsClosedListeners = new java.util.ArrayList<>()$hasUi+hideUi]
		[private io.intino.alexandria.ui.services.AuthService authService$hasUi+hideUi]
		[private io.intino.alexandria.ui.services.EditorService editorService$hasUi+hideUi]

		public AbstractBox(String$[] args) {
			this(new $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration(args));
		}
		
		public AbstractBox($name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration) {
			[owner = new $parent~Box(configuration);]
			this.configuration = configuration;
			initJavaLogger();
			[$service+setup...[$NL]]
			[$datalake+setup]
			[$messageHub+setup]
		}

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration() {
			return configuration;
		}

		@Override
		public io.intino.alexandria.core.Box put(Object o) {
			[$hasParent~owner.put(o);]
			return this;
		}

		public io.intino.alexandria.core.Box open() {
			if (owner != null) owner.open();
			initUI();
			initRESTServices();
			initJMXServices();
			initJMSServices();
			initDatalake();
			initMessageHub();
			initTasks();
			initSlackBots();
			initWorkflow();
			return this;
		}

		public void close() {
			if (owner != null) owner.close();
			[$spark...[$NL]]
			[$service+close...[$NL]]
			[$messageHub+close]
		}

		[$hasUi+registerSoul]

		[$service+getter...[$NL$NL]]

		[$hasUi+authService]

		[$hasUi+editorService]

		[$messageHub+getter]

		[$datalake+getter]

		[$datamart+getter]

		[$task+getter...[$NL$NL]]

		[$workflow+getter]

		private void initRESTServices() {
			$service+rest...[$NL]
		}

		private void initJMSServices() {
			[$jms~javax.jms.Connection connection;]
			$service+jms...[$NL]
		}

		private void initJMXServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initUI() {
			$service+ui...[$NL]
		}

		private void initDatalake() {
			[$datalake+init]
		}

		private void initMessageHub() {
			[$messageHub+init]
		}

		private void initTasks() {
			[$task+init...[$NL]]
		}

		private void initWorkflow() {
			[$workflow+init]
		}

		[$authenticationValidator]

		private void initJavaLogger() {
			final java.util.logging.Logger Logger = java.util.logging.Logger.getGlobal();
			final ConsoleHandler handler = new ConsoleHandler();
			handler.setLevel(Level.INFO);
			handler.setFormatter(new io.intino.alexandria.logger.Formatter());
			Logger.setUseParentHandlers(false);
			Logger.addHandler(handler);
		}

		private java.net.URL url(String url) {
			try {
				return new java.net.URL(url);
			} catch (java.net.MalformedURLException e) {
				return null;
			}
		}
	}
end

def type(datalake) trigger(import)
	import io.intino.alexandria.datalake.Datalake;
end
def type(messageHub) trigger(import)
	import io.intino.alexandria.message.MessageHub;
end

def trigger(uiBox)
	io.intino.alexandria.ui.AlexandriaUiBox
end

def type(service & ui) trigger(setup)
	this.authService = [this.authService($authentication)?null];
	this.editorService = [this.editorService($edition)?null];
	[if($parameter != null && !$parameter.isEmpty())][io.intino.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/")];
	io.intino.alexandria.rest.AlexandriaSparkBuilder.setUI(true);
	io.intino.alexandria.rest.AlexandriaSparkBuilder.addParameters(this.authService, this.editorService);
end

def type(service & rest) trigger(setup)
	io.intino.alexandria.rest.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/");
end

def type(datalake & mirror) trigger(setup)
	this.datalake = new Datalake(new java.io.File($path+parameter), $parameter...[, ]);
end

def type(datalake) trigger(setup)
	this.datalake = new io.intino.alexandria.datalake.file.FileDatalake(new java.io.File($path+parameter));
end

def type(jms) trigger(messageHub)
	new $package.MessageHub($parameter...[, ])
end

def trigger(messageHub)
	new $package.MessageHub(this)
end

def type(service & jmx) trigger(jmx)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new JMX$name+SnakeCaseToCamelCase+FirstUpperCase().init((($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this));
	Logger.info("JMX service $name: started!");
end

def type(service & slack) trigger(slack)
	if ($parameter == null || $parameter.isEmpty()) return;
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new $name+SnakeCaseToCamelCase+FirstUpperCase~SlackBot(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, $parameter);
	Logger.info("Slack service $name: started!");
end

def type(service & rest) trigger(rest)
	$name+SnakeCaseToCamelCase+FirstUpperCase~Service.setup(io.intino.alexandria.rest.AlexandriaSparkBuilder.instance(), ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this).start();
	Logger.info("REST service $name: started!");
end

def type(service & ui) trigger(ui)
	[if ($parameter == null || !io.intino.alexandria.rest.AlexandriaSparkBuilder.isUI()) return;]
	io.intino.alexandria.ui.UISpark sparkInstance = (io.intino.alexandria.ui.UISpark) io.intino.alexandria.rest.AlexandriaSparkBuilder.instance();
	io.intino.alexandria.ui.services.push.PushService pushService = new io.intino.alexandria.ui.services.push.PushService();
	$package+validPackage.ui.$name+SnakeCaseToCamelCase+FirstUpperCase~Service.init(sparkInstance, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, pushService);
	io.intino.alexandria.ui.UiElementsService.initDisplays(sparkInstance, pushService);
	$use...[$NL]
	sparkInstance.start();
	Logger.info("UI $name: started!");
end

def trigger(use)
	$this.initDisplays(sparkInstance, pushService);
end

def type(service & jms) trigger(init)
	try {
		connection = new org.apache.activemq.ActiveMQConnectionFactory($parameter...[, ]).createConnection();
		java.lang.Thread thread = new java.lang.Thread(() -> {
			try {
				connection.start();
				this.$name+SnakeCaseToCamelCase+firstLowerCase = new $name+SnakeCaseToCamelCase+firstUpperCase~Service(connection, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
				Logger.info("JMS service $name: started!");
			} catch (javax.jms.JMSException e) {
				Logger.error(e.getMessage());
			}
		}, "jms init");
		thread.start();
		thread.join(10000);
	} catch (javax.jms.JMSException | InterruptedException e) {
		Logger.error(e.getMessage());
	}
end

def type(task) trigger(init)
	Tasks.init(this.scheduler, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
end

def type(workflow) trigger(init)
	this.workflow = new $package.bpm.Workflow(this.messageHub, this.configuration().workspace());
end

def type(datalake & mirror) trigger(init)
	this.datalake.init();
end

def type(messageHub) trigger(init)
	[if(this.messageHub != null) {
		$mounter...[$NL]
	}
	]
	[registerFeeders();$feeder+hide]
	Logger.info("Message Hub connected!");
end

def type(realtime) trigger(mounter)
	$subscription...[$NL]
end

def trigger(subscription)
	this.messageHub.attachListener("$tankName", "$subscriberId", m -> new $package.mounters.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).handle(m));
end

def type(service & jmx) trigger(field)
	private io.intino.alexandria.jmx.JMXServer $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & slack) trigger(field)
	private io.intino.alexandria.slack.Bot $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & jms) trigger(field)
	private $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(task) trigger(field)
	private io.intino.alexandria.scheduler.AlexandriaScheduler scheduler = new io.intino.alexandria.scheduler.AlexandriaScheduler();
end

def type(datalake & mirror) trigger(field)
	private $package.Datalake datalake;
end

def type(datalake) trigger(field)
	private io.intino.alexandria.datalake.Datalake datalake;
end

def type(messageHub) trigger(field)
	private $package.MessageHub messageHub;
end

def type(workflow) trigger(field)
	private $package.bpm.Workflow workflow;
end

def type(service & jms) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase() {
		return $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(datalake) trigger(getter)
	public io.intino.alexandria.datalake.Datalake datalake() {
		return this.datalake;
	}
end

def type(messageHub) trigger(getter)
	public io.intino.alexandria.message.MessageHub messageHub() {
		return this.messageHub;
	}

	[public io.intino.alexandria.core.Feeders feeders() {
		return io.intino.alexandria.core.Feeders.get();
	}

	private void registerFeeders() {
		$feeder...[$NL]
	}]
end

def type(datalake) trigger(getter)
	public $package.bpm.Workflow workflow() {
		return this.workflow;
	}
end

def type(datamart) trigger(getter)
	public java.io.File $name+firstLowerCase~Datamart() {
		return new java.io.File(this.configuration().get("$path+parameter"));
	}
end

def trigger(feeder)
	io.intino.alexandria.core.Feeders.get().register(new $package+validPackage.datalake.feeders.$name+FirstUpperCase(($box+FirstUpperCase~Box) this));
end

def type(service & slack) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~SlackBot $name+SnakeCaseToCamelCase+firstlowerCase() {
		return ($name+SnakeCaseToCamelCase+firstUpperCase~SlackBot) $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def trigger(spark)
	io.intino.alexandria.rest.AlexandriaSparkBuilder.instance().stop();
end

def type(service) type(jms) trigger(close)
	if ($name+SnakeCaseToCamelCase+firstlowerCase != null) $name+SnakeCaseToCamelCase+firstlowerCase.closeSession();
end

def type(messageHub) trigger(close)
	if (messageHub != null) messageHub.stop();
end

def type(service) trigger(close)
end

def type(service)
end


def type(task) trigger(getter)
	public io.intino.alexandria.scheduler.AlexandriaScheduler scheduler() {
		return this.scheduler;
	}
end

def trigger(authservice)
	protected abstract io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl);
end

def trigger(editorService)
	protected abstract io.intino.alexandria.ui.services.EditorService editorService(java.net.URL editorServiceUrl);

	public io.intino.alexandria.ui.services.EditorService editorService() {
		return this.editorService;
	}
end

def trigger(registerSoul)
	public java.util.List<Soul> souls() {
		return new java.util.ArrayList<>(uiSouls.values());
	}

		public java.util.Optional<Soul> soul(String clientId) {
			return java.util.Optional.ofNullable(uiSouls.get(clientId));
		}

		public void registerSoul(String clientId, Soul soul) {
			[if (owner != null) (($parent~Box) owner).registerSoul(clientId, soul);]
			uiSouls.put(clientId, soul);
		}

		public void unRegisterSoul(String clientId) {
			[if (owner != null) (($parent~Box) owner).unRegisterSoul(clientId);]
			uiSouls.remove(clientId);
			if (uiSouls.size() <= 0) notifySoulsClosed();
		}

		public void onSoulsClosed(io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed listener) {
			[if (owner != null) (($parent~Box) owner).onSoulsClosed(listener);]
			this.soulsClosedListeners.add(listener);
		}

		private void notifySoulsClosed() {
			soulsClosedListeners.forEach(l -> l.accept());
		}
end


def trigger(authenticationValidator)
	public abstract io.intino.alexandria.rest.security.$type+FirstUpperCase~AuthenticationValidator authenticationValidator();
end


def type(custom) trigger(parameter)
	configuration().get("$value+customParameter")
end

def type(custom) trigger(authentication)
	url(configuration().get("$value+customParameter"))
end

def type(custom) trigger(edition)
	url(configuration().get("$value+customParameter"))
end

def type(int) trigger(parameter)
	$value
end

def trigger(parameter)
	"$value"
end

def trigger(authentication)
	url("$value")
end

def trigger(edition)
	url("$value")
end

def trigger(parentInit)
end

def trigger(hide)

end

def trigger(hideUi)
	;
end

def trigger(hideUi)
    ;
end

def trigger(hideDatalake)
    ;
end
