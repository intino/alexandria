def type(mounter & src)
	package $package+validPackage.datalake.mounters;

    import io.intino.alexandria.mapp.MappStream.Item;

    import java.util.function.Function;

    public class $name+snakeCaseToCamelCase+FirstUpperCase~MounterSource {

    	$column+method...[$NL$NL]
	}
end

def type(mounter & realtime)
	package $package+validPackage.datalake.mounters;

	import $package+validPackage.$box+firstUpperCase~Box;
	import io.intino.alexandria.inl.Message;
	import io.intino.alexandria.inl.MessageCast;
    import io.intino.ness.datalake.file.eventsourcing.EventHandler;
	$schemaImport

	public class $name+snakeCaseToCamelCase+FirstUpperCase~Mounter {
		public $box+validName+firstUpperCase~Box box;

		public void handle(Message message) {
			[$type+typeClass object = MessageCast.cast(message).as($type+typeClass.class);]
		}
	}
end

def type(mounter & batch & population)
	package $package+validPackage.datalake.mounters;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.tabb.ColumnStream;
	import io.intino.alexandria.tabb.TabbBuilder;
	import io.intino.alexandria.tabb.streamers.MappColumnStreamer;
    import io.intino.alexandria.tabb.streamers.MappColumnStreamer.SimpleSelector;
	import $package+validPackage.box.datalake.Datalake;
	import $package+validPackage.box.datalake.$name+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions;
	import $package+validPackage.$box+firstUpperCase~Box;

	public class $name+snakeCaseToCamelCase+FirstUpperCase~Mounter {
		public $box+validName+firstUpperCase~Box box;

		public void pump(Timetag from, Timetag to, Predicate<Timetag> filter) {
			from.iterateTo(to).forEach(timetag -> {
				TabbBuilder tabbBuilder = new TabbBuilder();
				$splittedColumns
				$column...[$NL]
				try {
					tabbBuilder.[$format].save(new File(box.datamart(), "$name+lowercase~-" + timetag.value() + ".tabb"));));
				} catch (IOException e) {
					Logger.error(e);
				}
			});
		}
	}
end

def trigger(splittedColumns)
	for (String split : Datalake.splits) {
		$column...[$NL]
	}
end

def type(splitted) trigger(column)
	new MappColumnStreamer(box.datalake().setStore().tank(split + ".$fullName").on(timetag).index()).add(new SimpleSelector(split + ".$name", ColumnStream.Type.$type+FirstUpperCase, $mounter+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions.$name$facet()));
end

def trigger(column)
	new MappColumnStreamer(box.datalake().setStore().tank(".$fullName").on(timetag).index()).add(new SimpleSelector(".$name", ColumnStream.Type.$type+FirstUpperCase, $mounter+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions.$name$facet()));
end

def type(column) trigger(method)
	public static Function<Item, $type+FirstUpperCase> revisionInspeccionId() {
		return Item::key;
	}
end

def trigger(format)
	add(TabbBuilder.Format.$this+lowerCase)
end

def type(schemaImport)
	import $package.schemas.*;
end

def attribute(message) trigger(typeClass)
	io.intino.alexandria.inl.Message
end

def type(schema) trigger(typeClass)
	$package.schemas.$name+FirstUpperCase
end

def type(schema) trigger(typeName)
	$name+firstLowerCase
end

def trigger(typeName)
	message
end