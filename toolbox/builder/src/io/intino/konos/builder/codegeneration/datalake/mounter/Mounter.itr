def type(mounter & src)
	package $package+validPackage.datalake.mounters;

    import io.intino.alexandria.mapp.MappStream.Item;

    import java.util.function.Function;

    public class $name+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions {

    	$column+method...[$NL$NL]
	}
end

def type(mounter & batch)
	package $package+validPackage.datalake.mounters;



    public class $name+snakeCaseToCamelCase+FirstUpperCase~Mounter {

    	public void execute() {

    	}
	}
end

def type(mounter & realtime)
	package $package+validPackage.datalake.mounters;

	import $package+validPackage.$box+firstUpperCase~Box;
	import io.intino.alexandria.inl.Message;
	import io.intino.alexandria.inl.MessageCast;
	import io.intino.alexandria.logger.Logger;

	$schemaImport

	public class $name+snakeCaseToCamelCase+FirstUpperCase~Mounter {
		public $box+validName+firstUpperCase~Box box;

		public void handle(Message message) {
			[try {
				$type+typeClass object = MessageCast.cast(message).as($type+typeClass.class);
			} catch (IllegalAccessException e) {
				Logger.error(e);
			}]
		}
	}
end

def type(mounter & population)
	package $package+validPackage.datalake.mounters;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.tabb.ColumnStream;
	import io.intino.alexandria.tabb.TabbBuilder;
	import io.intino.alexandria.tabb.streamers.MappColumnStreamer;
    import io.intino.alexandria.tabb.streamers.MappColumnStreamer.SimpleSelector;
	import $package+validPackage.box.datalake.Datalake;
	import $package+validPackage.box.datalake.$name+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions;
	import $package+validPackage.$box+firstUpperCase~Box;

	import java.util.function.Predicate;
	import java.io.IOException;

	public class $name+snakeCaseToCamelCase+FirstUpperCase~Mounter {
		public $box+validName+firstUpperCase~Box box;

		public void pump(Timetag from, Timetag to, Predicate<Timetag> filter) {
			from.iterateTo(to).forEach(timetag -> {
				TabbBuilder tabbBuilder = new TabbBuilder();
				$splittedColumns
				$column...[$NL]
				try {
					tabbBuilder[$format].save(new java.io.File(box.datamart(), "$name+lowercase~-" + timetag.value() + ".tabb"));));
				} catch (IOException e) {
					Logger.error(e);
				}
			});
		}
	}
end

def trigger(splittedColumns)
	for (String split : Datalake.splits) {
		$column...[$NL]
	}
end

def type(splitted) trigger(column)
	new MappColumnStreamer(box.datalake().setStore().tank(split + ".$fullName").on(timetag).index()).add(new SimpleSelector(split + ".$name", ColumnStream.Type.$type+FirstUpperCase, $mounter+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions.$name$facet()));
end

def trigger(column)
	new MappColumnStreamer(box.datalake().setStore().tank(".$fullName").on(timetag).index()).add(new SimpleSelector(".$name", ColumnStream.Type.$type+FirstUpperCase, $mounter+snakeCaseToCamelCase+FirstUpperCase~MounterFunctions.$name$facet()));
end

def type(column) attribute(type:Long) trigger(method)
	public static Function<Item, $type+FirstUpperCase> $name$facet() {
		return Item::key;
	}
end

def type(column) attribute(type:Double) trigger(method)
	public static Function<Item, $type+FirstUpperCase> $name$facet() {
		return i -> $type+FirstUpperCase.valueOf(i.value());
	}
end

def type(column) attribute(type:Integer) trigger(method)
	public static Function<Item, $type+FirstUpperCase> $name$facet() {
		return i -> Double.valueOf(i.value());
	}
end


def type(column) attribute(type:Timetag) trigger(method)
	public static Function<Item, io.intino.alexandria.Timetag> $name$facet() {
		return i -> io.intino.alexandria.Timetag.of(i.value());
	}
end

def type(column) attribute(type:Nominal) trigger(method)
	public static Function<Item, String> $name$facet() {
		return Item::value;
	}
end

def type(column) trigger(method)
	public static Function<Item, $type+FirstUpperCase> $name$facet() {
		return Item::value;
	}
end

def trigger(format)
	.add(TabbBuilder.Format.$this+lowercase)
end

def type(schemaImport)
	import $package.schemas.*;
end

def attribute(message) trigger(typeClass)
	io.intino.alexandria.inl.Message
end

def type(schema) trigger(typeClass)
	$package.schemas.$name+FirstUpperCase
end

def type(schema) trigger(typeName)
	$name+firstLowerCase
end

def trigger(typeName)
	message
end