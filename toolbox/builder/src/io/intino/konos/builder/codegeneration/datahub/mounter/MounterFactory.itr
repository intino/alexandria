def type(factory)
	package $package.mounters;

    import io.intino.alexandria.event.Event;
    import $package+validPackage.$box+firstUpperCase~Box;

    import java.util.HashMap;
    import java.util.List;
    import java.util.Map;
    import java.util.stream.Stream;

    public class MounterFactory {
    	private Map<String, List<Mounter>> mounters = new HashMap<>();

    	public MounterFactory($box+firstUpperCase~Box box) {
    		$event+put...[$NL]
    	}

    	public List<Mounter> mountersOf(Event event) {
			return mountersOf(event.toMessage().type());
		}

    	public List<Mounter> mountersOf(String eventType) {
    		return mounters.get(eventType);
    	}

    	public void handle(Event... events) {
    		Stream.of(events).forEach(event -> {
    			List<Mounter> mounters = mountersOf(event);
    			if (mounters != null) mounters.forEach(m -> m.handle(event));
    		});
    	}
    }
end

def trigger(put)
	mounters.put("$type", java.util.List.of($mounter...[, ]));
end

def trigger(mounter)
	new $package.$datamart+lowercase.mounters.$name+FirstUpperCase(box)
end