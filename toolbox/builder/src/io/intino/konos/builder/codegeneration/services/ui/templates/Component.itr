def type(reference) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].] $name+firstUpperCase $name;
end

def type(reference & item)
	if ($name == null) $name = register(new $name+firstUpperCase([($concreteBox+firstUpperCase~Box)]box()).<$name+firstUpperCase>id("$id").<$name+firstUpperCase>item($owner.this.item()).owner($owner.this));
end

def type(reference)
	if ($name == null) $name = register(new $name+firstUpperCase([($concreteBox+firstUpperCase~Box)]box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(component & child & collection) trigger(declarations)
	public [$ancestors+firstUpperCase...[.].] $name+firstUpperCase $name;
	[$heading+declarations...[$NL]]
end

def type(component & child & stamp & single) trigger(declarations)
	public $template+firstUpperCase $name;
end

def type(component & child) trigger(declarations)
	public [$ancestors+firstUpperCase...[.].] $name+firstUpperCase $name;
	[$component+declarations...[$NL]]
end

def type(component & child & stamp & single) trigger(declaration)
	public $template+firstUpperCase $name;
end

def type(component & child) trigger(declaration)
	public [$ancestors+firstUpperCase...[.].] $name+firstUpperCase $name;
end

def type(method & multiple)
	@Override
	public $componentType add([$objectType value]) {
		$componentType child = new $componentType(box());
		child.id(java.util.UUID.randomUUID().toString());
		add(child, "$name");
		[child.value($objectTypeValue);]
		return child;
	}
	public void clear() {
	    super.clear("$name");
	}
end

def type(method & portal)
	@Override
	protected io.intino.alexandria.ui.displays.ProxyDisplay buildProxy() {
        String key = "$inUrl".replace("{", "").replace("}", "");
        java.util.Map<String, String> args = box().configuration().args();
        String url = args.getOrDefault(key, "$inUrl");
	    return add(new $inPackage~.displays[.$type+lowercase~s].$to+firstUpperCase~Proxy(session(), new io.intino.alexandria.ui.spark.pages.Unit("$inName", url)));
	}
end

def type(method & highlighted)
	public $name+firstUpperCase textColor(String color) {
	    this._textColor(color);
	    this._refreshHighlight();
	    return this;
	}

	public $name+firstUpperCase backgroundColor(String color) {
	    this._backgroundColor(color);
	    this._refreshHighlight();
	    return this;
	}
end

def type(method & signed)
    public $name+firstUpperCase signChecker(io.intino.alexandria.ui.displays.components.actionable.SignChecker checker) {
        this._signChecker(checker);
        return this;
    }
end

def type(method & addressable)
    @Override
    public $name+firstUpperCase address(java.util.function.Function<String, String> addressFromPathResolver) {
        address(addressFromPathResolver.apply(path()));
        return this;
    }
end

def type(method & collection & table)
	[$selectionMethod]

	public $name+firstUpperCase~Row create([$itemClass item]) {
		$name+firstUpperCase~Row row = new $name+firstUpperCase~Row([($concreteBox+firstUpperCase~Box)]box());
		row.id(java.util.UUID.randomUUID().toString());
		[row.item($itemVariable);]
		return row;
	}
end

def type(method & collection)
	$selectionMethod
	[$item+addMethod...[$NL$NL]]

	[$item+removeMethod...[$NL$NL]]
end

def type(component & child) trigger(method)
end

def type(component & child & stamp & single) trigger(class)
end

def type(component & child & collection) trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		[$reference+declaration...[$NL]]
		[$heading+declaration...[$NL]]

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			[$properties+common]
			[$properties+specific]
		}

		@Override
		public void $methodName() {
			super.$methodName();
			[$reference...[$NL]]
			[$heading+child...[$NL]]
		}
		$methods
		[$component+class...[$NL$NL]]
		[$component+method...[$NL$NL]]
	}
end

def attribute(notifyReady)
    notifyReady();
end

def type(component & child & block & conditional) trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		[$reference+declaration...[$NL]]
		[$component+declaration...[$NL]]

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			[$properties+common]
			[$properties+specific]
		}

		@Override
		public void $methodName() {
			super.init();
			[$reference...[$NL]]
			[$component+child...[$NL]]
			[$component+conditionalReferences...[$NL]]
		}
		$methods
		[$component+class...[$NL$NL]]
		[$component+method...[$NL$NL]]
	}
end

def type(component & child) trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		[$reference+declaration...[$NL]]
		[$component+declaration...[$NL]]

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			[$properties+common]
			[$properties+specific]
		}

		@Override
		public void $methodName() {
			super.init();
			[$reference...[$NL]]
			[$component+child...[$NL]]
		}
		$methods
		[$component+class...[$NL$NL]]
		[$component+method...[$NL$NL]]
	}
end

def type(extends & multiple)
	io.intino.alexandria.ui.displays.components.Multiple<$abstractBox+type, $componentType, $objectType>
end

def type(extends & collection & table)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, io.intino.alexandria.ui.displays.components.Row, $itemClass>
end

def type(extends & collection)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, $componentType, $itemClass>
end

def type(extends & item)
	io.intino.alexandria.ui.displays.components.Item<$abstractBox+type, $itemClass>
end

def type(extends & stamp)
	$type+firstUpperCase
end

def type(extends)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<io.intino.alexandria.ui.displays.notifiers.$type+firstUpperCase$facet...[]~Notifier, $abstractBox+type>
end

def type(component & child & multipleblock) trigger(rootChildReferences)
end

def type(component & child & collection) trigger(rootChildReferences)
	[if ($parent != null)] $name = [$ancestorsNotMe...[.].]$name;
	[$heading+rootChildReferences...[$NL]]
end

def type(component & child) trigger(rootChildReferences)
	[if ($parent != null)] $name = [$ancestorsNotMe...[.].]$name;
	[$component+rootChildReferences...[$NL]]
end

def type(component & child & collection) trigger(childReferences)
	[if ($parent != null)] $name = [$ancestors...[.].]$name;
	[$heading+childReferences...[$NL]]
end

def type(component & child) trigger(childReferences)
	[if ($parent != null)] $name = [$ancestors...[.].]$name;
	[$component+childReferences...[$NL]]
end

def type(component & child & collection) trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	[$heading+rootChildReferences...[$NL]]
end

def type(component & child & stamp & multiple) trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase([($concreteBox+firstUpperCase~Box)]box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(component & child & stamp & single) trigger(rootReferences)
	if ($name == null) $name = register(new $template+firstUpperCase$generic([($concreteBox+firstUpperCase~Box)]box()).id("$id"));
end

def type(component & child) trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	[$component+rootChildReferences...[$NL]]
end

def type(component & child & collection) trigger(references)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	[$heading+childReferences...[$NL]]
end

def type(component & child) trigger(references)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	[$component+childReferences...[$NL]]
end

def type(component & child & block) trigger(conditionalReferences)
	[$component+conditionalReferences...[$NL]]
end

def type(component & child) trigger(conditionalReferences)
	if ($name == null) $name = [$ancestorsNotMe...[.].]$name;
	[$binding]
end

def type(component & child & collection) trigger(initializations)
	[$binding]
	[$heading+initializations...[$NL]]
end

def type(component & child) trigger(initializations)
	[$binding]
	[$component+initializations...[$NL]]
end

def type(component & child & stamp & multiple)
	if ($name == null) $name = register(new $name+firstUpperCase([($concreteBox+firstUpperCase~Box)]box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(component & child & stamp & single)
	if ($name == null) $name = register(new $template+firstUpperCase$generic([($concreteBox+firstUpperCase~Box)]box()).id("$id"));
end

def type(component & child)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
end

def type(facet)
	$name+firstUpperCase
end

def type(binding & toolbar)
	if ($name != null) $name.bindTo($collection);
end

def type(binding & grouping)
	if ($name != null) $name.bindTo($collection...[,]);
end

def type(binding & sorting)
	if ($name != null) $name.bindTo($collection...[,]);
end

def type(binding & searchbox)
	if ($name != null) $name.bindTo($collection...[,]);
end

def type(binding & download)
	if ($name != null) $name.bindTo($collection...[,]);
end

def type(binding & temporalslider)
	if ($name != null) $name.bindTo($collection...[,]);
end

def type(binding & openblock)
	if ($name != null) $name.bindTo($block);
end

def type(binding & opendialog)
	if ($name != null) $name.bindTo($dialog);
end

def type(binding & closedialog)
	if ($name != null) $name.bindTo($dialog);
end

def type(binding & opendrawer)
	if ($name != null) $name.bindTo($drawer);
end

def type(binding & closedrawer)
	if ($name != null) $name.bindTo($drawer);
end

def type(binding & openpopover)
	if ($name != null) $name.bindTo($popover);
end

def type(binding & opennextitem)
	if ($name != null) $name.bindTo($collection);
end

def type(binding & openpreviousitem)
	if ($name != null) $name.bindTo($collection);
end

def type(binding & decisiondialog)
	if ($name != null) $name.bindTo($selector);
end

def type(binding & collectiondialog)
	if ($name != null) $name.bindTo($collection);
end

def type(binding)
	if ($name != null) $name.bindTo($selector, "$option");
end

def type(implements & selectable)
	implements io.intino.alexandria.ui.displays.components.collection.Selectable
end

def type(implements & option)
	implements io.intino.alexandria.ui.displays.components.selector.SelectorOption
end

def type(implements & dynamicloaded)
	implements io.intino.alexandria.ui.displays.components.DynamicLoaded
end

def type(implements & addressable & action)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>
end

def type(implements & addressable & selector)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>
end

def type(implements)
	implements --undefined--
end

def type(properties & actionable) trigger(common)
	[_title("$title");]
	[_color("$color");]
	[_readonly($readonly);]
	[_mode(io.intino.alexandria.ui.displays.components.Actionable.Mode.valueOf("$mode+firstUpperCase"));]
	[$actionableMode]
end

def type(properties) trigger(common)
	[label("$label");]
	[name("$name");]
	[_color("$color");]
end

def type(properties & portal) trigger(specific)
	[_to("$to","$inName");]
	[$parameter...[$NL]]
end

def type(properties & proxyStamp) trigger(specific)
	_proxy(new $proxyPackage.$proxyDisplay+firstUpperCase(new io.intino.alexandria.ui.spark.pages.Unit("$proxyUseName", $proxyUseUrl)));
end

def type(properties & selector) trigger(specific)
	[_multipleSelection($multipleSelection);]
	[_readonly($readonly);]
	[_path("$path");]
end

def type(properties & image & avatar) trigger(specific)
	[_text("$text");]
end

def type(properties & materialicon) trigger(specific)
	[_icon("$icon");]
end

def type(properties & icon) trigger(specific)
	[$icon+resourceMethod]
end

def type(properties & block) trigger(specific)
	[$background+resourceMethod]
	[$badge]
	[$drawer]
	[$popover]
end

def type(properties & image) trigger(specific)
	[$value+resourceMethod]
	[$defaultValue+resourceMethod]
end

def type(properties & file) trigger(specific)
	[$value+resourceMethod]
end

def type(properties & openpage) trigger(specific)
	[_path("$path");]
end

def type(properties & opensite) trigger(specific)
	[_site("$site");]
end

def type(properties & switch) trigger(specific)
    [_path("$path");]
    [_state(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.valueOf("$state"));]
end

def type(properties & toggle) trigger(specific)
    [_path("$path");]
    [_state(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.valueOf("$state"));]
end

def type(properties & action) trigger(specific)
	[_path("$path");]
end

def type(properties & export) trigger(specific)
	[_from($from~L);]
	[_to($to~L);]
	[_min($min~L);]
	[_max($max~L);]
	[_range($rangeMin,$rangeMax);]
	[_options(java.util.Arrays.asList("$option...[","]"));]
end

def type(properties & download) trigger(specific)
	[_options(java.util.Arrays.asList("$option...[","]"));]
end

def type(properties & download & selection) trigger(specific)
	[_options(java.util.Arrays.asList("$option...[","]"));]
end

def type(properties & chart) trigger(specific)
	[_query("$query");]
	[_serverUrl("$serverUrl");]
	[$input+inputMethod]
	[_output("$output");]
end

def type(properties & dashboard) trigger(specific)
    [$serverScript+resourceMethod]
    [$uiScript+resourceMethod]
	[$resource+resourceMethod...[$NL]]
	[$parameter...[$NL]]
end

def type(properties & number) trigger(specific)
	[_value($value);]
	[_min($min);]
	[_max($max);]
	[_readonly($readonly);]
end

def type(properties & date) trigger(specific)
	[_value(java.time.Instant.ofEpochMilli($value~L));]
	[_min(java.time.Instant.ofEpochMilli($min~L));]
	[_max(java.time.Instant.ofEpochMilli($max~L));]
end

def type(properties & text) trigger(specific)
	[_value("$defaultValue");]
	[_readonly($readonly);]
end

def type(properties & location) trigger(specific)
	[$icon+resourceMethod]
	[_value("$value");]
end

def type(properties & collection & map) trigger(specific)
	[_type(io.intino.alexandria.ui.displays.components.Map.Type.valueOf("$type"));]
	[$icon+resourceMethod]
	[$layer+resourceMethod]
end

def type(properties & collection) trigger(specific)
	[_source(new io.intino.alexandria.ui.sources.$sourceClass+firstUpperCase());]
	[_pageSize($pageSize);]
end

def type(properties & slider) trigger(specific)
    [_value($value);]
    [_range($min,$max);]
    [_animation($interval,$loop);]
    [_readonly($readonly);]
    [$ordinal+ordinalMethod...[$NL]]
end

def type(properties & temporalslider) trigger(specific)
    [_value($value);]
    [_range(java.time.Instant.ofEpochMilli($min~L),java.time.Instant.ofEpochMilli($max~L));]
    [_animation($interval,$loop);]
    [_readonly($readonly);]
    [$ordinal+ordinalMethod...[$NL]]
end

def type(properties & collectiondialog) trigger(specific)
    [_allowSearch($allowSearch);]
end

def type(properties) trigger(specific)
end

def type(inputMethod & csv) trigger(inputMethod)
	_input(new io.intino.alexandria.ui.displays.components.chart.datasources.CSVDataSource($owner.class.getResource("$value")));
end

def type(inputMethod & source) trigger(inputMethod)
	_input(new $value());
end

def type(parameterMethod)
	_add("$name", "$value");
end

def trigger(resourceMethod)
	_$name($owner.class.getResource("$value"));
end

def trigger(ordinalMethod)
	_add(new io.intino.alexandria.ui.displays.components.slider.ordinals.$name+firstUpperCase~Ordinal());
end

def type(actionableMode & splitbutton)
    [_options(java.util.Arrays.asList("$option...[","]"));]
    [_option("$default");]
end

def type(actionableMode & iconbutton)
	_icon("$icon");
end

def type(actionableMode & icontoggle)
	_icon("$icon");
end

def type(actionableMode & materialiconbutton)
	_icon("$icon");
end

def type(actionableMode & materialicontoggle)
	_icon("$icon");
end

def type(badge)
	[_value($value);]
end

def type(drawer)
end

def type(popover)
end

def type(selectionMethod)
	public void onSelect(io.intino.alexandria.ui.displays.events.SelectionListener listener) {
		super.addSelectionListener(listener);
	}
end

def type(item) trigger(addDeclaration)
	$name(add$name+firstUpperCase(new $name+firstUpperCase(box())[, $itemVariable]))
end

def type(item) trigger(type)
	$name+firstUpperCase
end

def type(item) trigger(addRow)
	$name = register(add$name+firstUpperCase(box()));
end

def type(item) trigger(property)
	public $name+firstUpperCase $name;
end

def type(item) trigger(addMethod)
	$methodAccessibility $name+firstUpperCase create$methodName+firstUpperCase([$itemClass element]) {
		$name+firstUpperCase result = new $name+firstUpperCase([($concreteBox+firstUpperCase~Box)]box());
		result.id(java.util.UUID.randomUUID().toString());
		[result.item($itemVariable);]
		return result;
	}
end

def type(itemClass & map)
    io.intino.alexandria.ui.model.PlaceMark<$value>
end

def type(itemClass)
    $value
end

def type(itemVariable & map)
    element.item()
end

def type(itemVariable)
    element
end

def type(useUrl & custom)
    box().configuration().get("$value")
end

def type(useUrl)
    "$value"
end