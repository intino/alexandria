package io.intino.konos.builder.codegeneration.services.ui.templates;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class PassiveViewRequesterTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("display","accessible"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".ui.displays.requesters;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.")).output(expression().output(mark("packageType")).output(literal("s."))).output(mark("name", "FirstUppercase")).output(literal(";\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.")).output(expression().output(mark("packageType")).output(literal("s."))).output(mark("name", "FirstUpperCase")).output(literal("Proxy;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;\nimport io.intino.alexandria.ui.spark.UISparkManager;\n\npublic class ")).output(mark("name", "FirstUpperCase")).output(literal("ProxyRequester extends io.intino.alexandria.ui.displays.requesters.DisplayProxyRequester {\n\n\tpublic ")).output(mark("name", "FirstUpperCase")).output(literal("ProxyRequester(UISparkManager manager, DisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\tString operation = operation();\n        ")).output(mark("name", "FirstUppercase")).output(literal(" display = personifiedDisplay();\n        if (display == null) return;\n        if (operation.equals(\"refreshPersonifiedDisplay\")) {\n            ")).output(mark("parameter").multiple("\n")).output(literal("\n            display.refresh();\n            return;\n        }\n        ")).output(expression().output(literal("else ")).output(mark("request").multiple("\nelse "))).output(literal("\n        super.execute();\n\t}\n}")),
			rule().condition((type("display"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".ui.displays.requesters;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.")).output(expression().output(mark("packageType")).output(literal("s."))).output(mark("name", "FirstUpperCase")).output(literal(";\nimport io.intino.alexandria.exceptions.*;\nimport ")).output(mark("package", "validPackage")).output(literal(".*;\n")).output(mark("schemaImport")).output(literal("\n\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\nimport io.intino.alexandria.exceptions.AlexandriaException;\nimport io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;\nimport io.intino.alexandria.ui.spark.UISparkManager;\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal("Requester extends ")).output(mark("parentType")).output(literal(" {\n\n\tpublic ")).output(mark("name", "firstUpperCase")).output(literal("Requester(UISparkManager manager, DisplayNotifierProvider notifierProvider) {\n\t\tsuper(manager, notifierProvider);\n\t}\n\n\t@Override\n\tpublic void execute() throws AlexandriaException {\n\t\t")).output(mark("name", "firstUpperCase")).output(literal(" display = display();\n\t\tif (display == null) return;\n\t\tString operation = operation();\n\n\t\t")).output(expression().output(mark("request").multiple("\nelse "))).output(literal("\n\n\t\tsuper.execute();\n\t}\n}")),
			rule().condition((attribute("extensionof")), (trigger("parenttype"))).output(mark("parent", "firstUpperCase")).output(literal("Requester")),
			rule().condition((trigger("parenttype"))).output(literal("io.intino.alexandria.ui.displays.requesters.")).output(expression().output(mark("type", "class", "FirstUpperCase"))).output(literal("Requester")),
			rule().condition((attribute("", "Display")), (trigger("class"))).output(literal("Display")),
			rule().condition((allTypes("request","asset")), (trigger("request"))).output(literal("if (operation.equals(\"")).output(mark("name")).output(literal("\")) {\n\tio.intino.alexandria.ui.spark.UIFile file = display.")).output(mark("name")).output(literal("(")).output(mark("parameter")).output(literal(");\n\tif (file == null) return;\n\tmanager.write(file.content(), file.label(), file.embedded());\n\treturn;\n}")),
			rule().condition((type("request")), (trigger("request"))).output(literal("if (operation.equals(\"")).output(mark("name")).output(literal("\")) {\n\tdisplay.")).output(mark("name")).output(literal("(")).output(mark("parameter")).output(literal(");\n\treturn;\n}")),
			rule().condition((allTypes("parameter","accessible")), (trigger("parameter"))).output(literal("display.")).output(mark("value", "firstLowercase")).output(literal("(manager.fromQuery(\"")).output(mark("value")).output(literal("\", String.class));")),
			rule().condition((type("list")), (trigger("parameter"))).output(literal("manager.fromQuery(\"v\", ")).output(mark("value")).output(literal("[].class)")),
			rule().condition((allTypes("parameter","file")), (trigger("parameter"))).output(literal("manager.fromForm(\"v\", ")).output(mark("value")).output(literal(".class)")),
			rule().condition((type("parameter")), (trigger("parameter"))).output(literal("manager.fromQuery(\"v\", ")).output(mark("value")).output(literal(".class)")),
			rule().condition((trigger("parameter"))),
			rule().condition((type("schemaImport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;"))
		);
	}
}