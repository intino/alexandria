def type(action & jms & process) !type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	$schemaImport

	public class $name+firstUpperCase~Action implements $package.$service+firstUpperCase~Service.InboxDispatcher<[$returnType?Void]> {
		private $box+firstUpperCase~Box box;

		public $name+firstUpperCase~Action($box+firstUpperCase~Box box) {
			this.box = box;
		}

		public void onRequest([$parameter+onlyType input]) {
			//TODO save input
		}

		public [$returnType?Void] onResponse() {
			return null;
		}
	}
end

def type(action & notification) !type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.http.pushservice.Client;
    import io.intino.alexandria.http.spark.SparkNotifier;

	public class $name+snakecaseToCamelCase+firstUpperCase~Action {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;
		$contextProperty
		[$parameter+type...[$NL]]

		public void onOpen(Client client, SparkNotifier notifier) {
			//register listener
		}

		public void onClose(Client client) {
			//unregister listener
		}
	}
end

def type(action) !type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import io.intino.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	$schemaImport

	public class $name+snakecaseToCamelCase+firstUpperCase~Action {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;
		$contextProperty
		[$parameter+type...[$NL]]

		public [$returnType?void] execute() [throws $throws+FirstUpperCase...[, ]] {
			$returnType+return
		}
	}
end

def type(ui & accessibleDisplay)
	package $package+validPackage.ui.pages;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import $package+validPackage.ui.displays[.$packageType~s].$display+snakecaseToCamelCase+firstUpperCase;
	import io.intino.alexandria.ui.Soul;

	public class $name+snakecaseToCamelCase+firstUpperCase~ProxyPage extends io.intino.alexandria.ui.spark.pages.ProxyPage {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;
		[$parameter+type...[$NL]]
		public Soul soul;

		public void execute() {
			$display+snakecaseToCamelCase+firstUpperCase display = new $display+snakecaseToCamelCase+firstUpperCase(box);
    		display.id(personifiedDisplay);
			$parameter+methodCall...[$NL]
			soul.register(display);
			display.init();
			display.refresh();
		}
	}
end

def type(ui & action & gen)
	package $package+validPackage.ui.pages;

	import $package+validPackage.$box+snakecaseToCamelCase+firstUpperCase~Box;
	import io.intino.alexandria.exceptions.*;
	import java.util.*;

	public abstract class Abstract$name+snakecaseToCamelCase+firstUpperCase~Page extends io.intino.alexandria.ui.spark.pages.Page {
		public $box+snakecaseToCamelCase+firstUpperCase~Box box;

		public Abstract$name+snakecaseToCamelCase+firstUpperCase~Page() { super("$uiService+camelCaseToSnakeCase+lowerCase"); }

		public String execute() [throws $throws+FirstUpperCase...[, ]] {
			return super.template("$name"[, Arrays.asList($usedUnit...[,])]);
		}

		@Override
		protected String title() {
			return "$title";
		}

		@Override
		protected java.net.URL favicon() {
			return [$favicon?null;]
		}
	}
end

def trigger(favicon)
	this.getClass().getResource("$this");
end

def type(ui & action) !type(gen)
	package $package+validPackage.ui.pages;

	import io.intino.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	import $importTemplates+validPackage.ui.displays.templates.*;

	public class $name+snakecaseToCamelCase+firstUpperCase~Page extends Abstract$name+snakecaseToCamelCase+firstUpperCase~Page {
		[$parameter+type...[$NL]]
		[$editor+parameter]

		$component
	}
end

def type(parameter & fileData) trigger(type)
	public io.intino.alexandria.Resource $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter & list) trigger(type)
	public java.util.List<$type> $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter) trigger(type)
	public $type $name+snakecaseToCamelCase+FirstLowerCase;
end

def type(parameter) trigger(methodCall)
	display.$name+snakecaseToCamelCase+FirstLowerCase($name+snakecaseToCamelCase+FirstLowerCase);
end

def type(fileData) trigger(onlyType)
	io.intino.alexandria.Resource
end

def type(list) trigger(onlyType)
	java.util.List<$type>
end

def trigger(onlyType)
	$type
end

def type(editor) trigger(parameter)
	public io.intino.alexandria.Resource document;
	public io.intino.alexandria.ui.services.EditorService.Permission permission;
end

def attribute(this:void) trigger(return)
end

def trigger(return)
	return null;
end

def type(schemaImport) trigger(schemaImport)
	import $package.schemas.*;
end

def type(component)
	public io.intino.alexandria.ui.Soul prepareSoul(io.intino.alexandria.ui.services.push.UIClient client) {
	    return new io.intino.alexandria.ui.Soul(session) {
			@Override
			public void personify() {
				$value+snakecaseToCamelCase+firstUpperCase component = new $value+snakecaseToCamelCase+firstUpperCase(box);
				[$editor+component]
				register(component);
				component.init();
			}
		};
	}
end

def type(editor) trigger(component)
	component.document(document);
	component.permission(permission);
	component.display(new $display+snakecaseToCamelCase+firstUpperCase(box));
end

def type(usedUnit & standard)
	new io.intino.alexandria.ui.spark.pages.Unit("$name","$url")
end

def type(usedUnit & custom)
	new io.intino.alexandria.ui.spark.pages.Unit("$name",box.configuration().get("$url"))
end

def type(contextProperty & spark)
    public io.intino.alexandria.http.spark.SparkContext context;
end

def type(contextProperty)
    public io.intino.alexandria.Context context = new io.intino.alexandria.Context();
end