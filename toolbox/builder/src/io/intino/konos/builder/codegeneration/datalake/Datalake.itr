def type(tanks)
	package $package+validPackage.datalake;

	import io.intino.alexandria.logger.Logger;
    import io.intino.ness.datalake.file.FileDatalake;
    import io.intino.ness.datalake.file.eventsourcing.JmsConnection;
    import io.intino.ness.datalake.file.eventsourcing.JmsEventSubscriber;
    import $package+validPackage.$box+firstUpperCase~Box;

	import java.io.File;
    import java.util.Arrays;
    import java.util.List;

	public class Datalake {
		public static List<String> splits = Arrays.asList($split+quoted...[, ]);
		private final FileDatalake datalake;
		private final $box+firstUppercase~Box box;
		private final JmsConnection connection;
		private JmsEventSubscriber subscriber;

		public Datalake(Box box) {
			this.box = ($box+firstUppercase~Box) box;
			datalake = new FileDatalake(new File(box.configuration().get(box.configuration().get("datalake"))));
			$remote
			//if mirror
			//new Mirror(datalake).clone(2, Months);
		}

		public io.intino.ness.datalake.Datalake.EventStore eventStore() {
			return datalake.eventStore();
		}

		public io.intino.ness.datalake.Datalake.SetStore setStore() {
			return datalake.setStore();
		}

		public void connect(String args) {
			connection.connect(args);
			[subscriber = new JmsEventSubscriber(connection);
			$tank+subscribe...[$NL]
			]
		}

		public void disconnect() {

		}

		$tank+getter

	}
end


def trigger(remote)
	connection = new JmsConnection($url+parameter, $user+parameter, $password+parameter, $clientId+parameter, null, null);
end

def type(custom) trigger(parameter)
	box.configuration().get("$value+customParameter+lowercase")
end

def trigger(parameter)
	$value+quoted
end

def type(tank & event) trigger(subscribe)
	subscriber.subscribe(datalake.eventStore().tank("$fullName")).using(new $name+firstUpperCase~Mounter(box));
end

def type(tank) trigger(getter)
	public static TankAccessor $name+firstLowerCase() {
		return this.datalake.eventStore().tank("$fullName");
	}
end