def type(accessor)
	package $package+ValidPackage;

    import java.util.List;
    import java.util.ArrayList;
    import java.util.Arrays;
	import java.net.URL;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.restaccessor.RequestBuilder;
	import io.intino.alexandria.restaccessor.core.RestAccessorNotifier;
	import io.intino.alexandria.restaccessor.exceptions.RestfulFailure;

	$schemaImport

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor {
		private final URL url;
		private final RestAccessorNotifier notifier = new RestAccessorNotifier();
		private int timeoutMillis = 120 * 1_000;
		private OutBox outBox = null;
		$authentication+field

		public $name+firstUpperCase+SnakeCaseToCamelCase~Accessor(URL url[, $authentication+parameter]) {
			this.url = url;
			$authentication+assign
		}

		public $name+firstUpperCase+SnakeCaseToCamelCase~Accessor(URL url, int timeoutMillis[, $authentication+parameter]) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			$authentication+assign
		}

		public $name+firstUpperCase+SnakeCaseToCamelCase~Accessor(URL url, int timeoutMillis, java.io.File outBoxDirectory, int intervalRetrySeconds[, $authentication+parameter]) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			this.outBox = new OutBox(outBoxDirectory, intervalRetrySeconds);
			$authentication+assign
		}

		$resource...[$NL$NL]

		$notification...[$NL$NL]
	}
end

def type(resource)
	public $response $method+firstLowerCase~$name+SnakeCaseToCamelCase+firstUpperCase($parameter+signature...[, ]) $exceptionResponses+declaration {
		Request request = new RequestBuilder(this.url).timeOut(this.timeoutMillis)
			[.$auth]
			[.$parameter...[$NL.]]
			.build(RequestBuilder.Method.$method+upperCase, $path);
		try {
			io.intino.alexandria.restaccessor.Response response = request.execute();
			$response+return
		} catch (AlexandriaException e) {
			$exceptionResponses+throws
			if (outBoxDirectory != null) outbox.push(request);
			throw new InternalServerError(e.message());
		}
	}
end

def type(parameter & query) trigger(parameter)
	queryParameter("$name", $name)
end
def type(parameter & header) trigger(parameter)
	headerParameter("$name", $name)
end

def !type(file) type(parameter & body) trigger(parameter)
	entityPart("$name", $name)
end

def type(file) type(parameter & body) trigger(parameter)
	entityPart($name)
end

def type(list) trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), new com.google.gson.reflect.TypeToken<Array$value>(){}.getType());
end

def !type(list) !attribute(value:void) trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), $value.class);
end

def type(file) trigger(return)
	return io.intino.alexandria.Resource("content", response.contentAsStream());
end

def trigger(return)
end

def trigger(response)
	$value
end

def type(notification)
	public void listen$name+SnakeCaseToCamelCase+firstUppercase([$parameter+signature...[, ], ]java.util.function.Consumer<String> listener) throws InternalServerError {
		RequestBuilder.Request request = new RequestBuilder(this.url).timeOut(this.timeoutMillis)
			[.$auth]
			[.$parameter...[.]]
			.build(RequestBuilder.Method.POST, "$path");
		try {
			this.notifier.listen(listener, request.execute().content().trim());
		} catch (AlexandriaException e) {
			throw new InternalServerError(e.message());
		}
	}

	public void stopListen$name+SnakeCaseToCamelCase+firstUppercase() {
		this.notifier.close();
	}
end

def type(basic) trigger(auth)
	basicAuth(this.user, this.pasword)
end

def type(bearer) trigger(auth)
	bearerAuth(this.token)
end

def type(authentication & basic) trigger(parameter)
	String user, String password
end

def type(authentication & bearer) trigger(parameter)
	String token
end

def type(authentication & withCertificate) trigger(parameter)
	URL certificate
end

def type(authentication & withCertificate) trigger(assign)
	this.certificate = certificate;
end

def type(authentication & basic) trigger(assign)
	this.user = user;
	this.password = password;
end

def type(authentication & bearer) trigger(assign)
	this.token = token;
end

def type(authentication & withCertificate) trigger(assign)
	this.certificate = certificate;
end

def type(authentication) type(basic) trigger(field)
	private final String user;
	private final String password;
end

def type(authentication) type(bearer) trigger(field)
	private final String token;
end

def type(authentication & withCertificate) trigger(field)
	private final URL certificate;
end

def type(parameter) trigger(signature)
	$parameterType $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(exceptionResponses & none) trigger(throws)
	throw new InternalServerError(e.message());
end

def type(exceptionResponses) trigger(throws)
	$exceptionResponse+throws...[$NLelse ]
end

def type(exceptionResponse) trigger(throws)
	if (e instanceof $exceptionName) throw (($exceptionName) e);
end

def type(exceptionResponses) trigger(declaration)
	throws [$exceptionResponse+declaration...[, ],] InternalServerError
end

def type(exceptionResponse) trigger(declaration)
	$exceptionName
end

def type(schemaImport) trigger(schemaImport)
	import $package.schemas.*;
end