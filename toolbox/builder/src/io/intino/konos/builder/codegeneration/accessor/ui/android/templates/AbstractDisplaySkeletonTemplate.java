package io.intino.konos.builder.codegeneration.accessor.ui.android.templates;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractDisplaySkeletonTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("display","accessible"))).output(literal("import React from \"react\";\n")).output(expression().output(mark("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(mark("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("parent", "import"))).output(literal("\n")).output(expression().output(literal("import ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier from \"")).output(mark("notifierDirectory")).output(literal("/notifiers/")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier\";"))).output(literal("\n")).output(expression().output(literal("import ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester from \"")).output(mark("requesterDirectory")).output(literal("/requesters/")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester\";"))).output(literal("\n")).output(expression().output(mark("displayRegistration", "import"))).output(literal("\nimport ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal(" from './")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("';\n\nexport default class ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Proxy extends ")).output(mark("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t")).output(expression().output(literal("this.notifier = new ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier(this);"))).output(literal("\n\t\t")).output(expression().output(literal("this.requester = new ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester(this);"))).output(literal("\n\t\t")).output(expression().output(mark("properties", "initialization"))).output(literal("\n\t};\n\n}\n\n")).output(expression().output(mark("displayRegistration", "declaration"))),
			rule().condition((allTypes("display","res","noAbstract","scrollable"))).output(literal("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<com.google.android.flexbox.FlexboxLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:alexandria=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    alexandria:flexDirection=\"")).output(mark("layout")).output(literal("\">\n\n    <ScrollView android:layout_width=\"match_parent\"\n\t    android:layout_height=\"match_parent\"\n\t    android:fillViewport=\"true\">\n\n        <com.google.android.flexbox.FlexboxLayout\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"wrap_content\"\n            alexandria:flexDirection=\"")).output(mark("layout")).output(literal("\">\n            ")).output(expression().output(mark("component").multiple("\n"))).output(literal("\n\t\t</com.google.android.flexbox.FlexboxLayout>\n    </ScrollView>\n\n</com.google.android.flexbox.FlexboxLayout>")),
			rule().condition((allTypes("display","res","noAbstract"))).output(literal("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<com.google.android.flexbox.FlexboxLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:alexandria=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    alexandria:flexDirection=\"")).output(mark("layout")).output(literal("\">\n\n    ")).output(expression().output(mark("component").multiple("\n"))).output(literal("\n\n</com.google.android.flexbox.FlexboxLayout>")),
			rule().condition((allTypes("layout","horizontal"))).output(literal("row")),
			rule().condition((allTypes("layout","vertical"))).output(literal("column")),
			rule().condition((allTypes("display","res"))).output(literal("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<com.google.android.flexbox.FlexboxLayout\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:alexandria=\"http://schemas.android.com/apk/res-auto\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    alexandria:flexDirection=\"")).output(mark("layout")).output(literal("\">\n\n    <TextView\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"I am ")).output(mark("name")).output(literal("\"\n        />\n\n    ")).output(expression().output(mark("component").multiple("\n"))).output(literal("\n\n</com.google.android.flexbox.FlexboxLayout>")),
			rule().condition((allTypes("display","noAbstract"))).output(literal("package ")).output(mark("package")).output(literal(".mobile.android.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal("\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport androidx.core.content.ContextCompat.*\n\n")).output(expression().output(mark("parent", "import"))).output(literal("\n")).output(mark("accessibleNotifierImport")).output(literal("\nimport io.intino.alexandria.mobile.displays.requesters.")).output(mark("requester")).output(literal("Requester\nimport ")).output(mark("package")).output(literal(".mobile.android.R\n\nclass ")).output(mark("name", "firstUpperCase")).output(literal(" @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0) : ")).output(mark("displayExtends")).output(literal("<")).output(mark("requester")).output(literal("Requester, ")).output(mark("notifier")).output(literal("Notifier>(context, attrs, defStyleAttr, defStyleRes, R.layout.")).output(mark("name", "camelCaseToUnderscoreCase", "lowerCase")).output(literal(") {\n\n\tinit {\n\t\tthis.notifier = ")).output(mark("notifier")).output(literal("Notifier(this);\n\t\tthis.requester = ")).output(mark("requester")).output(literal("Requester(this);\n\t\t")).output(expression().output(mark("properties", "initialization"))).output(literal("\n\t}\n\n\t")).output(mark("notification").multiple("\n\n")).output(literal("\n\t")).output(expression().output(mark("notifyProxyMethod"))).output(literal("\n}")),
			rule().condition((allTypes("accessibleNotifierImport","accessible"))).output(literal("import ")).output(mark("package")).output(literal(".mobile.displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier")),
			rule().condition((type("accessibleNotifierImport"))).output(literal("import io.intino.alexandria.mobile.displays.notifiers.")).output(mark("notifier")).output(literal("Notifier")),
			rule().condition((type("notifyProxyMethod"))).output(literal("notifyProxyMessage = (name) => {\n\tif (!this.props.onProxyMessage) return;\n\tthis.props.onProxyMessage(name);\n};")),
			rule().condition((allTypes("display","collection"))).output(literal("import React from \"react\";\n")).output(expression().output(mark("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(mark("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("parent", "import"))).output(literal("\n")).output(expression().output(literal("import ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier from \"")).output(mark("notifierDirectory")).output(literal("/notifiers/")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier\";"))).output(literal("\n")).output(expression().output(literal("import ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester from \"")).output(mark("requesterDirectory")).output(literal("/requesters/")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester\";"))).output(literal("\n")).output(expression().output(mark("displayRegistration", "import"))).output(literal("\n\nexport default class ")).output(mark("name", "firstUpperCase")).output(literal(" extends ")).output(mark("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t")).output(expression().output(literal("this.notifier = new ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier(this);"))).output(literal("\n\t\t")).output(expression().output(literal("this.requester = new ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester(this);"))).output(literal("\n\t\t")).output(expression().output(mark("properties", "initialization"))).output(literal("\n\t};\n\n}\n\n")).output(expression().output(mark("displayRegistration", "declaration"))),
			rule().condition((type("display"))).output(literal("package ")).output(mark("package")).output(literal(".mobile.android.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal("\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport androidx.core.content.ContextCompat.*\n\n")).output(expression().output(mark("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(mark("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(mark("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(mark("parent", "import"))).output(literal("\nimport ")).output(mark("package")).output(literal(".mobile.displays.notifiers.")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier\nimport ")).output(mark("package")).output(literal(".mobile.displays.requesters.")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester\n")).output(expression().output(mark("displayRegistration", "import"))).output(literal("\n")).output(mark("schemaImport")).output(literal("\nimport ")).output(mark("package")).output(literal(".mobile.android.R\n\nopen class ")).output(mark("name", "firstUpperCase")).output(literal("<DR: ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester, DN: ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier> @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) ")).output(mark("displayExtends", "display")).output(literal(", ")).output(mark("package")).output(literal(".mobile.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal(".")).output(mark("name", "firstUpperCase")).output(literal(" {\n\n    init {\n        this.requester = ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Requester(this) as DR\n        this.notifier = ")).output(mark("notDecorated", "firstUpperCase")).output(literal("Notifier(this) as DN\n        inflate(viewContext(), layout ?: R.layout.")).output(mark("name", "camelCaseToUnderscoreCase", "lowerCase")).output(literal(", this)\n    }\n\n\t")).output(mark("notification").multiple("\n\n")).output(literal("\n    ")).output(expression().output(mark("reference").multiple("\n"))).output(literal("\n    ")).output(expression().output(mark("component").multiple("\n"))).output(literal("\n\n}")),
			rule().condition((type("notification")), (trigger("interface"))).output(literal("fun ")).output(mark("name")).output(literal("(")).output(expression().output(literal("value : ")).output(mark("parameter"))).output(literal(")")),
			rule().condition((type("notification"))).output(literal("override fun ")).output(mark("name")).output(literal("(")).output(expression().output(literal("value: ")).output(mark("parameter"))).output(literal(") {\n}")),
			rule().condition((trigger("parametervalue"))).output(literal("value")),
			rule().condition((type("date")), (trigger("parameter"))).output(literal("kotlinx.datetime.Instant")),
			rule().condition((type("datetime")), (trigger("parameter"))).output(literal("kotlinx.datetime.Instant")),
			rule().condition((type("integer")), (trigger("parameter"))).output(literal("Int")),
			rule().condition((trigger("parameter"))).output(mark("value")),
			rule().condition((type("displayRegistration")), (trigger("import"))).output(literal("import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';")),
			rule().condition((allTypes("displayRegistration","accessible")), (trigger("declaration"))).output(literal("DisplayFactory.register(\"")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Proxy\", ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Proxy);")),
			rule().condition((type("displayRegistration")), (trigger("declaration"))).output(literal("DisplayFactory.register(\"")).output(mark("name", "firstUpperCase")).output(literal("\", ")).output(mark("name", "firstUpperCase")).output(literal(");")),
			rule().condition((type("alexandriaImport"))).output(literal("import Ui")).output(mark("name", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/components/")).output(mark("name", "firstUpperCase")).output(literal("\";")),
			rule().condition((allTypes("alexandriaImport","embedded"))).output(literal("import { Embedded")).output(mark("name", "firstUpperCase")).output(literal(" as Ui")).output(mark("name", "firstUpperCase")).output(literal(" } from \"alexandria-ui-elements/src/displays/components/")).output(mark("name", "firstUpperCase")).output(literal("\";")),
			rule().condition((type("alexandriaComponentImport"))).output(literal("import Ui")).output(mark("type", "firstUpperCase")).output(mark("facet").multiple("")).output(literal(" from \"alexandria-ui-elements/")).output(expression().output(mark("componentTarget"))).output(literal("/displays/")).output(expression().output(mark("componentDirectory")).output(literal("/"))).output(mark("type", "firstUpperCase")).output(mark("facet").multiple("")).output(literal("\";")),
			rule().condition((allTypes("projectComponentImport","ownertemplatestamp"))).output(literal("import Displays")).output(mark("name", "firstUpperCase")).output(literal(" from \"")).output(mark("ownerModuleName")).output(literal("/gen/displays/templates/")).output(mark("name", "firstUpperCase")).output(literal("\";")),
			rule().condition((type("projectComponentImport"))).output(literal("import Displays")).output(mark("name", "firstUpperCase")).output(literal(" from \"")).output(mark("serviceName")).output(literal("/")).output(expression().output(mark("directory"))).output(literal("/displays/")).output(expression().output(mark("componentDirectory")).output(literal("/"))).output(mark("name", "firstUpperCase")).output(literal("\";")),
			rule().condition((allTypes("displayExtends","generic","isExtensionOf")), (trigger("display"))).output(literal(": ")).output(mark("parent")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","generic")), (trigger("display"))).output(literal(": ")).output(mark("parent")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))")),
			rule().condition((allTypes("displayExtends","template")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.Template<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","table")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.")).output(mark("type", "firstUpperCase")).output(mark("facet").multiple("")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","dynamictable")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.")).output(mark("type", "firstUpperCase")).output(mark("facet").multiple("")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","collection")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.")).output(mark("type", "firstUpperCase")).output(mark("facet").multiple("")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","item")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.Item<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","row")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.Row<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((allTypes("displayExtends","dialog")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.components.Dialog<DR, DN>(context, attrs, defStyleAttr, defStyleRes)")),
			rule().condition((type("displayExtends")), (trigger("display"))).output(literal(": io.intino.alexandria.mobile.android.displays.")).output(mark("type", "firstUpperCase")).output(literal("<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))")),
			rule().condition((allTypes("displayExtends","generic","isExtensionOf"))).output(mark("parent")),
			rule().condition((allTypes("displayExtends","generic"))).output(mark("parent")),
			rule().condition((type("displayExtends"))).output(mark("type", "firstUpperCase")),
			rule().condition((allTypes("renderTag","template")), (trigger("end"))).output(literal("</UiBlock>")),
			rule().condition((allTypes("renderTag","block")), (trigger("end"))).output(literal("</UiBlock>")),
			rule().condition((allTypes("renderTag","item")), (trigger("end"))).output(literal("</div>")),
			rule().condition((type("renderTag")), (trigger("end"))).output(literal("</React.Fragment>")),
			rule().condition((allTypes("renderTag","template"))).output(literal("<UiBlock")).output(expression().output(mark("properties", "common")).output(mark("properties", "specific"))).output(literal(" style={{...this.props.style,...display}}>")),
			rule().condition((allTypes("renderTag","block"))).output(literal("<UiBlock")).output(expression().output(mark("properties", "common")).output(mark("properties", "specific"))).output(literal(" style={{...this.props.style,...display}}>")),
			rule().condition((allTypes("renderTag","item"))).output(literal("<div style={{width:\"100%\",height:\"100%\",...this.props.style,...this.style(),...display}} className={className}>")),
			rule().condition((type("renderTag"))).output(literal("<React.Fragment>")),
			rule().condition((allTypes("renderTagAttributes","block"))).output(mark("properties", "common")).output(mark("properties", "specific")),
			rule().condition((type("renderTagAttributes"))),
			rule().condition((attribute("parent")), (trigger("import"))).output(literal("import ")).output(mark("package")).output(literal(".mobile.android.displays.")).output(mark("parentDirectory")).output(literal(".")).output(mark("parent", "firstUpperCase")),
			rule().condition((attribute("accessible")), (trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.ProxyDisplay")),
			rule().condition((attribute("basedisplay")), (trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.Display")),
			rule().condition((attribute("basecomponent")), (trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.Component")),
			rule().condition((attribute("embeddedcomponent")), (trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.components.")).output(mark("value", "firstUpperCase")),
			rule().condition((attribute("component")), (trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.components.")).output(mark("value", "firstUpperCase")),
			rule().condition((trigger("import"))).output(literal("import io.intino.alexandria.mobile.android.displays.")).output(mark("value", "firstUpperCase")),
			rule().condition((type("schemaImport"))).output(literal("import ")).output(mark("package")).output(literal(".mobile.schemas.*;"))
		);
	}
}