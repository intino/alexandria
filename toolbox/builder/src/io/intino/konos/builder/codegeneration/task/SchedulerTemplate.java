package io.intino.konos.builder.codegeneration.task;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class SchedulerTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("scheduler"))).output(literal("package ")).output(mark("package", "ValidPackage")).output(literal(";\n\nimport ")).output(mark("package", "ValidPackage")).output(literal(".")).output(mark("box", "FirstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.scheduler.AlexandriaScheduler;\nimport ")).output(mark("package", "ValidPackage")).output(literal(".scheduling.*;\nimport org.quartz.*;\nimport java.util.LinkedHashSet;\nimport java.util.Map;\nimport java.util.Set;\nimport java.time.ZoneId;\nimport java.util.TimeZone;\nimport io.intino.alexandria.logger.Logger;\n\nimport static org.quartz.JobBuilder.newJob;\nimport static org.quartz.CronScheduleBuilder.*;\nimport static org.quartz.TriggerBuilder.newTrigger;\n\npublic class ")).output(mark("name", "firstUpperCase", "SnakeCaseToCamelCase")).output(literal("Tasks {\n\n\tprivate ")).output(mark("name", "firstUpperCase", "SnakeCaseToCamelCase")).output(literal("Tasks() {\n\n\t}\n\n\tpublic static void init(AlexandriaScheduler tasker, ")).output(mark("box", "FirstUpperCase")).output(literal("Box box) {\n\t\tJobDetail job;\n\t\ttry {\n\t\t\t")).output(mark("task", "init").multiple("\n")).output(literal("\n\t\t\ttasker.startSchedules();\n\t\t} catch (Exception e) {\n\t\t\tLogger.error(e.getMessage());\n\t\t}\n\t}\n\n\tprivate static Set<Trigger> newSet(Trigger... triggers) {\n\t\tLinkedHashSet<Trigger> set = new LinkedHashSet<>();\n\t\tjava.util.Collections.addAll(set, triggers);\n\t\treturn set;\n\t}\n}")),
				rule().condition((type("task")), (type("directorysentineltask")), (trigger("init"))).output(literal("tasker.watchDirectory(\"")).output(mark("name")).output(literal("\", new java.io.File(\"")).output(mark("file")).output(literal("\"), (f, e) -> { try {\n\t\t")).output(mark("package")).output(literal(".actions.")).output(mark("name", "SnakeCaseToCamelCase")).output(literal("Action action = new ")).output(mark("package")).output(literal(".actions.")).output(mark("name", "SnakeCaseToCamelCase")).output(literal("Action();\n\t\taction.box = box;\n\t\taction.directory = f.toURI().toURL();\n\t\taction.event = e;\n\t\taction.execute();\n\t} catch(java.io.IOException ignored) {}\n\t}, ")).output(mark("event", "fullPath").multiple(", ")).output(literal(");")),
				rule().condition((trigger("fullpath"))).output(literal("io.intino.alexandria.scheduler.directory.KonosDirectorySentinel.Event.")).output(mark("value")),
				rule().condition((type("task")), (trigger("init"))).output(literal("job = newJob(")).output(mark("name", "SnakeCaseToCamelCase")).output(literal("Task.class).withIdentity(\"")).output(mark("name")).output(literal("\").build();\njob.getJobDataMap().put(\"box\", box);\ntasker.scheduleJob(job, newSet(")).output(mark("job").multiple(", ")).output(literal("), true);\n")),
				rule().condition((type("crontrigger")), (trigger("job"))).output(literal("newTrigger().withIdentity(\"")).output(mark("name")).output(literal("\").withSchedule(cronSchedule(\"")).output(mark("pattern")).output(literal("\")")).output(expression().output(literal(".inTimeZone(TimeZone.getTimeZone(ZoneId.of(\"")).output(mark("timeZone")).output(literal("\")))"))).output(literal(").build()")),
				rule().condition((type("onboottrigger")), (trigger("job"))).output(literal("newTrigger().startNow().build()"))
		);
	}
}