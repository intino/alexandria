package io.intino.konos.builder.codegeneration.datalake.mounter;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class MounterTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("mounter","realtime"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".datalake.mounters;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport io.intino.alexandria.inl.Message;\nimport io.intino.alexandria.inl.MessageCast;\nimport io.intino.ness.datalake.file.eventsourcing.EventHandler;\n")).output(mark("schemaImport")).output(literal("\n\npublic class ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Mounter {\n\tpublic ")).output(mark("box", "validName", "firstUpperCase")).output(literal("Box box;\n\n\tpublic void handle(Message message) {\n\t\t")).output(expression().output(mark("type", "typeClass")).output(literal(" object = MessageCast.cast(message).as(")).output(mark("type", "typeClass")).output(literal(".class);"))).output(literal("\n\t}\n}")),
			rule().condition((allTypes("mounter","batch","population"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".datalake.mounters;\n\nimport io.intino.alexandria.Timetag;\nimport io.intino.alexandria.datalake.MappColumnStream;\nimport io.intino.alexandria.logger.Logger;\nimport io.intino.alexandria.tabb.ColumnStream;\nimport io.intino.alexandria.tabb.TabbBuilder;\nimport ")).output(mark("package", "validPackage")).output(literal(".box.datalake.Datalake;\nimport ")).output(mark("package", "validPackage")).output(literal(".box.datalake.")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("MounterFunctions;\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\n\npublic class ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("Mounter {\n\tpublic ")).output(mark("box", "validName", "firstUpperCase")).output(literal("Box box;\n\n\tpublic void pump(Timetag from, Timetag to, Predicate<Timetag> filter) {\n\t\tfrom.iterateTo(to).forEach(timetag -> {\n\t\t\tTabbBuilder tabbBuilder = new TabbBuilder();\n\t\t\t")).output(mark("splittedColumns")).output(literal("\n\t\t\t")).output(mark("column").multiple("\n")).output(literal("\n\t\t\ttry {\n\t\t\t\ttabbBuilder.")).output(expression().output(mark("format"))).output(literal(".save(new File(box.datamart(), \"")).output(mark("name", "lowercase")).output(literal(".tabb\"));\n\t\t\t} catch (IOException e) {\n\t\t\t\tLogger.error(e);\n\t\t\t}\n\t\t});\n\t}\n}")),
			rule().condition((trigger("splittedcolumns"))).output(literal("for (String split : Datalake.splits) {\n\t")).output(mark("column").multiple("\n")).output(literal("\n}")),
			rule().condition((type("splitted")), (trigger("column"))).output(literal("tabbBuilder.add(new MappColumnStream(box.datalake().setStore().tank(split + \".")).output(mark("fullName")).output(literal("\").on(timetag).index(), split + \".")).output(mark("name")).output(literal("-\" + timetag.value(), ColumnStream.Type.")).output(mark("type", "FirstUpperCase")).output(literal(", timetag, ")).output(mark("mounter", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("MounterFunctions.")).output(mark("name")).output(mark("facet")).output(literal("()));")),
			rule().condition((trigger("column"))).output(literal("tabbBuilder.add(new MappColumnStream(box.datalake().setStore().tank(\"")).output(mark("fullName")).output(literal("\").on(timetag).index(), \"")).output(mark("name")).output(literal("-\" + timetag.value(), ColumnStream.Type.")).output(mark("type", "FirstUpperCase")).output(literal(", timetag, ")).output(mark("mounter", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("MounterFunctions.")).output(mark("name")).output(mark("facet")).output(literal("()));")),
			rule().condition((trigger("format"))).output(literal("add(TabbBuilder.Format.")).output(mark("", "lowerCase")).output(literal(")")),
			rule().condition((type("schemaImport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;")),
			rule().condition((attribute("message")), (trigger("typeclass"))).output(literal("io.intino.alexandria.inl.Message")),
			rule().condition((type("schema")), (trigger("typeclass"))).output(mark("package")).output(literal(".schemas.")).output(mark("name", "FirstUpperCase")),
			rule().condition((type("schema")), (trigger("typename"))).output(mark("name", "firstLowerCase")),
			rule().condition((trigger("typename"))).output(literal("message"))
		);
	}
}