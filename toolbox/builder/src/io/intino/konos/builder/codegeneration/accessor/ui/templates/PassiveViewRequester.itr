def type(display)
	$import

	export default class $name+firstUpperCase$proxy~Requester extends $parentType {
		constructor(element) {
			super(element);
		};
		[$request...[$NL]]
	}
end

def attribute(extensionOf) trigger(import)
	import $parent+firstUpperCase~Requester from "./$parent+firstUpperCase~Requester"
end

def attribute(accessible) trigger(import)
	import Requester from "alexandria-ui-elements/gen/displays/requesters/ProxyDisplayRequester";
end

def trigger(import)
	import Requester from "./Requester";
end

def attribute(accessible) trigger(proxy)
	Proxy
end

def trigger(proxy)
end

def attribute(extensionOf) trigger(parentType)
	$parent+firstUpperCase~Requester
end

def trigger(parentType)
	Requester
end

def type(parameter) trigger(request)
	$name = function(value) {
        if (this.addToHistory(value)) return;
		$method({ op: "$name", s: "$display+lowercase", d: this.element.props.id, o: this.element.props.owner(), c: this.element.props.context(), v: $parameter}, this.element.ownerUnit());
	}
end

def trigger(request)
    $name = ([$parameterSignature]) => {
        if (this.addToHistory([$parameterSignature])) return;
        $method({ op: "$name", s: "$display+lowercase", d: this.element.props.id, o: this.element.props.owner(), c: this.element.props.context()[, v: $parameter]}, this.element.ownerUnit());
    };
end

def type(object) trigger(parameter)
	JSON.stringify(value)
end

def type(list) trigger(parameter)
	JSON.stringify(value)
end

def trigger(parameter)
	value
end

def attribute(upload) trigger(method)
	this.fileService.upload
end

def attribute(download) trigger(method)
	this.fileService.download
end

def trigger(method)
	this.pushService.send
end