package io.intino.konos.builder.codegeneration.services.ui.templates;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractDisplaySkeletonTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("display"))).output(literal("package ")).output(mark("package")).output(literal(".ui.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal(";\n\nimport io.intino.alexandria.core.Box;\nimport io.intino.alexandria.exceptions.*;\nimport io.intino.alexandria.ui.displays.components.*;\nimport ")).output(mark("package")).output(literal(".ui.*;\n")).output(mark("schemaImport")).output(literal("\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\n\n")).output(mark("templatesImport")).output(literal("\n")).output(mark("blocksImport")).output(literal("\n")).output(mark("itemsImport")).output(literal("\n")).output(mark("rowsImport")).output(literal("\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\n\npublic ")).output(expression().output(mark("abstract", "lowerCase"))).output(literal(" class ")).output(mark("abstract")).output(mark("name", "firstUpperCase")).output(mark("parametrized")).output(literal(" ")).output(mark("displayExtends")).output(expression().output(literal(" ")).output(mark("implements"))).output(literal(" {\n\t")).output(expression().output(mark("reference", "declaration").multiple("\n"))).output(literal("\n\t")).output(expression().output(mark("component", "declarations").multiple("\n"))).output(literal("\n\n    public ")).output(mark("abstract")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("abstractBox", "type")).output(literal(" box) {\n        super(box);\n        id(\"")).output(mark("id")).output(literal("\");\n    }\n\n    @Override\n\tpublic void init() {\n\t\tsuper.init();\n\t\t")).output(expression().output(mark("reference").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(mark("componentReferences"))).output(literal("\n\t}\n\t")).output(mark("methods")).output(literal("\n\t")).output(expression().output(mark("component", "class").multiple("\n\n"))).output(literal("\n\t")).output(expression().output(mark("component", "method").multiple("\n\n"))).output(literal("\n}")),
			rule().condition((allTypes("parametrized","generic"))).output(literal("<DN extends ")).output(mark("name", "firstUpperCase")).output(literal("Notifier, ")).output(mark("abstractBox", "extension")).output(literal(">")),
			rule().condition((type("parametrized"))).output(mark("abstractBox", "extensionTagged")),
			rule().condition((allTypes("displayextends","generic"))).output(literal("extends ")).output(mark("parent")).output(literal("<DN, ")).output(mark("abstractBox", "type")).output(literal(">")),
			rule().condition((allTypes("template","displayextends"))).output(literal("extends io.intino.alexandria.ui.displays.components.Template<")).output(mark("name", "firstUpperCase")).output(literal("Notifier, ")).output(mark("modelClass")).output(literal(", ")).output(mark("abstractBox", "type")).output(literal(">")),
			rule().condition((allTypes("item","displayextends"))).output(literal("extends io.intino.alexandria.ui.displays.components.Item<")).output(mark("name", "firstUpperCase")).output(literal("Notifier, ")).output(mark("itemClass")).output(literal(", ")).output(mark("abstractBox", "type")).output(literal(">")),
			rule().condition((allTypes("displayextends","row"))).output(literal("extends io.intino.alexandria.ui.displays.components.Row<")).output(mark("name", "firstUpperCase")).output(literal("Notifier, ")).output(mark("itemClass")).output(literal(", ")).output(mark("abstractBox", "type")).output(literal(">")),
			rule().condition((type("displayextends"))).output(literal("extends io.intino.alexandria.ui.displays.")).output(mark("type", "firstUpperCase")).output(literal("<")).output(mark("name", "firstUpperCase")).output(literal("Notifier, ")).output(mark("abstractBox", "type")).output(literal(">")),
			rule().condition((type("templatesimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.templates.*;")),
			rule().condition((type("blocksimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.blocks.*;")),
			rule().condition((type("itemsimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.items.*;")),
			rule().condition((type("rowsimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.rows.*;")),
			rule().condition((allTypes("componentreferences","forroot"))).output(expression().output(mark("component", "rootReferences").multiple("\n"))),
			rule().condition((type("componentreferences"))).output(expression().output(mark("component", "references").multiple("\n"))),
			rule().condition((type("attribute"))).output(literal("public ")).output(mark("clazz")).output(literal(" ")).output(mark("name", "firstLowerCase")).output(literal(";")),
			rule().condition((allTypes("methods","dynamicloadedcomponent"))).output(literal("@Override\npublic io.intino.alexandria.ui.displays.components.DynamicLoaded.LoadTime loadTime() {\n\treturn io.intino.alexandria.ui.displays.components.DynamicLoaded.LoadTime.valueOf(\"")).output(mark("loadTime")).output(literal("\");\n}\n\n@Override\npublic void showLoading() {\n\tnotifier.refreshLoading(true);\n}\n\n@Override\npublic void hideLoading() {\n\tnotifier.refreshLoading(false);\n}"))
		);
	}
}