package io.intino.konos.builder.codegeneration.analytic;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class ContinuousAxisTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("continuous"))).output(literal("package ")).output(mark("package")).output(literal(".analytic.axes;\n\nimport ")).output(mark("package")).output(literal(".analytic.Axis;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\npublic class ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal(" implements Axis {\n\n    private static final class Singleton {\n        private static final ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal(" INSTANCE = new ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("();\n    }\n\n\tpublic static ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal(" instance() {\n\t\treturn Singleton.INSTANCE;\n\t}\n\n\tprivate final Range[] ranges = new Range[")).output(mark("rangeSize")).output(literal("];\n\n\tprivate ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal("() {\n\t\t")).output(mark("range", "init").multiple("\n")).output(literal("\n\t}\n\n    @Override\n\tpublic String label() {\n\t\treturn \"")).output(mark("label")).output(literal("\";\n\t}\n\n    @Override\n\tpublic Component component(String id) {\n\t\treturn ranges[Integer.parseInt(id)];\n\t}\n\n\tpublic List<Range> ranges() {\n\t\treturn new AbstractList<>() {\n\t\t\t@Override\n\t\t\tpublic Range get(int index) {\n\t\t\t\treturn ranges[index];\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int size() {\n\t\t\t\treturn ranges.length;\n\t\t\t}\n\t\t};\n\t}\n\n    public static Range rangeOf(final double value) {\n        final Range[] ranges = Singleton.INSTANCE.ranges;\n    \tint index = binarySearch(ranges, value);\n    \tindex = index < 0 ? (index + 1) * -1 : index;\n    \treturn ranges[index >= ranges.length ? ranges.length - 1 : index];\n    }\n\n    private static int binarySearch(final Range[] ranges, final double value) {\n    \tint low = 0;\n    \tint high = ranges.length - 1;\n\n    \twhile (low <= high) {\n    \t\tfinal int mid = (low + high) >>> 1;\n    \t\tfinal double midVal = ranges[mid].max;\n    \t\tfinal int comparison = Double.compare(midVal, value);\n\n    \t\tif (comparison < 0)\n    \t\t\tlow = mid + 1;\n    \t\telse if (comparison > 0)\n    \t\t\thigh = mid - 1;\n    \t\telse\n    \t\t\treturn mid;\n    \t}\n    \treturn -(low + 1);\n    }\n\n\t@Override\n\tpublic Component component(int index) {\n\t\treturn ranges[index];\n\t}\n\n\t@Override\n\tpublic int size() {\n\t\treturn ranges().size();\n\t}\n\n\t@Override\n\tpublic List<Range> components() {\n\t\treturn ranges();\n\t}\n\n\t@Override\n\tpublic Stream<Range> stream() {\n\t    return Arrays.stream(ranges);\n\t}\n\n\tpublic class Range implements Component {\n\n\t\tprivate final int index;\n\t\tprivate final double min;\n\t\tprivate final double max;\n\t\tprivate final String label;\n\n\t\tpublic Range(int index, double min, double max, String label) {\n\t\t\tthis.index = index;\n\t\t\tthis.min = min;\n\t\t\tthis.max = max;\n\t\t\tthis.label = label;\n\t\t}\n\n\t\tpublic double min() {\n\t\t\treturn min;\n\t\t}\n\n\t\tpublic double max() {\n\t\t\treturn max;\n\t\t}\n\n\t\t@Override\n\t\tpublic int index() {\n\t\t\treturn index;\n\t\t}\n\n\t\t@Override\n\t\tpublic String id() {\n\t\t\treturn label;\n\t\t}\n\n        @Override\n\t\tpublic String label() {\n\t\t\treturn label;\n\t\t}\n\n\t\t@Override\n\t\tpublic Axis axis() {\n\t\t\treturn ")).output(mark("name", "snakeCaseToCamelCase", "FirstUpperCase")).output(literal(".this;\n\t\t}\n\t}\n}")),
			rule().condition((allTypes("range","lower")), (attribute("label")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", Double.MIN_VALUE, ")).output(mark("bound")).output(literal(", \"")).output(mark("label")).output(literal("\");")),
			rule().condition((allTypes("range","upper")), (attribute("label")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", ")).output(mark("bound")).output(literal(", Double.MAX_VALUE, \"")).output(mark("label")).output(literal("\");")),
			rule().condition((type("range")), (attribute("label")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", ")).output(mark("lower")).output(literal(", ")).output(mark("upper")).output(literal(", \"")).output(mark("label")).output(literal("\");")),
			rule().condition((allTypes("range","lower")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", Double.MIN_VALUE, ")).output(mark("bound")).output(literal(", \"< ")).output(mark("bound")).output(literal("\");")),
			rule().condition((allTypes("range","upper")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", ")).output(mark("bound")).output(literal(", Double.MAX_VALUE, \"> ")).output(mark("bound")).output(literal("\");")),
			rule().condition((type("range")), (trigger("init"))).output(literal("ranges[")).output(mark("index")).output(literal("] = new Range(")).output(mark("index")).output(literal(", ")).output(mark("lower")).output(literal(", ")).output(mark("upper")).output(literal(", \"")).output(mark("lower")).output(literal(" - ")).output(mark("upper")).output(literal("\");"))
		);
	}
}