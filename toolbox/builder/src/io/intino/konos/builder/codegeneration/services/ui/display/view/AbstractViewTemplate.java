package io.intino.konos.builder.codegeneration.services.ui.display.view;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractViewTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("view", "display"))).output(literal("new io.intino.alexandria.ui.model.View()\n\t\t\t.container(new io.intino.alexandria.ui.model.view.container.DisplayContainer()\n\t\t\t\t\t .displayLoader((target, loadingListener, instantListener, session) -> ")).output(mark("owner", "FirstUpperCase")).output(literal(".Views.")).output(mark("name", "FirstUpperCase")).output(literal(".display(box, target, loadingListener, instantListener, session))\n\t\t\t\t\t ")).output(expression().output(literal(".hideNavigator(")).output(mark("hideNavigator")).output(literal(")"))).output(literal("\n\t\t\t\t\t ")).output(expression().output(literal(".scopeManager(")).output(mark("catalogScope")).output(literal(")"))).output(literal(")\n\t\t\t.layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "mold"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.MoldContainer().mold((io.intino.alexandria.ui.model.Mold) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, \"")).output(mark("mold")).output(literal("\").element())).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "catalog"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.CatalogContainer()")).output(expression().output(literal(".filter(")).output(mark("filter", "call")).output(literal(")"))).output(literal(".displayLoader(")).output(mark("catalogDisplayLoader")).output(literal(").catalog(")).output(mark("package")).output(literal(".displays.Displays.elementFor(box, io.intino.alexandria.ui.model.Catalog.class, ")).output(mark("catalog", "quoted")).output(literal("))).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "panel"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.PanelContainer().panel(")).output(mark("package")).output(literal(".displays.Displays.elementFor(box, io.intino.alexandria.ui.model.Panel.class, ")).output(mark("panel", "quoted")).output(literal("))).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "set"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.SetContainer()")).output(mark("viewContainerSetItems")).output(mark("viewDisplayLoaders")).output(literal(").layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "list"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.ListContainer()")).output(expression().output(literal(".noRecordsMessage(\"")).output(mark("noItemsMessage")).output(literal("\")"))).output(literal(".mold((io.intino.alexandria.ui.model.Mold) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, \"")).output(mark("mold")).output(literal("\").element())).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "grid"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.GridContainer()")).output(expression().output(literal(".noRecordsMessage(\"")).output(mark("noItemsMessage")).output(literal("\")"))).output(literal(".mold((io.intino.alexandria.ui.model.Mold) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, \"")).output(mark("mold")).output(literal("\").element())).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "map"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.MapContainer()")).output(expression().output(literal(".center(new io.intino.alexandria.ui.model.view.container.MapContainer.Center().latitude(")).output(mark("latitude")).output(literal(").longitude(")).output(mark("longitude")).output(literal("))"))).output(expression().output(literal(".")).output(mark("zoom"))).output(literal(".mold((io.intino.alexandria.ui.model.Mold) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, \"")).output(mark("mold")).output(literal("\").element())).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((allTypes("view", "magazine"))).output(literal("new io.intino.alexandria.ui.model.View().container(new io.intino.alexandria.ui.model.view.container.MagazineContainer()")).output(expression().output(literal(".noItemsMessage(\"")).output(mark("noItemsMessage")).output(literal("\")"))).output(literal(".mold((io.intino.alexandria.ui.model.Mold) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, \"")).output(mark("mold")).output(literal("\").element())).layout(View.Layout.")).output(mark("layout")).output(literal(")")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("hidden", "call"))),
				rule().condition((trigger("catalogdisplayloader"))).output(literal("new io.intino.alexandria.ui.model.view.container.CatalogContainer.Loader() {\n\tpublic io.intino.alexandria.ui.displays.AlexandriaAbstractCatalog load(io.intino.alexandria.ui.model.Catalog catalog, io.intino.alexandria.ui.services.push.UISession session) {\n\t\treturn (io.intino.alexandria.ui.displays.AlexandriaAbstractCatalog) ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, catalog);\n\t}\n}")),
				rule().condition((type("viewdisplayloaders"))).output(literal(".displayLoader((element, object) -> ")).output(mark("package")).output(literal(".displays.Displays.displayFor(box, element))\n.displayTypeLoader((element, object) -> ")).output(mark("package")).output(literal(".displays.Displays.displayTypeFor(box, element))")),
				rule().condition((type("viewcontainersetitems"))).output(mark("item").multiple("\n")),
				rule().condition((type("group"))).output(literal(".add(new io.intino.alexandria.ui.model.view.set.item.Group()")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(literal(".mode(Group.Mode.")).output(mark("mode")).output(literal(")")).output(expression().output(literal(".hidden(")).output(mark("hidden")).output(literal(")"))).output(literal("\n\t\t")).output(expression().output(mark("item", "group").multiple("\n"))).output(literal(".name(\"")).output(mark("name")).output(literal("\"));")),
				rule().condition((type("items"))).output(literal(".add(new io.intino.alexandria.ui.model.view.set.item.Items()\n\t.source((session) -> ")).output(mark("layout", "FirstUpperCase")).output(literal(".Views.")).output(mark("path", "FirstUppercase")).output(literal(".items(box, session))\n\t.label((element, object) -> ")).output(mark("layout", "FirstUpperCase")).output(literal(".Views.")).output(mark("path", "FirstUppercase")).output(literal(".label(box, element, (")).output(mark("modelClass")).output(literal(") object))\n\t")).output(expression().output(literal(".icon((element, object) -> ")).output(mark("layout", "FirstUpperCase")).output(literal(".Views.")).output(mark("path", "FirstUppercase")).output(literal(".icon(box, element, (")).output(mark("modelClass")).output(literal(") object))"))).output(literal("\n\t")).output(expression().output(literal(".bubble((element, object) -> ")).output(mark("layout", "FirstUpperCase")).output(literal(".Views.")).output(mark("path", "FirstUppercase")).output(literal(".bubble(box, element, (")).output(mark("modelClass")).output(literal(") object))"))).output(literal("\n\t.view(")).output(mark("view")).output(literal(")")).output(expression().output(literal(".hidden(")).output(mark("hidden")).output(literal(")"))).output(literal(")")),
				rule().condition((type("item"))).output(literal(".add(new io.intino.alexandria.ui.model.view.set.item.Item().label(\"")).output(mark("label")).output(literal("\").view(")).output(mark("view")).output(literal(")")).output(expression().output(literal(".hidden(")).output(mark("hidden")).output(literal(")"))).output(literal(".name(\"")).output(mark("name")).output(literal("\"))")),
				rule().condition((type("hidden")), (trigger("call"))).output(literal(".hidden((object, session) -> ")).output(mark("owner", "FirstUpperCase")).output(literal(".Views.")).output(mark("view", "FirstUpperCase")).output(literal(".hidden(box, object, session))")),
				rule().condition((type("filter")), (trigger("call"))).output(literal("(catalog, context, target, object, session) -> ")).output(mark("owner", "FirstUpperCase")).output(literal(".Views.")).output(mark("view", "firstUpperCase")).output(literal(".filter(box, catalog, context, target, (")).output(mark("itemClass")).output(literal(") object, session)")),
				rule().condition((type("catalogscope"))).output(literal("(display, scope) -> ")).output(mark("owner", "FirstUpperCase")).output(literal(".Views.")).output(mark("name", "FirstUpperCase")).output(literal(".scope(box, display, scope)")),
				rule().condition((trigger("zoom"))).output(literal("zoom(new io.intino.alexandria.ui.model.view.container.MapContainer.Zoom()")).output(expression().output(literal(".defaultZoom(")).output(mark("default")).output(literal(")"))).output(expression().output(literal(".max(")).output(mark("max")).output(literal(")"))).output(expression().output(literal(".min(")).output(mark("min")).output(literal(")"))).output(literal(")")),
				rule().condition((trigger("quoted"))).output(literal("\"")).output(mark("value")).output(literal("\""))
		);
	}
}