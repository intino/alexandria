package io.intino.konos.builder.codegeneration.services.ui.display.catalog;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractCatalogSkeletonTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((allTypes("gen", "catalog"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.ui.displays.AlexandriaCatalog;\nimport io.intino.alexandria.ui.model.View;\nimport io.intino.alexandria.ui.model.Catalog;\nimport io.intino.alexandria.ui.model.TemporalCatalog;\nimport io.intino.alexandria.ui.model.Mold;\nimport io.intino.alexandria.ui.model.Toolbar;\nimport io.intino.alexandria.ui.model.catalog.arrangement.Arrangement;\nimport io.intino.alexandria.ui.model.catalog.arrangement.Grouping;\nimport io.intino.alexandria.ui.model.catalog.events.OnClickItem;\nimport io.intino.alexandria.ui.model.View;\nimport io.intino.alexandria.ui.model.TimeScale;\nimport io.intino.alexandria.ui.model.toolbar.*;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic abstract class Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" extends io.intino.alexandria.ui.displays.Alexandria")).output(expression().output(literal("Temporal")).output(mark("mode"))).output(literal("Catalog<")).output(mark("name", "FirstUpperCase")).output(literal("Notifier> {\n\n\tpublic Abstract")).output(mark("name", "FirstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tsuper(box);\n\t\telement(buildCatalog(box));\n\t}\n\n\tprivate static io.intino.alexandria.ui.model.")).output(mark("mode", "temporal")).output(literal("Catalog buildCatalog(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tio.intino.alexandria.ui.model.")).output(mark("mode", "temporal")).output(literal("Catalog catalog = new io.intino.alexandria.ui.model.")).output(mark("mode", "temporal")).output(literal("Catalog();\n\t\tcatalog.objectsLoader((scope, condition")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session) -> (java.util.List<Object>)(Object) ")).output(mark("name", "firstUpperCase")).output(literal(".Source.")).output(mark("type", "shortType", "firstLowerCase")).output(literal("List(box, scope, condition")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session));\n\t\t")).output(expression().output(mark("mode", "setMode"))).output(literal("\n        ")).output(expression().output(mark("temporalFilter"))).output(literal("\n\t\t")).output(expression().output(mark("range"))).output(literal("\n\t\t")).output(expression().output(literal("catalog.scales(new ArrayList<TimeScale>() {{ ")).output(mark("scale", "scaleAdd").multiple("; ")).output(literal(" }});"))).output(literal("\n\t\t")).output(expression().output(mark("hasMagazineView"))).output(literal("\n\t\t")).output(expression().output(literal("catalog.events(new io.intino.alexandria.ui.model.catalog.Events().onClickItem(new OnClickItem().")).output(mark("event")).output(literal("));"))).output(literal("\n\t\t")).output(expression().output(mark("hasGroupings"))).output(literal("\n\t\t")).output(expression().output(mark("hasCustomItemsArrivalMessage"))).output(literal("\n\t\t")).output(expression().output(mark("toolbar", "add"))).output(literal("\n\t\t")).output(expression().output(literal("catalog.name(\"")).output(mark("name")).output(literal("\")"))).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(literal(";\n\t\tcatalog.objectLoader((id")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session) -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.")).output(mark("type", "shortType", "firstLowerCase")).output(literal("(box, id")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session))\n\t\t\t.objectIdLoader(object -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.")).output(mark("type", "shortType", "firstLowerCase")).output(literal("Id(box, (")).output(mark("type")).output(literal(")object))\n\t\t\t.objectNameLoader(object -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.")).output(mark("type", "shortType", "firstLowerCase")).output(literal("Name(box, (")).output(mark("type")).output(literal(") object));\n\t\tbuildViews(box).forEach(catalog::add);\n\t\tbuildArrangements(box).forEach(catalog::add);\n\t\treturn catalog;\n\t}\n\n\t")).output(expression().output(mark("toolbar"))).output(literal("\n\tprivate static java.util.List<View> buildViews(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tList<View> result = new ArrayList<>();\n\t\t")).output(mark("view", "add").multiple("\n")).output(literal("\n\t\treturn result;\n\t}\n\n\tprivate static java.util.List<Arrangement> buildArrangements(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\t\tList<Arrangement> arrangements = new ArrayList<>();\n\t\t")).output(mark("arrangement", "add").multiple("\n")).output(literal("\n\t\treturn arrangements;\n\t}\n}")),
				rule().condition((trigger("empty"))),
				rule().condition((trigger("toolbar+add"))).output(literal("catalog.toolbar(buildToolbar(box));")),
				rule().condition((trigger("temporal"))).output(literal("Temporal")),
				rule().condition((trigger("setmode"))).output(literal("catalog.type(TemporalCatalog.Type.")).output(mark("", "firstUpperCase")).output(literal(");")),
				rule().condition((trigger("temporalfilter"))).output(literal("catalog.temporalFilter(new io.intino.alexandria.ui.model.catalog.TemporalFilter().enabledLoader(")).output(mark("temporalFilterEnabled")).output(literal(").visibilityLoader(")).output(mark("temporalFilterVisible")).output(literal(").layout(\"")).output(mark("temporalFilterLayout")).output(literal("\"));")),
				rule().condition((attribute("conditional")), (trigger("temporalfilterenabled"))).output(literal("(c, scope, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".TemporalFilter.enable(box, c, scope, session)")),
				rule().condition((attribute("always")), (trigger("temporalfilterenabled"))).output(literal("(c, scope, session) -> true")),
				rule().condition((attribute("never")), (trigger("temporalfilterenabled"))).output(literal("(c, scope, session) -> false")),
				rule().condition((attribute("conditional")), (trigger("temporalfiltervisible"))).output(literal("(c, scope, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".TemporalFilter.visible(box, c, scope, session)")),
				rule().condition((attribute("always")), (trigger("temporalfiltervisible"))).output(literal("(c, scope, session) -> true")),
				rule().condition((attribute("never")), (trigger("temporalfiltervisible"))).output(literal("(c, scope, session) -> false")),
				rule().condition((trigger("range"))).output(literal("catalog.rangeLoader(session -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Temporal.range(box, session));\ncatalog.objectCreatedLoader(object -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Source.")).output(mark("type", "shortType", "firstLowerCase")).output(literal("Created(box, (")).output(mark("type")).output(literal(") object));")),
				rule().condition((trigger("timerange"))).output(literal("range")),
				rule().condition((trigger("scaleadd"))).output(literal("add(TimeScale.")).output(mark("", "FirstUpperCase")).output(literal(");")),
				rule().condition((trigger("hasmagazineview"))).output(literal("catalog.rootObjectLoader((objectList, range, session) -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.root")).output(mark("type", "shortType", "firstUpperCase")).output(literal("(box, (java.util.List<")).output(mark("type")).output(literal(">)(Object)objectList")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session));\ncatalog.defaultObjectLoader((id, range, session) -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.default")).output(mark("type", "shortType", "firstUpperCase")).output(literal("(box, id")).output(expression().output(literal(", ")).output(mark("mode", "timerange"))).output(literal(", session));")),
				rule().condition((trigger("hasgroupings"))).output(literal("catalog.arrangementFiltererLoader((session) -> ")).output(mark("name", "firstUpperCase")).output(literal(".Arrangements.filterer(box, session));\ncatalog.arrangementHistogramsMode(\"")).output(mark("histogramsMode")).output(literal("\");\ncatalog.arrangementPosition(\"")).output(mark("position")).output(literal("\");")),
				rule().condition((trigger("hascustomitemsarrivalmessage"))).output(literal("catalog.itemsArrivalMessageLoader((count, session) -> ")).output(mark("name", "firstUpperCase")).output(literal(".Source.itemsArrivalMessage(box, count, session));")),
				rule().condition((trigger("toolbar"))).output(literal("private static io.intino.alexandria.ui.model.Toolbar buildToolbar(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n\tio.intino.alexandria.ui.model.Toolbar result = new Toolbar();\n\tresult.canSearch(")).output(mark("canSearch")).output(literal(");\n\t")).output(mark("operation").multiple("\n")).output(literal("\n\treturn result;\n}")),
				rule().condition((type("opendialog")), (trigger("event"))).output(literal("openDialog(new io.intino.alexandria.ui.model.catalog.events.OpenDialog()")).output(expression().output(literal(".height(")).output(mark("height")).output(literal(")"))).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".dialogType(\"")).output(mark("dialog")).output(literal("\").dialogBuilder((item, session) -> {\n\tio.intino.alexandria.ui.displays.AlexandriaDialog dialog = ")).output(mark("package", "validPackage")).output(literal(".dialogs.Dialogs.dialogFor(box, \"")).output(mark("dialog")).output(literal("\");\n\tdialog.target(item);\n\treturn dialog;\n}))")),
				rule().condition((type("openpanel")), (trigger("event"))).output(literal("openPanel(new io.intino.alexandria.ui.model.catalog.events.OpenPanel()\n\t")).output(expression().output(literal(".breadcrumbs(")).output(mark("breadCrumbs")).output(literal(")"))).output(literal("\n\t.panel((io.intino.alexandria.ui.model.Panel) Displays.displayFor(box, \"")).output(mark("panel")).output(literal("\").element()))")),
				rule().condition((type("opencatalog")), (trigger("event"))).output(literal("openCatalog(new io.intino.alexandria.ui.model.catalog.events.OpenCatalog()\n\t")).output(expression().output(literal(".itemLoader(")).output(mark("openCatalogLoader")).output(literal(")"))).output(literal("\n\t")).output(expression().output(literal(".filter(")).output(mark("openCatalogFilter")).output(literal(")"))).output(literal("\n\t.catalog((io.intino.alexandria.ui.model.Catalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\").element()))")),
				rule().condition((trigger("breadcrumbs"))).output(literal("(object, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Events.onOpenPanelBreadcrumbs(box, (")).output(mark("type")).output(literal(") object, session)")),
				rule().condition((trigger("opencatalogloader"))).output(literal("(element, sender, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Events.onOpenCatalog(box, element, (")).output(mark("type")).output(literal(") sender, session)")),
				rule().condition((trigger("opencatalogfilter"))).output(literal("(element, sender, item, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Events.onOpenCatalogFilter(box, element, (")).output(mark("type")).output(literal(") sender, item, session)")),
				rule().condition((type("sorting")), (trigger("add"))).output(literal("arrangements.add(new io.intino.alexandria.ui.model.catalog.arrangement.Sorting().comparator((object1, object2, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Arrangements.")).output(mark("name", "FirstLowerCase")).output(literal("Comparator(box, (")).output(mark("type")).output(literal(")object1, (")).output(mark("type")).output(literal(")object2, session)).visible(")).output(mark("visible")).output(literal(").name(\"")).output(mark("name")).output(literal("\").label(\"")).output(mark("label")).output(literal("\"));")),
				rule().condition((type("grouping")), (trigger("add"))).output(literal("arrangements.add(new io.intino.alexandria.ui.model.catalog.arrangement.Grouping()")).output(expression().output(literal(".histogram(io.intino.alexandria.ui.model.catalog.arrangement.Grouping.Histogram.")).output(mark("histogram")).output(literal(")"))).output(literal(".groups((objects, session) -> ")).output(mark("catalog", "FirstUpperCase")).output(literal(".Arrangements.")).output(mark("name", "FirstLowerCase")).output(literal("(box, (List<")).output(mark("type")).output(literal(">)(Object)objects, session)).name(\"")).output(mark("name")).output(literal("\")")).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(literal(");")),
				rule().condition((trigger("add"))).output(literal("result.add(")).output(mark("value")).output(literal(");"))
		);
	}
}