def type(workflow)
	package $package+validPackage.bpm;

	import io.intino.alexandria.bpm.PersistenceManager;
	import io.intino.alexandria.bpm.ProcessFactory;
	import io.intino.alexandria.bpm.ProcessStatus;
	import $package+validPackage.$box+FirstUpperCase~Box;
	import java.io.File;

	public class Workflow extends io.intino.alexandria.bpm.Workflow {

		private $package+validPackage.$box+FirstUpperCase~Box box;

		public Workflow($box+FirstUpperCase~Box box, File directory) {
			super(factory(box), new PersistenceManager.FilePersistenceManager(directory));
			this.box = box;
			box.terminal().subscribe(($terminal.ProcessStatusConsumer) status -> receive(status));
		}

		$process+publicMethod...[$NL$NL]

		@Override
		public void send(ProcessStatus processStatus) {
			box.terminal().publish(processStatus);
		}

		private static ProcessFactory factory($box+FirstUpperCase~Box box) {
			return (id, name) -> {
				switch (name) {
					$process...[$NL]
				}
				return null;
			};
		}
	}
end

def trigger(publicMethod)
	public void launch$name+firstUpperCase($parameter+signature...[, ]) {
		registerProcess(new $name+firstUpperCase(box[, $parameter+firstLowerCase...[, ]]));
	}
end

def trigger(signature)
	String $this+firstLowerCase
end

def trigger(process)
	case "$name": return new $name+firstUpperCase(id, box);
end
