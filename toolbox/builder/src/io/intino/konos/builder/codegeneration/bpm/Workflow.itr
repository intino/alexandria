def type(workflow)
	package $package+validPackage.bpm;

	import io.intino.alexandria.bpm.PersistenceManager;
	import io.intino.alexandria.bpm.ProcessFactory;
	import io.intino.alexandria.bpm.ProcessStatus;
	import io.intino.alexandria.message.MessageHub;
	import $package+validPackage.$box+FirstUpperCase~Box;
	import java.io.File;

	public class Workflow extends io.intino.alexandria.bpm.Workflow {

		public Workflow($box+FirstUpperCase~Box box, File workspace) {
			super(box.messageHub(), factory(box), new PersistenceManager.FilePersistenceManager(new File(workspace, "bpm")));
		}

		$process+publicMethod...[$NL]

		private static ProcessFactory factory($box+FirstUpperCase~Box box) {
			return (id, name) -> {
				switch (name) {
					$process...[$NL]
				}
				return null;
			};
		}
	}
end

def trigger(publicMethod)
	public void launch$name+firstUpperCase() {
		messageHub.sendMessage("ProcessStatus", new ProcessStatus(java.util.UUID.randomUUID().toString(), "$name", io.intino.alexandria.bpm.Process.Status.Enter).message());
	}
end

def trigger(process)
	case "$name": return new $name+firstUpperCase(box, id);
end
