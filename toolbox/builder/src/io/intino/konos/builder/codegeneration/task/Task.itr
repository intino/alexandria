def type(task)
	package $package+ValidPackage.scheduling;

	import org.quartz.JobExecutionContext;
    import org.quartz.JobExecutionException;
	import $package+ValidPackage.$box+FirstUpperCase~Box;
	import io.intino.alexandria.scheduler.ScheduledTrigger;

	public class $name+firstUpperCase~Task implements ScheduledTrigger {

		public void execute(JobExecutionContext context) throws JobExecutionException {
			$box+FirstUpperCase~Box box = ($box+FirstUpperCase~Box) context.getMergedJobDataMap().get("box");
			$target...[$NL]
		}
	}
end


def type(mounter) trigger(target)
	$package+ValidPackage.datahub.mounters.$name+firstUpperCase~Mounter $name~Mounter = new $package+ValidPackage.datahub.mounters.$name+firstUpperCase~Mounter();
	$name~Mounter.box = box;
	$name~Mounter.execute();
end

def type(feeder) trigger(target)
	new $package+ValidPackage.datahub.feeders.$name+firstUpperCase~Feeder(box).execute();
end

def trigger(target)
	$package+ValidPackage.actions.$name+firstUpperCase~Action action = new $package+ValidPackage.actions.$name+firstUpperCase~Action();
	action.box = box;
	action.execute();
end

def type(parameter) trigger(assign)
	action.$name = $name;
end

def type(parameter) trigger(name)
	$name
end