package io.intino.konos.builder.codegeneration.services.ui.display.mold;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class AbstractMoldTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("mold"))).output(literal("package ")).output(mark("package")).output(literal(".displays;\n\nimport io.intino.alexandria.ui.displays.AlexandriaMold;\nimport io.intino.alexandria.ui.model.Mold;\nimport io.intino.alexandria.ui.model.mold.Block;\nimport io.intino.alexandria.ui.model.mold.Stamp;\nimport io.intino.alexandria.ui.model.mold.stamps.*;\n\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport ")).output(mark("package", "validPackage")).output(literal(".displays.notifiers.")).output(mark("name", "firstUpperCase")).output(literal("Notifier;\n\npublic abstract class Abstract")).output(mark("name", "FirstUpperCase")).output(literal(" extends AlexandriaMold<")).output(mark("name", "FirstUpperCase")).output(literal("Notifier> {\n\n\tpublic Abstract")).output(mark("name", "FirstUpperCase")).output(literal("(")).output(mark("box", "FirstUpperCase")).output(literal("Box box) {\n\t\tsuper(box);\n\t\telement(buildMold(box));\n\t}\n\n\tpublic Mold buildMold(")).output(mark("box", "FirstUpperCase")).output(literal("Box box) {\n\t\tMold mold = new Mold()\n\t\t")).output(expression().output(mark("block", "definition").multiple("\n"))).output(literal(";\n\t\tmold.name(\"")).output(mark("name")).output(literal("\");\n\t\tmold.type(\"")).output(mark("name", "camelCaseToSnakeCase")).output(literal("\");\n\t\treturn mold;\n\t}\n}")),
				rule().condition((type("block")), (trigger("definition"))).output(literal(".add(new Block()\n\t")).output(expression().output(literal(".name(\"")).output(mark("name")).output(literal("\")"))).output(literal("\n\t")).output(expression().output(literal(".expanded(")).output(mark("expanded")).output(literal(")"))).output(literal("\n\t")).output(expression().output(mark("layout").multiple(""))).output(literal("\n\t")).output(expression().output(literal(".height(")).output(mark("height")).output(literal(")"))).output(literal("\n\t")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal("\n\t")).output(expression().output(mark("hidden"))).output(literal("\n\t")).output(expression().output(mark("hiddenIfMobile"))).output(literal("\n\t")).output(expression().output(literal(".style(\"")).output(mark("blockStyle")).output(literal("\")"))).output(literal("\n\t")).output(expression().output(mark("blockClassName"))).output(literal("\n\t")).output(expression().output(mark("stamp").multiple(""))).output(literal("\n\t")).output(expression().output(mark("block", "definition").multiple(""))).output(literal(")")),
				rule().condition((attribute("hiddenenabled")), (trigger("hidden"))).output(literal(".hidden((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Blocks.")).output(mark("name", "FirstUpperCase")).output(literal(".hidden(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("hidden"))),
				rule().condition((trigger("hiddenifmobile"))).output(literal(".hiddenIfMobile(")).output(mark("")).output(literal(")")),
				rule().condition((trigger("layout"))).output(literal(".add(Block.Layout.")).output(mark("", "FirstUpperCase")).output(literal(")")),
				rule().condition((allTypes("stamp", "location")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Location()")).output(expression().output(mark("icon"))).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "breadcrumbs")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Breadcrumbs()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "cardwallet")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.CardWallet()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "pie")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Pie()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("histogram", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Histogram()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "timeline")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Timeline()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "map")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Map().zoom(")).output(mark("zoom")).output(literal(").latitude(")).output(mark("latitude")).output(literal(").longitude(")).output(mark("longitude")).output(literal(")")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("cataloglink", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.CatalogLink().catalog((io.intino.alexandria.ui.model.Catalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\").element())")).output(expression().output(literal(".filter(")).output(mark("filter")).output(literal(")"))).output(expression().output(literal(".itemLoader(")).output(mark("itemLoader")).output(literal(")"))).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("embeddedcatalog", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.EmbeddedCatalog().catalogDisplayBuilder((session) -> (io.intino.alexandria.ui.displays.AlexandriaAbstractCatalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\")).catalog((io.intino.alexandria.ui.model.Catalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\").element()).views(java.util.Arrays.asList(")).output(mark("view", "quoted").multiple(", ")).output(literal("))")).output(expression().output(literal(".maxItems(")).output(mark("embeddedCatalogMaxItems")).output(literal(")"))).output(expression().output(literal(".filter(")).output(mark("catalogFilter")).output(literal(")"))).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("embeddeddisplay", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.EmbeddedDisplay().displayType(\"")).output(mark("displayType")).output(literal("\")\n\t")).output(expression().output(literal(".displayBuilder(")).output(mark("displayBuilder")).output(literal(")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("embeddeddialog", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.EmbeddedDialog().dialogType(\"")).output(mark("dialogType")).output(literal("\")\n")).output(expression().output(literal(".dialogBuilder(")).output(mark("embeddedDialogBuilder")).output(literal(")"))).output(literal("\n")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "temporalcatalogrange")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.TemporalCatalogRange()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "temporalcatalograngenavigator")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.TemporalCatalogRangeNavigator()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "temporalcatalogtime")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.TemporalCatalogTime()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "temporalcatalogtimenavigator")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.TemporalCatalogTimeNavigator()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("highlight", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Highlight()")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("itemlinks", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.ItemLinks().title(")).output(mark("title")).output(literal(")")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "polymericon")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.icons.AlexandriaIcon().title(")).output(mark("title")).output(literal(")")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("resourceicon", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.icons.ResourceIcon().title(")).output(mark("title")).output(literal(")")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("base64icon", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.icons.Base64Icon().title(")).output(mark("title")).output(literal(")")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("rating", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Rating().max(")).output(mark("ratingMax")).output(literal(")")).output(expression().output(literal(".ratingIcon(")).output(mark("ratingIcon", "quoted")).output(literal(")"))).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "picture")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.Picture()")).output(expression().output(literal(".defaultPicture(\"")).output(mark("defaultPicture")).output(literal("\")"))).output(expression().output(literal(".avatarProperties(")).output(mark("avatarProperties")).output(literal(")"))).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "opendialogoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.OpenDialogOperation()")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".dialogType(\"")).output(mark("dialogType")).output(literal("\").dialogBuilder(")).output(mark("dialogBuilder")).output(literal(").mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("openexternaldialogoperation", "stamp")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.OpenExternalDialogOperation()")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".dialogPathBuilder(")).output(mark("dialogPathBuilder")).output(literal(").dialogTitleBuilder(")).output(mark("dialogTitleBuilder")).output(literal(").mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "opencatalogoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.OpenCatalogOperation()")).output(expression().output(literal(".width(")).output(mark("width")).output(literal(")"))).output(literal(".catalogDisplayBuilder((session) -> (io.intino.alexandria.ui.displays.AlexandriaAbstractCatalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\")).catalog((io.intino.alexandria.ui.model.Catalog) Displays.displayFor(box, \"")).output(mark("catalog")).output(literal("\").element()).views(java.util.Arrays.asList(")).output(mark("view", "quoted").multiple(", ")).output(literal("))")).output(expression().output(literal(".filter(")).output(mark("catalogFilter")).output(literal(")"))).output(literal(".position(\"")).output(mark("position")).output(literal("\").selection(\"")).output(mark("selection")).output(literal("\")")).output(expression().output(literal(".execution(")).output(mark("openCatalogOperationExecution")).output(literal(")"))).output(literal(".mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "downloadoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.DownloadOperation()")).output(expression().output(literal(".options(java.util.Arrays.asList(")).output(mark("options", "quoted").multiple(", ")).output(literal("))"))).output(literal(".execution(")).output(mark("downloadexecution")).output(literal(").mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "previewoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.PreviewOperation().preview(")).output(mark("previewexecution")).output(literal(").mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "taskoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.TaskOperation().execution(")).output(mark("taskexecution")).output(literal(")")).output(expression().output(literal(".confirmText(\"")).output(mark("confirmText")).output(literal("\")"))).output(literal(".mode(\"")).output(mark("mode")).output(literal("\")")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t")).output(mark("common")).output(literal(")")),
				rule().condition((allTypes("stamp", "exportoperation")), (trigger("stamp"))).output(literal(".add(new io.intino.alexandria.ui.model.mold.stamps.operations.ExportOperation()\n\t")).output(expression().output(literal(".from(java.time.Instant.ofEpochMilli(")).output(mark("from")).output(literal("L))"))).output(literal("\n\t")).output(expression().output(literal(".to(java.time.Instant.ofEpochMilli(")).output(mark("to")).output(literal("L))"))).output(literal("\n\t")).output(expression().output(literal(".options(java.util.Arrays.asList(")).output(mark("options", "quoted").multiple(", ")).output(literal("))"))).output(literal("\n\t.execution(")).output(mark("exportexecution")).output(literal(")\n\t")).output(expression().output(literal(".alexandriaIcon(\"")).output(mark("alexandriaIcon")).output(literal("\")"))).output(literal("\n\t.mode(\"")).output(mark("mode")).output(literal("\")")).output(mark("common")).output(literal(")")),
				rule().condition((type("stamp"))).output(literal(".add(new ")).output(mark("type", "FirstUpperCase")).output(literal("()")).output(mark("common")).output(literal(")")),
				rule().condition((trigger("common"))).output(expression().output(literal(".name(\"")).output(mark("name")).output(literal("\")"))).output(expression().output(literal(".label(\"")).output(mark("label")).output(literal("\")"))).output(expression().output(mark("labelLoader"))).output(expression().output(literal(".height(")).output(mark("height")).output(literal(")"))).output(literal("\n")).output(expression().output(literal(".defaultStyle(\"")).output(mark("defaultStyle")).output(literal("\")"))).output(expression().output(literal(".suffix(\"")).output(mark("suffix")).output(literal("\")"))).output(literal("\n")).output(expression().output(literal(".layout(Stamp.Layout.")).output(mark("layout")).output(literal(")"))).output(expression().output(literal(".color(")).output(mark("color")).output(literal(")"))).output(expression().output(mark("editable"))).output(literal("\n")).output(expression().output(mark("style"))).output(literal("\n")).output(expression().output(mark("className"))).output(literal("\n")).output(expression().output(mark("valueMethod"))),
				rule().condition((trigger("labelloader"))).output(literal(".labelLoader((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "firstUpperCase")).output(literal(".label(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("style"))).output(literal(".style((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "firstUpperCase")).output(literal(".style(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("blockclassname"))).output(literal(".className((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Blocks.")).output(mark("name", "firstUpperCase")).output(literal(".className(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("classname"))).output(literal(".className((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "firstUpperCase")).output(literal(".className(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("catalogfilter"))).output(literal("(element, source, target, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".filter(box, element, (")).output(mark("moldClass")).output(literal(") source, target, session)")),
				rule().condition((trigger("displaybuilder"))).output(literal("(name, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".buildDisplay(box, name, session)")),
				rule().condition((trigger("embeddeddialogbuilder"))).output(literal("(name, session) -> ")).output(mark("package", "validPackage")).output(literal(".dialogs.Dialogs.dialogFor(box, \"")).output(mark("dialog")).output(literal("\")")),
				rule().condition((trigger("title"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".title(box, (")).output(mark("moldClass")).output(literal(") object, session)")),
				rule().condition((trigger("dialogbuilder"))).output(literal("(object, session) -> {\n\tio.intino.alexandria.ui.displays.AlexandriaDialog dialog = ")).output(mark("package", "validPackage")).output(literal(".dialogs.Dialogs.dialogFor(box, \"")).output(mark("dialog")).output(literal("\");\n\tdialog.target(object);\n\treturn dialog;\n}")),
				rule().condition((trigger("dialogpathbuilder"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".dialogPath(box, (")).output(mark("moldClass")).output(literal(") object, session)")),
				rule().condition((trigger("dialogtitlebuilder"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".dialogTitle(box, (")).output(mark("moldClass")).output(literal(") object, session)")),
				rule().condition((trigger("exportexecution"))).output(literal("(object, from, to, option, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".execute(box, (")).output(mark("moldClass")).output(literal(") object, from, to, option, session)")),
				rule().condition((trigger("downloadexecution"))).output(literal("(object, option, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".execute(box, (")).output(mark("moldClass")).output(literal(") object, option, session)")),
				rule().condition((trigger("previewexecution"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".preview(box, (")).output(mark("moldClass")).output(literal(") object, session)")),
				rule().condition((trigger("taskexecution"))).output(literal("(object, selfId, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".execute(box, (")).output(mark("moldClass")).output(literal(") object, selfId, session)")),
				rule().condition((trigger("opencatalogoperationexecution"))).output(literal("(object, selection, selfId, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".execute(box, (")).output(mark("moldClass")).output(literal(") object, selection, selfId, session)")),
				rule().condition((trigger("filter"))).output(literal("(source, target, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".filter(box, (")).output(mark("moldClass")).output(literal(") source, target, session)")),
				rule().condition((trigger("itemloader"))).output(literal("(source, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".item(box, (")).output(mark("moldClass")).output(literal(") source, session)")),
				rule().condition((trigger("editable"))).output(literal(".changeEvent((object, value, selfId, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".onChange(box, (")).output(mark("moldClass")).output(literal(") object, value, selfId, session))\n.validateEvent((object, value, selfId, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".onValidate(box, (")).output(mark("moldClass")).output(literal(") object, value, selfId, session))")),
				rule().condition((trigger("valuemethod"))).output(literal(".value((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".value(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("icon"))).output(literal(".icon((object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".icon(box, (")).output(mark("moldClass")).output(literal(") object, session))")),
				rule().condition((trigger("color"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".color(box, (")).output(mark("moldClass")).output(literal(") object, session)")),
				rule().condition((trigger("avatarproperties"))).output(literal("(object, session) -> ")).output(mark("mold", "FirstUpperCase")).output(literal(".Stamps.")).output(mark("name", "FirstUpperCase")).output(literal(".avatarProperties(box, (")).output(mark("moldClass")).output(literal(") object, session)"))
		);
	}
}