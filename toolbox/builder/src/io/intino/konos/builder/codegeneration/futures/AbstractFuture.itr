def type(future)
	package $package+validPackage.futures;

	$schemaImport
	import io.intino.alexandria.logger.Logger;

	import java.util.List;
	import java.util.Map;

	import static com.cinepolis.trooper.box.futures.FuturesService.BasePath;

	public abstract class Abstract$name+FirstUpperCase {
		protected $name+FirstUpperCase~Schema schema;

		$option+methods...[$NL$NL]

		public void timeout() {
			onTimeout($parameter+call...[,]);
		}

		protected abstract void onTimeout($parameter+call...[,]);

		$parameter+getter...[$NL$NL]
		$optionParameter+optionGetter...[$NL$NL]

		public URI uri() {
			if (schema == null) Logger.error("Future is not loaded");
			return new URI();
		}

		public class URI {
			public static final String Path = "$name+camelCaseToSnakeCase/";

			public List<String> ids() {
				return List.of($option+id...[, ]);
			}

			public String option(String id) {
				$option+getterURI...[$NL]
				return null;
			}

			public Map<String, String> options() {
				return Map.of($option+map...[,]);
			}

			$option+optionGetterURI...[$NL]
		}
	}
end


def trigger(methods)
	public void $name+firstLowerCase() {
		onAccept($parameter+call...[, ]);
	}

	protected abstract void on$name+firstUpperCase($parameter+signature...[, ][, $optionParameter+signature...[, ]]);
end

def trigger(getter)
	protected String $name() {
		return schema.$name;
	}
end

def trigger(optionGetter)
	protected TaskSchedule $option+firstLowerCase~$name+FirstUpperCase() {
		return schema.$option+firstLowerCase().$name+FirstLowerCase;
	}
end

def trigger(call)
	$name()
end

def trigger(signature)
	$type $name
end

def trigger(name)
	$name
end

def trigger(id)
	schema.$name().id
end

def trigger(getterURI)
	if (schema.$name+firstLowerCase().id.equals(id)) return "$name+firstLowerCase";
end

def trigger(optionGetterURI)
	public String $name+firstLowerCase() {
		return BasePath + Path + schema.$name+firstLowerCase().id;
	}
end

def trigger(map)
	"$name+firstLowerCase", schema.$name+firstLowerCase().id
end

def type(schemaImport)
	import $package.schemas.*;
end