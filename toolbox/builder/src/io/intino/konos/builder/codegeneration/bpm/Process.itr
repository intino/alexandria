def type(process & src)
	package $package+validPackage.bpm;

	import io.intino.alexandria.bpm.Task;
	import io.intino.alexandria.bpm.Task.Type.*;
	import io.intino.alexandria.message.MessageHub;
	import $package+validPackage.$box+FirstUpperCase~Box;

	public class $name+firstUpperCase extends Abstract$name+firstUpperCase {

		$name+firstUpperCase($box+firstUpperCase~Box box, String id) {
			super(box, id);
		}

		$name+firstUpperCase($box+firstUpperCase~Box box, $parameter+signature...[, ]) {
			super(UUID.randomUUID().toString());
			$parameter+put...[$NL]
			init(box);
		}

		$state+execute...[$NL$NL]
	}
end

def type(process)
	package $package+validPackage.bpm;

	import static io.intino.alexandria.bpm.State.Type.*;
	import io.intino.alexandria.bpm.Task;
    import io.intino.alexandria.message.MessageHub;
    import $package+validPackage.$box+FirstUpperCase~Box;

    import java.util.List;

    import static io.intino.alexandria.bpm.Link.Type.*;

    public abstract class Abstract$name+firstUpperCase extends io.intino.alexandria.bpm.Process {

		protected $box+firstUpperCase~Box box;

		Abstract$name+firstUpperCase($box+firstUpperCase~Box box, String id) {
			super(box, id);
			this.box = box;
		}

		Abstract$name+firstUpperCase($box+firstUpperCase~Box box, $parameter+signature...[, ]) {
			super(UUID.randomUUID().toString());
			this.box = box;
			$parameter+put...[$NL]
			init();
		}

		private void init() {
			[$state...[$NL]]
			[$link...[$NL]]
		}

		@Override
		public String name() {
			return "$name+firstUpperCase";
		}

		$state+abstractExecute...[$NL$NL]

		$state+method...[$NL$NL]
	}
end


def trigger(method)
	private Task $name+firstLowerCase() {
		return new Task(Task.Type.$taskType) {
			@Override
			public void execute() {
				execute$name+FirstUpperCase();
			}
		}
	}
end

def trigger(abstractExecute)
	protected abstract execute$name+FirstUpperCase();
end

def trigger(execute)
	protected execute$name+FirstUpperCase() {

	}
end

def trigger(method)

end


def trigger(state)
	addState(new io.intino.alexandria.bpm.State("$name", $name+firstLowerCase()[, $type+lowercase+FirstUpperCase...[, ]]));
end

def trigger(link)
	addLink(new io.intino.alexandria.bpm.Link("$from", "$to", $type+linkType));
end

def attribute(this:DefaultLine) trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Default
end

def attribute(this:Exclusive) trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Exclusive
end

def trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Inclusive
end

def trigger(put)
	put("$name", $name);
end