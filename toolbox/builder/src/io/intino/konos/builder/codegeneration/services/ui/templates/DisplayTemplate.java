package io.intino.konos.builder.codegeneration.services.ui.templates;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class DisplayTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((allTypes("accessible","display"))).output(literal("package ")).output(mark("package", "validPackage")).output(literal(".ui.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal(";\n\n")).output(mark("templatesImport")).output(literal("\n")).output(mark("blocksImport")).output(literal("\n")).output(mark("itemsImport")).output(literal("\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays.notifiers.")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("ProxyNotifier;\nimport io.intino.alexandria.ui.displays.ProxyDisplay;\nimport io.intino.alexandria.ui.services.push.UISession;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Proxy extends ProxyDisplay<")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("ProxyNotifier> {\n    ")).output(mark("parameter", "field").multiple("\n")).output(literal("\n\n    public ")).output(mark("name", "SnakeCaseToCamelCase", "FirstUpperCase")).output(literal("Proxy(UISession session, String appUrl) {\n        super(session, appUrl, \"/")).output(mark("name", "SnakeCaseToCamelCase", "lowercase")).output(literal("proxy\");\n    }\n\n\t")).output(expression().output(mark("request", "accessible").multiple("\n\n"))).output(literal("\n\t")).output(expression().output(mark("parameter", "method").multiple("\n\n"))).output(literal("\n\n    @Override\n    protected Map<String, String> parameters() {\n        Map<String, String> result = new HashMap<>();\n        ")).output(mark("parameter", "map").multiple("\n")).output(literal("\n        return result;\n    }\n\n    @Override\n    protected void refreshBaseUrl(String url) {\n        notifier.refreshBaseUrl(url);\n    }\n\n    @Override\n    protected void refreshError(String error) {\n        notifier.refreshError(error);\n    }\n\n}")),
			rule().condition((type("templatesimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.templates.*;")),
			rule().condition((type("blocksimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.blocks.*;")),
			rule().condition((type("itemsimport"))).output(literal("import ")).output(mark("package", "validPackage")).output(literal(".ui.displays.items.*;")),
			rule().condition((type("display"))).output(literal("package ")).output(mark("package")).output(literal(".ui.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal(";\n\nimport io.intino.alexandria.exceptions.*;\nimport ")).output(mark("package")).output(literal(".*;\n")).output(mark("schemaImport")).output(literal("\nimport ")).output(mark("package", "validPackage")).output(literal(".")).output(mark("box", "firstUpperCase")).output(literal("Box;\nimport ")).output(mark("package", "validPackage")).output(literal(".ui.displays")).output(expression().output(literal(".")).output(mark("packageType")).output(literal("s"))).output(literal(".Abstract")).output(mark("name", "firstUpperCase")).output(literal(";\n\npublic class ")).output(mark("name", "firstUpperCase")).output(literal(" extends Abstract")).output(mark("name", "firstUpperCase")).output(literal("<")).output(mark("box", "firstUpperCase")).output(literal("Box> {\n\n    public ")).output(mark("name", "firstUpperCase")).output(literal("(")).output(mark("box", "firstUpperCase")).output(literal("Box box) {\n        super(box);\n    }\n\n\t")).output(expression().output(mark("request").multiple("\n\n"))).output(literal("\n\t")).output(expression().output(mark("parameter", "setter").multiple("\n\n"))).output(literal("\n}")),
			rule().condition((allTypes("request","asset"))).output(literal("public io.intino.alexandria.ui.spark.UIFile ")).output(mark("name")).output(literal("(")).output(expression().output(mark("parameter")).output(literal(" value"))).output(literal(") {\n    return null;\n}")),
			rule().condition((type("request")), (trigger("accessible"))).output(literal("public void ")).output(mark("name")).output(literal("(")).output(expression().output(mark("parameter")).output(literal(" value"))).output(literal(") {\n\trequest(\"")).output(mark("name")).output(literal("\"")).output(expression().output(literal(", ")).output(mark("parameter", "parameterValue"))).output(literal(");\n}")),
			rule().condition((trigger("parametervalue"))).output(literal("value")),
			rule().condition((type("request"))).output(literal("public void ")).output(mark("name")).output(literal("(")).output(expression().output(mark("parameter")).output(literal(" value"))).output(literal(") {\n\n}")),
			rule().condition((trigger("setter"))).output(literal("public void ")).output(mark("value", "firstLowerCase")).output(literal("(String value) {\n\n}")),
			rule().condition((trigger("field"))).output(literal("private String ")).output(mark("value", "firstLowerCase")).output(literal(";")),
			rule().condition((trigger("map"))).output(literal("result.put(\"")).output(mark("value")).output(literal("\", ")).output(mark("value", "firstLowerCase")).output(literal(");")),
			rule().condition((trigger("method"))).output(literal("public void ")).output(mark("value", "firstLowerCase")).output(literal("(String value) {\n    this.")).output(mark("value", "firstLowerCase")).output(literal(" = value;\n}")),
			rule().condition((anyTypes("date","datetime")), (type("list")), (trigger("parameter"))).output(mark("value")),
			rule().condition((anyTypes("date","datetime")), (trigger("parameter"))).output(mark("value")),
			rule().condition((type("list")), (trigger("parameter"))).output(mark("value")).output(literal("[]")),
			rule().condition((trigger("parameter"))).output(mark("value")),
			rule().condition((type("schemaimport"))).output(literal("import ")).output(mark("package")).output(literal(".schemas.*;")),
			rule().condition((trigger("import"))).output(literal("import ")).output(mark("package")).output(literal(".ui.displays.*;"))
		);
	}
}