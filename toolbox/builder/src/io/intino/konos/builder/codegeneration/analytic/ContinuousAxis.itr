def type(continuous)
	package $package+ValidPackage.analytic.axes;

	import $package+ValidPackage.analytic.Axis;
    import java.util.*;
    import java.util.stream.Collectors;
    import java.util.stream.Stream;

    public class $name+snakeCaseToCamelCase+FirstUpperCase implements Axis {

        public static final String AXIS_LABEL = "$label";

        private static final class Singleton {
            private static final $name+snakeCaseToCamelCase+FirstUpperCase INSTANCE = new $name+snakeCaseToCamelCase+FirstUpperCase();
        }

		// === STATIC METHODS === //

        public static $name+snakeCaseToCamelCase+FirstUpperCase get() {
        	return Singleton.INSTANCE;
        }

        public static String label() {
        	return AXIS_LABEL;
        }

        public static int size() {
        	return get().getSize();
        }

        public static Range component(String id) {
        	return get().getComponent(id);
        }

        public static Range component(int index) {
        	return get().getComponent(index);
        }

        public static List<Range> ranges() {
            return get().getRanges();
        }

        public static Range rangeOf(final double value) {
            final Range$[] ranges = Singleton.INSTANCE.ranges;
        	int index = binarySearch(ranges, value);
        	index = index < 0 ? (index + 1) * -1 : index;
        	return ranges$[index >= ranges.length ? ranges.length - 1 : index];
        }

        private static int binarySearch(final Range$[] ranges, final double value) {
        	int low = 0;
        	int high = ranges.length - 1;

        	while (low <= high) {
        		final int mid = (low + high) >>> 1;
        		final double midVal = ranges$[mid].max;
        		final int comparison = Double.compare(midVal, value);

        		if (comparison < 0)
        			low = mid + 1;
        		else if (comparison > 0)
        			high = mid - 1;
        		else
        			return mid;
        	}
        	return -(low + 1);
        }

        // === === //

    	private final Range$[] ranges = new Range$[$rangeSize];

    	private $name+snakeCaseToCamelCase+FirstUpperCase() {
    		$range+init...[$NL]
    	}

        @Override
    	public String getLabel() {
    		return AXIS_LABEL;
    	}

        @Override
		public Range getComponent(String id) {
			return ranges$[Integer.parseInt(id)];
		}

    	@Override
		public Range getComponent(int index) {
			return ranges$[index];
		}

		public List<Range> getRanges() {
        	return new AbstractList<>() {
        		@Override
        		public Range get(int index) {
        			return ranges$[index];
        		}

        		@Override
        		public int size() {
        			return ranges.length;
        		}
        	};
        }

		@Override
		public int getSize() {
			return ranges().size();
		}

		@Override
		public List<Range> getComponents() {
			return ranges();
		}

		@Override
		public Stream<Range> toStream() {
		    return Arrays.stream(ranges);
		}

    	public class Range implements Component {

    		private final int index;
    		private final double min;
    		private final double max;
    		private final String label;

    		public Range(int index, double min, double max, String label) {
    			this.index = index;
    			this.min = min;
    			this.max = max;
    			this.label = label;
    		}

    		public double min() {
    			return min;
    		}

    		public double max() {
    			return max;
    		}

			@Override
			public int index() {
				return index;
			}

			@Override
			public String id() {
				return label;
			}

            @Override
			public String label() {
				return label;
			}

			@Override
			public Axis axis() {
				return $name+snakeCaseToCamelCase+FirstUpperCase.this;
			}

		    @Override
		    public boolean equals(Object o) {
		    	if (this == o) return true;
		    	if (o == null || getClass() != o.getClass()) return false;
		    	Range range = (Range) o;
		    	return index == range.index;
		    }

		    @Override
		    public int hashCode() {
		    	return index;
		    }

		    @Override
		    public String toString() {
		    	return axis().getClass().getSimpleName()+".Range{" +
		    			"index=" + index +
		    			", min=" + min +
		    			", max=" + max +
		    			", label='" + label + "'" +
		    			'}';
		    }
    	}
    }
end

def type(range & lower) attribute(label) trigger(init)
	ranges$[$index] = new Range($index, Double.MIN_VALUE, $bound, "$label");
end

def type(range & upper) attribute(label) trigger(init)
	ranges$[$index] = new Range($index, $bound, Double.MAX_VALUE, "$label");
end

def type(range) attribute(label) trigger(init)
	ranges$[$index] = new Range($index, $lower, $upper, "$label");
end

def type(range & lower) trigger(init)
	ranges$[$index] = new Range($index, Double.MIN_VALUE, $bound, "< $bound");
end

def type(range & upper) trigger(init)
	ranges$[$index] = new Range($index, $bound, Double.MAX_VALUE, "> $bound");
end

def type(range) trigger(init)
	ranges$[$index] = new Range($index, $lower, $upper, "$lower - $upper");
end