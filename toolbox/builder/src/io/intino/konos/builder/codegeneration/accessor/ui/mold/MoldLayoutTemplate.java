package io.intino.konos.builder.codegeneration.accessor.ui.mold;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class MoldLayoutTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
				rule().condition((type("mold"))).output(literal("<link rel=\"import\" href=\"../../../lib/polymer/polymer.html\">\n<link rel=\"import\" href=\"../../../lib/cotton-translator/cotton-translator-behavior.html\">\n\n<link rel=\"import\" href=\"../../../lib/alexandria-ui-elements/_common/alexandria-breadcrumbs-behavior.html\">\n<link rel=\"import\" href=\"../../../lib/alexandria-ui-elements/_common/mold/alexandria-mold-layout-behavior.html\">\n<link rel=\"import\" href=\"../../../lib/alexandria-ui-elements/_common/mold/alexandria-mold-block.html\">\n<link rel=\"import\" href=\"../../../lib/alexandria-ui-elements/_common/mold/alexandria-mold-stamps.html\">\n\n<dom-module id=\"")).output(mark("name", "CamelCaseToSnakeCase")).output(literal("-layout\">\n\n\t<template>\n\t\t")).output(mark("block").multiple("\n")).output(literal("\n\t\t")).output(mark("expandedBlocks")).output(literal("\n\t\t<div id=\"highlight\"></div>\n\t</template>\n\n\t<style>\n\t\t:host {\n\t\t\tdisplay:block;\n\t\t\theight:100%;\n\t\t\toverflow:auto;\n\t\t\tposition:relative;\n\t\t}\n\t\t")).output(expression().output(mark("block", "style").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(mark("stamp", "style").multiple("\n"))).output(literal("\n\t\t:host[mode=\"list\"], :host[mode=\"grid\"] {\n\t\t\twidth: 100%;\n\t\t}\n\t\t:host[mode=\"magazine\"] alexandria-mold-block {\n\t\t\theight: 100%;\n\t\t}\n\t\t:host alexandria-mold-block {\n\t\t\tmargin-left: 2px;\n\t\t\tmargin-right: 2px;\n\t\t}\n\t\t:host .expanded-block {\n\t\t\tmargin: 10px 0;\n\t\t}\n\t\t:host #highlight {\n\t\t\tbackground: var(--accent-color);\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\theight: 100%;\n\t\t\twidth: 100%;\n\t\t\tvisibility: hidden;\n\t\t\topacity: 0;\n\t\t\ttransition: visibility 0s 0.5s, opacity 0.5s linear;\n\t\t\tborder-radius: 10px;\n\t\t}\n\t\t:host #highlight.visible {\n\t\t\tvisibility: visible;\n\t\t\topacity: 0.3;\n\t\t\ttransition: opacity 0.5s linear;\n\t\t}\n\t</style>\n\n\t<script>\n\t\tPolymer({\n\t\t\tis: '")).output(mark("name", "CamelCaseToSnakeCase")).output(literal("-layout',\n\n\t\t\tbehaviors: [ CottonBehaviors.TranslatorBehavior, AlexandriaBehaviors.MoldLayoutBehavior, AlexandriaBehaviors.BreadcrumbsBehavior ],\n\n\t\t\tblocks : function() {\n\t\t\t\tvar blocks = [];\n\t\t\t\t")).output(expression().output(mark("block", "js").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(mark("expandedblocks", "js"))).output(literal("\n\t\t\t\treturn blocks;\n\t\t\t},\n\n\t\t\tstamps : function() {\n\t\t\t\tvar stamps = [];\n\t\t\t\t")).output(expression().output(mark("stamp", "js").multiple("\n"))).output(literal("\n\t\t\t\treturn stamps;\n\t\t\t}\n\t\t});\n\t</script>\n\n</dom-module>")),
				rule().condition((type("block")), (trigger("js"))).output(literal("blocks.push({")).output(expression().output(literal("name:\"")).output(mark("name")).output(literal("\""))).output(expression().output(literal(",layout:\"")).output(mark("layout").multiple(" ")).output(literal("\""))).output(expression().output(literal(",expanded:")).output(mark("expanded"))).output(expression().output(literal(",style:\"")).output(mark("style")).output(literal("\""))).output(expression().output(literal(",width:\"")).output(mark("width")).output(literal("\""))).output(expression().output(literal(",height:\"")).output(mark("height")).output(literal("\""))).output(expression().output(literal(",hiddenIfMobile:")).output(mark("hiddenIfMobile"))).output(literal("});\n")).output(expression().output(mark("block", "js").multiple("\n"))),
				rule().condition((type("stamp")), (trigger("js"))).output(literal("stamps.push({name:\"")).output(mark("name")).output(literal("\",type:\"")).output(mark("type")).output(literal("\"")).output(expression().output(literal(",")).output(mark("attribute").multiple(","))).output(expression().output(literal(",properties:{")).output(mark("property").multiple(",")).output(literal("}"))).output(literal("});")),
				rule().condition((allTypes("hascustomclass", "stamp")), (trigger("style"))).output(literal(":host .")).output(mark("name")).output(literal(" { @apply(--")).output(mark("name")).output(literal("); }")),
				rule().condition((type("stamp")), (trigger("style"))),
				rule().condition((allTypes("hascustomclass", "block")), (trigger("style"))).output(literal(":host .")).output(mark("name")).output(literal(" { @apply(--")).output(mark("name")).output(literal("); }\n")).output(expression().output(mark("block", "style").multiple("\n"))),
				rule().condition((type("block")), (trigger("style"))),
				rule().condition((anyTypes("number", "boolean")), (trigger("attribute"))).output(mark("name")).output(literal(":")).output(mark("value")),
				rule().condition((trigger("attribute"))).output(mark("name")).output(literal(":\"")).output(mark("value")).output(literal("\"")),
				rule().condition((anyTypes("number", "boolean")), (trigger("property"))).output(mark("name")).output(literal(":")).output(mark("value")),
				rule().condition((trigger("property"))).output(mark("name")).output(literal(":\"")).output(mark("value")).output(literal("\"")),
				rule().condition((type("block")), (trigger("block"))).output(literal("<alexandria-mold-block class=\"")).output(mark("name")).output(literal("\" block=\"[[")).output(mark("name")).output(literal("]]\">\n\t")).output(expression().output(mark("block").multiple("\n"))).output(literal("\n\t")).output(expression().output(mark("stamp").multiple("\n"))).output(literal("\n</alexandria-mold-block>")),
				rule().condition((type("stamp"))).output(literal("<alexandria-stamp-")).output(mark("type")).output(literal(" class=\"")).output(mark("name")).output(literal("\" stamp=\"[[")).output(mark("name")).output(literal("]]\"></alexandria-stamp-")).output(mark("type")).output(literal(">")),
				rule().condition((type("expandedblocks")), (trigger("js"))).output(mark("block", "js").multiple("\n")),
				rule().condition((trigger("expandedblocks"))).output(literal("<div class=\"expanded-block\" hidden$=\"[[!hasExpandedBlocks]]\">\n\t")).output(expression().output(mark("block").multiple("\n"))).output(literal("\n</div>"))
		);
	}
}