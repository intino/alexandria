def type(jms)
	package $package;

	import $package.requests.*;
	import io.intino.alexandria.message.MessageHub;
	import io.intino.alexandria.logger.Logger;

	import javax.jms.BytesMessage;
	import javax.jms.JMSException;
	import javax.jms.Session;
	import javax.jms.Connection;
	import javax.jms.TextMessage;
	import java.io.ByteArrayOutputStream;
	import java.io.IOException;
	import java.io.InputStream;


	public class $name+firstUpperCase~Service {

		private $box+firstUpperCase~Configuration configuration;
		private final MessageHub messageHub;

		public $name+firstUpperCase~Service(MessageHub messageHub, $box+firstUpperCase~Box box) {
			this.configuration = box.configuration();
			this.messageHub = messageHub;
			if (session == null) return;
			$request...[$NL]
		}

		$notification...[$NL$NL]

		private static byte$[] toByteArray(InputStream stream) {
			try {
				ByteArrayOutputStream buffer = new ByteArrayOutputStream();
				int nRead;
				byte$[] data = new byte$[16384];
				while ((nRead = stream.read(data, 0, data.length)) != -1) {
					buffer.write(data, 0, nRead);
				}
				buffer.flush();
				return buffer.toByteArray();
			} catch (IOException e) {
				Logger.error(e);
			}
			return new byte$[0];
		}
	}
end

def type(request)
	messageHub.attachListener($queue+format), m -> new $name+firstUpperCase~Request(box));
end

def type(notification)
	public void notify$name+firstUpperCase([$parameter+signature...[, ]]) throws JMSException {
		final $returnMessageType~Message message = session.create$returnMessageType~Message();
		fill$name+firstUpperCase~Message(message[, $parameter+name...[, ]]);
		new $model~Producer(session, $queue+format).produce(message);
	}

	private void fill$name+firstUpperCase~Message($returnMessageType~Message message[, $parameter+signature...[, ]]) throws JMSException {
		$parameter+assign...[$NL]
	}
end

def type(queue) trigger(format)
	"$name"[$custom...[]]
end

def trigger(custom)
	.replace("{$value}", configuration.get("$value"))
end

def type(parameter) trigger(name)
	$name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(signature)
	$type $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter & fileData) trigger(assign)
	message.writeBytes(toByteArray($name));
end

def type(parameter & objectData) trigger(assign)
	message.setText(new Gson().toJson($name));
end

def type(parameter) trigger(assign)
	message.set$type+formatted~Property("$name", $name);
end

def attribute(Integer) trigger(formatted)
	Int
end