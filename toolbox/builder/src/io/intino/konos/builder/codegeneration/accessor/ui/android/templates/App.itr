def type(manifest)
    <?xml version="1.0" encoding="utf-8"?>
    <manifest xmlns:android="http://schemas.android.com/apk/res/android">

        <uses-permission android:name="android.permission.INTERNET" />
        <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
        <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
        <uses-permission android:name="com.google.android.providers.gsf.permission.READ_GSERVICES"/>

        <application
            android:label="@string/app_name"
            android:allowBackup="false"
            android:supportsRtl="true"
            android:theme="@style/AppTheme"
            android:usesCleartextTraffic="true"
            android:requestLegacyExternalStorage="true">

            $resource...[$NL]

            <provider
                android:name="androidx.core.content.FileProvider"
                android:authorities="$${applicationId}.provider"
                android:exported="false"
                android:grantUriPermissions="true">
                <meta-data
                    android:name="android.support.FILE_PROVIDER_PATHS"
                    android:resource="@xml/provider_paths" />
            </provider>
        </application>

    </manifest>
end

def type(resource & main)
    <activity
        android:name=".pages.$name+snakecaseToCamelCase+firstUpperCase~Activity"
        android:exported="true"
        android:windowSoftInputMode="adjustNothing">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />
            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
end

def type(resource)
    <activity
        android:name=".pages.$name+snakecaseToCamelCase+firstUpperCase~Activity"
        android:exported="true"
        android:windowSoftInputMode="adjustNothing">
    </activity>
end

def type(gradle & settings)
    pluginManagement {
        repositories {
            google()
            gradlePluginPortal()
            mavenCentral()
        }
    }

    dependencyResolutionManagement {
        repositories {
            google()
            mavenCentral()
        }
    }

    rootProject.name = "$project"
    include(":android")
    include(":shared")
end

def type(gradle & android)
    plugins {
        id("com.android.application")
        kotlin("android")
    }

    android {
        namespace = "$package.mobile.android"
        compileSdk = 34
        defaultConfig {
            applicationId = "$package.mobile.android"
            minSdk = 32
            targetSdk = 34
            versionCode = 1
            versionName = "1.0"
        }
        buildFeatures {
            compose = true
        }
        composeOptions {
            kotlinCompilerExtensionVersion = "1.4.4"
        }
        packagingOptions {
            resources {
                excludes += "/META-INF/{AL2.0,LGPL2.1}"
            }
        }
        buildTypes {
            getByName("release") {
                isMinifyEnabled = false
            }
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_18
            targetCompatibility = JavaVersion.VERSION_18
        }
    }

    dependencies {
        implementation(project(":shared"))
        implementation("androidx.compose.ui:ui:1.5.4")
        implementation("androidx.compose.ui:ui-tooling:1.5.4")
        implementation("androidx.compose.ui:ui-tooling-preview:1.5.4")
        implementation("androidx.compose.foundation:foundation:1.5.4")
        implementation("androidx.compose.material:material:1.5.4")
        implementation("androidx.activity:activity-compose:1.8.2")
        implementation("com.google.android.material:material:1.11.0")
        implementation("com.google.android.flexbox:flexbox:3.0.0")
        implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
        implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
        implementation("androidx.databinding:databinding-runtime:8.2.0")
        implementation("com.caverock:androidsvg-aar:1.4")
        implementation("com.squareup.okhttp3:okhttp:4.9.0")
        implementation("com.google.android.gms:play-services-maps:18.2.0")
        implementation("com.malinskiy:materialicons:1.0.3")
    }
end

def type(gradle & shared)
    plugins {
        kotlin("multiplatform")
        id("org.jetbrains.kotlin.plugin.serialization")
        id("com.android.library")
    }

    kotlin {
        android()

        listOf(
            iosX64(),
            iosArm64(),
            iosSimulatorArm64()
        ).forEach {
            it.binaries.framework {
                baseName = "shared"
            }
        }

        sourceSets {
            val commonMain by getting {
                dependencies {
                    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.1")
                    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4")
                    implementation("org.jetbrains.kotlin:kotlin-stdlib:1.8.22")
                    implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.4.1")
                }
            }
            val commonTest by getting {
                dependencies {
                    implementation(kotlin("test"))
                }
            }
            val androidMain by getting {
                dependencies {
                    implementation("com.google.android.material:material:1.11.0")
                    implementation("com.google.android.flexbox:flexbox:3.0.0")
                    implementation("com.squareup.okhttp3:okhttp:4.9.0")
                    implementation("com.android.volley:volley:1.2.1")
                }
            }
            val androidTest by getting
            val iosX64Main by getting
            val iosArm64Main by getting
            val iosSimulatorArm64Main by getting
            val iosMain by creating {
                dependsOn(commonMain)
                iosX64Main.dependsOn(this)
                iosArm64Main.dependsOn(this)
                iosSimulatorArm64Main.dependsOn(this)
            }
            val iosX64Test by getting
            val iosArm64Test by getting
            val iosSimulatorArm64Test by getting
            val iosTest by creating {
                dependsOn(commonTest)
                iosX64Test.dependsOn(this)
                iosArm64Test.dependsOn(this)
                iosSimulatorArm64Test.dependsOn(this)
            }
        }
    }

    android {
        namespace = "$package.mobile"
        compileSdk = 34
        defaultConfig {
            minSdk = 32
            targetSdk = 34
        }
        compileOptions {
            sourceCompatibility = JavaVersion.VERSION_18
            targetCompatibility = JavaVersion.VERSION_18
        }
    }
end

def type(properties)
    <resources>
        $component...[$NL]
    </resources>
end

def type(strings)
    <?xml version="1.0" encoding="utf-8"?>
    <resources>
        <string name="app_name">$project</string>
    </resources>
end

def type(component)
    <declare-styleable name="$name+firstUpperCase"[ parent="$parent+firstUpperCase"]>
        $attribute...[$NL]
    </declare-styleable>
end

def type(attribute & root)
    <attr name="$name+lowerCase" format="string" />
end

def type(attribute)
    <attr name="$component+camelCaseToUnderscoreCase+lowerCase~_$name+lowerCase" format="string" />
end