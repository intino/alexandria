def type(column) type(id) trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.getAlignedLong(0);
	}
end

def type(column) type(long & unsigned) trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~ULong[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(long) trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~Long[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(int & unsigned) trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~UInteger[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(int) trigger(getter)
	public int $name+firstLowerCase() {
		return bitBuffer.get$aligned~Integer[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(short & unsigned) trigger(getter)
	public int $name+firstLowerCase() {
		return bitBuffer.get$aligned~UShort[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(short) trigger(getter)
	public short $name+firstLowerCase() {
		return bitBuffer.get$aligned~Short[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(byte & unsigned) trigger(getter)
	public short $name+firstLowerCase() {
		return bitBuffer.get$aligned~UByte[$bits+nbits]($offset[, $bits]);
	}
end

def type(column) type(byte) trigger(getter)
	public byte $name+firstLowerCase() {
		return bitBuffer.get$aligned~Byte[$bits+nbits]($offset[, $bits]);
	}
end

def type(column & boolean) trigger(getter)
	public boolean $name+firstLowerCase() {
		return bitBuffer.getBoolean($offset);
	}
end

def type(column & float) trigger(getter)
	public float $name+firstLowerCase() {
		return bitBuffer.get$aligned~Real$size~Bits($offset);
	}
end

def type(column & double) trigger(getter)
	public double $name+firstLowerCase() {
		return bitBuffer.get$aligned~Real$size~Bits($offset);
	}
end

def type(column & datetime) trigger(getter)
	public $type $name+firstLowerCase() {
		return java.time.Instant.ofEpochMilli(bitBuffer.get$aligned~Long[$bits+nbits]($offset[, $bits]));
	}
end

def type(column & date) trigger(getter)
	public $type $name+firstLowerCase() {
		return java.time.LocalDate.ofEpochDay(Short.toUnsignedInt(bitBuffer.get$aligned~Short[$bits+nbits]($offset[, $bits])));
	}
end

def type(column & categorical) trigger(getter)
	public $type+firstUpperCase.Component $name+firstLowerCase() {
		return $type+firstUpperCase.component(bitBuffer.getIntegerNBits($offset, $bits));
	}
end

def type(column & real) attribute(size:32) trigger(getter)
	public float $name+firstLowerCase() {
		return bitBuffer.getAlignedReal$size~Bits($offset);
	}
end

def type(column & real) trigger(getter)
	public double $name+firstLowerCase() {
		return bitBuffer.getAlignedReal$size~Bits($offset);
	}
end

def type(virtualColumn & primitive) trigger(abstract)
    public abstract $type+firstLowerCase $name+firstLowerCase();
end

def type(virtualColumn) trigger(abstract)
    public abstract $type+firstUpperCase $name+firstLowerCase();
end

def type(virtualColumn & primitive) trigger(implementation)
    @Override
    public $type+firstLowerCase $name+firstLowerCase() {
        // TODO: compute and return $name+firstLowerCase.
        return $defaultValue;
    }
end

def type(virtualColumn) trigger(implementation)
    @Override
    public $type+firstUpperCase $name+firstLowerCase() {
        // TODO: compute and return $name+firstLowerCase.
        return $defaultValue;
    }
end

def type(column) type(int & unsigned) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~UInteger[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & int) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~Integer[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & byte) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(byte $name+firstLowerCase) {
		bitBuffer.set$aligned~Byte[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & short) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(short $name+firstLowerCase) {
		bitBuffer.set$aligned~Short[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & byte & unsigned) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(byte $name+firstLowerCase) {
		bitBuffer.set$aligned~UByte[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & short & unsigned) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(short $name+firstLowerCase) {
		bitBuffer.set$aligned~UShort[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & boolean) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(boolean $name+firstLowerCase) {
		bitBuffer.setBoolean($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column) type(id) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.setAlignedLong(0, $name+firstLowerCase);
		return this;
	}
end

def type(column) type(long & unsigned) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~ULong[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column) type(long) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~Long[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & datetime) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Long[$bits+nbits]($offset[, $bits], $name+firstLowerCase.toEpochMilli());
		return this;
	}
end

def type(column & date) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Short[$bits+nbits]($offset[, $bits], (short) $name+firstLowerCase.toEpochDay());
		return this;
	}
end

def type(column & categorical) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(String $name+firstLowerCase) {
		bitBuffer.setIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $type+firstUpperCase.component($name+firstLowerCase).index());
		return this;
	}

	public $owner+firstUpperCase $name+firstLowerCase($type+firstUpperCase.Component $name+firstLowerCase) {
		bitBuffer.setIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $name+firstLowerCase.index());
		return this;
	}
end

def type(column & integer) type(unsigned) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~UInteger[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end


def type(column & integer) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~Integer[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column & boolean) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(boolean $name+firstLowerCase) {
		bitBuffer.setBoolean($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column & float) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(float $name+firstLowerCase) {
		bitBuffer.set$aligned~Real$size~Bits($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column & double) trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Real$size~Bits($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column) type(longInteger & unsigned) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~ULong[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column) type(longInteger) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~Long[$bits+nbits]($offset[, $bits], $name+firstLowerCase);
		return this;
	}
end

def type(column) type(id) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.setAlignedLong(0, $name+firstLowerCase);
		return this;
	}
end

def type(column & datetime) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Long[$bits+nbits]($offset[, $bits], $name+firstLowerCase.toEpochMilli());
		return this;
	}
end

def type(column & date) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Short[$bits+nbits]($offset[, $bits], (short) $name+firstLowerCase.toEpochDay());
		return this;
	}
end

def type(column & id) trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.getAlignedLong(0);
	}
end

def type(column & categorical) trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(String $name+firstLowerCase) {
		bitBuffer.setIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $type+firstUpperCase.component($name+firstLowerCase).index());
		return this;
	}

	public $owner+firstUpperCase~Builder $name+firstLowerCase($type+firstUpperCase.Component $name+firstLowerCase) {
		bitBuffer.setIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $name+firstLowerCase.index());
		return this;
	}
end
