dsl Proteo

use DataTypes

Concept:{0..1} MessageHub
	Aspect JmsBus
		var string url
		var string user
		var string password
		var string clientId
		var string outBoxDirectory

Concept:Named Subscriber
	var string subscriberId
	var string channel

Concept:{0..1} Datalake
	var string path
	Aspect DatalakeType
		sub Mirrored
			var string startingTimetag
			var string originDatalakePath
			sub NfsMirrored
			sub SshMirrored
				var string url
				var string user
				var string password = empty
		sub Local
Concept:Named Datamart
	var string path

Concept:Named Adapter

Concept:Named Mounter
	var Datamart datamart
	Aspect MounterType
		sub Population
			var word:{Arff Tabb Csv} format
			Concept Split > var string[] splits
			Concept:{1..*} Source
				var string tank
				var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type
				Aspect Id
					var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type = Long
				Aspect Constant
					var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type = String
					var string value
			Concept:{0..1}:Named Filter
			Concept:{0..1} Aggregation
				Concept:{1..*} Column
					var string name
					var string tank
					var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type
		sub Batch
			Concept:{1..*} Source
				var string tank
//	sub TimeLine
//		Concept Select extends Realtime.Select
//			var word:{Sum Average Count Custom} aggregator

//sin faceta, es un mounter generico con datalake.



Concept:Named Feeder
	var string[] tanks
	has:Named Sensor

Concept:Named Sensor is component
	Aspect UserSensor
		var integer:{%} width = 100%
		var integer:{%} height = 100%
	Aspect FormEdition extends UserSensor
		var string path
	Aspect DocumentEdition extends UserSensor
		var word:{Offline Online} mode = Online

	Aspect DocumentSignature extends UserSensor
		var word:{Sign CoSign CounterSign} signType
		var word:{Pkcs7 XadesAttached XadesDetached CadesAttached CadesDetached} signFormat

	Aspect Poll extends UserSensor
		var string defaultOption = empty
		Concept Option
			var string value
			var Schema event
			has Option

	Aspect Device

Concept EventSource is abstract
	var string name = 'io.intino.konos.model.graph.Utils.isUUID(self.name$()) && self.schema() != null ? self.schema().name$() : self.name$()' is private reactive
	var Schema schema
	var string subdomain = ""
