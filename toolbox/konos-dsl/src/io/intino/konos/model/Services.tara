dsl Proteo

use Component
use Bpm
use DataHub
use DataTypes

Concept:Named Service
	has:Named Schema
	has:Named Exception

	Facet REST
		var string swagger = "2.0" is private
		var string host
		var string port
		var string title = ""
		var string subtitle = ""
		var string basePath = "/api"
		var string logo = empty
		var string favicon = empty
		var string backgroundColor = empty
		var string color = empty
		var boolean generateDocs = true
		var word[]:{http https ws wss} protocols = https
		Concept:{0..1}:RequiresAspect Authentication
			Facet WithCertificate
				var string store
				var string storePassword
				Concept AllowedUsers
					var string[] certificate
			Facet Basic
			Facet Bearer
			Facet Custom
		Concept:{0..1} Info
			var string title
			var string version
			var string description = ""
			var string termsOfService = ""
			Concept:Named:{0..1} Contact
				var string url = ""
				var string email = ""
			Concept:Named:{0..1} License
				var string url = ""
		Concept:Named Tag
			var string description = ""
			Concept Document
				var string description = ""
				var string url
		Concept:Named:CheckPath Resource
			var string path
			Concept:Named Parameter extends Parameter is component
				var string description = ""
				var word:{body path form header query} in //TODO si body: requerido que este definido como "fomat"
				//TODO si no, debe ser cualquier otro y en caso de ser tipo file el consumes debe ser "multipart/form-data" y el
				//TODO in debe ser form.
			Concept:CheckFileParameter Operation
				var string[] tags = empty
				var string summary = ""
				var string description = ""
				var string externalDocumentationPath = empty
				var boolean deprecated = false
				sub Get
				sub Post
				sub Put
				sub Delete
				sub Head
				sub Options
				sub Patch
				has:RequiresAspect Parameter
				has:{0..1} Response
				var Exception[] exceptionRefs = empty
				has Exception
			Facet Public
		Concept:Named Notification
			var string path
			Concept:Named Parameter extends Parameter is component
				var string description = ""
				var word:{body path form header query} in //TODO si body: requerido que este definido como "fomat"
				//TODO si no, debe ser cualquier otro y en caso de ser tipo file el consumes debe ser "multipart/form-data" y el
				//TODO in debe ser form.

	Facet Soap
		var string host
		var string port
		var string basePath = ""
		Concept:Named:{1..*} Operation
			var string path
			var string description = empty
			Concept:{0..1} Input extends Parameter
				var string xmlns
			Concept:{0..1} Output extends Response
				var string xmlns
	Facet JMX
		var string path = ""
		Concept:Named:{1..*} Operation
			var string description
			has Parameter
			has Exception
			has:{0..1} Response
		Concept:Named Notification

	Facet Messaging
		var string context
		var word:{Queue Topic} subscriptionModel = Queue
		Concept:Named Request
			var string path
			has:{0..1} Parameter
			has Exception
			has:{0..1} Response

	Facet SlackBot
		var string token
		Concept Notification
			var string channel
		Concept:Named Request
			var string description
			Concept:Named Parameter
				var word:{Boolean String Double Integer} type
				var boolean multiple = false
			var word:{Text Attachment} responseType = Text
			has Request

	Facet RocketChatBot extends SlackBot

	Facet CLI
		var string port

		Concept:Named State
			Facet Initial
		Concept:Named Command
			var string name
			var string abbreviation
			var string description
			Concept:{0..1} Precondition > var State[] states
			Concept:{0..1} Postcondition > var State state
			has Parameter
			Concept:{1..1} Response
				Facet Confirmation
					var string question
					var string[] options
				Facet Text
				Facet MultiLine
					Concept Line
						var string content
						var Line visibleWith = empty
						var boolean addBreak = true
						Facet Multiple
							var word:{Horizontal Vertical} arrangement = Vertical
			has Exception

	Facet UI
		var word[]:{Web Android IOS} targets = Web
		var function:HomesProvider homeList = 'return self.resourceList().stream().filter(Service.UI.Resource::isMain).collect(toList());';
		var function:TemplatesProvider templates = 'return self.resourceList().stream().map(r -> r.asPage().template()).collect(Collectors.toList());';
    	Concept Use
    		var string package
    		var string name
    		var string service
    		var string url = empty
    	var string url = empty
    	var string port
    	var string title
    	var string favicon // TODO. Llamarlo launch -> un zip con la configuraci√≥n de lanzamiento de la app
    	var string googleApiKey = empty
		Concept:{0..1} Authentication
			var string by

		Concept:{0..1} Edition
			var string by

		Concept:Named Resource
			var string path
			has Parameter
			Facet Main
			Facet Confidential
			Facet Page
				var Template template
			Facet StaticPage
				var string content = empty
			Facet AssetPage

	Facet Agenda
		var string filePath
		var string baseUri = "triggers"
		Concept:Named Future
			has Parameter
			Concept Option
				has Parameter
