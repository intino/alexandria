rule type(display, exposed)
	import React from "react";
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	<<import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";>>
	<<import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";>>
	<<$displayRegistration+import>>
	import $name+PascalCase from './$name+PascalCase';

	export default class $name+PascalCase~Proxy extends $displayExtends {

		constructor(props) {
			super(props);
			<<this.notifier = new $notDecorated+firstUpperCase~Notifier(this);>>
			<<this.requester = new $notDecorated+firstUpperCase~Requester(this);>>
			<<$properties+initialization>>
		};

	}

	<<$displayRegistration+declaration>>

rule type(display, res, noAbstract, scrollable)
    <?xml version="1.0" encoding="utf-8"?>
    <com.google.android.flexbox.FlexboxLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:alexandria="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        alexandria:flexDirection="$layout">

        <ScrollView
            android:id="@+id/$name+camelCaseToSnakeCase~_scroll"
            android:layout_width="match_parent"
		    android:layout_height="match_parent"
		    android:fillViewport="true">

            <com.google.android.flexbox.FlexboxLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                alexandria:flexDirection="$layout">
                <<$component...[$NL]>>
    		</com.google.android.flexbox.FlexboxLayout>
	    </ScrollView>

    </com.google.android.flexbox.FlexboxLayout>

rule type(display, res, noAbstract)
    <?xml version="1.0" encoding="utf-8"?>
    <com.google.android.flexbox.FlexboxLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:alexandria="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        alexandria:flexDirection="$layout">

        <<$component...[$NL]>>

    </com.google.android.flexbox.FlexboxLayout>

rule type(layout, horizontal)
    row

rule type(layout, vertical)
    column

rule type(display, res)
    <?xml version="1.0" encoding="utf-8"?>
    <com.google.android.flexbox.FlexboxLayout
        xmlns:android="http://schemas.android.com/apk/res/android"
        xmlns:alexandria="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        alexandria:flexDirection="$layout">

        <TextView
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="I am $name"
            />

        <<$component...[$NL]>>

    </com.google.android.flexbox.FlexboxLayout>

rule type(display, noAbstract)
    package $package.mobile.android.displays<<.$packageType~s>>

    import android.content.Context
    import android.util.AttributeSet
    import androidx.core.content.ContextCompat.*

	<<$parent+import>>
	$exposedNotifierImport
	import io.intino.alexandria.mobile.displays.requesters.$requester~Requester
	import $package.mobile.android.R

	class $name+firstUpperCase @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0) : $displayExtends<$requester~Requester, $notifier~Notifier>(context, attrs, defStyleAttr, defStyleRes, R.layout.$name+camelCaseToSnakeCase+lowerCase) {

		init {
			this.notifier = $notifier~Notifier(this);
			this.requester = $requester~Requester(this);
			<<$properties+initialization>>
		}

		$notification...[$NL$NL]
		<<$notifyProxyMethod>>
	}

rule type(exposedNotifierImport, exposed)
	import $package.mobile.displays.notifiers.$name+firstUpperCase~Notifier

rule type(exposedNotifierImport)
	import io.intino.alexandria.mobile.displays.notifiers.$notifier~Notifier

rule type(notifyProxyMethod)
	notifyProxyMessage = (name) => {
		if (!this.props.onProxyMessage) return;
		this.props.onProxyMessage(name);
	};

rule type(display, collection)
	import React from "react";
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	<<import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";>>
	<<import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";>>
	<<$displayRegistration+import>>

	export default class $name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			<<this.notifier = new $notDecorated+firstUpperCase~Notifier(this);>>
			<<this.requester = new $notDecorated+firstUpperCase~Requester(this);>>
			<<$properties+initialization>>
		};

	}

	<<$displayRegistration+declaration>>

rule type(display)
    package $package.mobile.android.displays<<.$packageType~s>>

    import android.content.Context
    import android.util.AttributeSet
    import androidx.core.content.ContextCompat.*

	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
    import $package.mobile.displays.notifiers.$notDecorated+firstUpperCase~Notifier
    import $package.mobile.displays.requesters.$notDecorated+firstUpperCase~Requester
	<<$displayRegistration+import>>
    $schemaImport
    import $package.mobile.android.R

    open class $name+firstUpperCase<DR: $notDecorated+firstUpperCase~Requester, DN: $notDecorated+firstUpperCase~Notifier> @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) $displayExtends+display, $package.mobile.displays<<.$packageType~s>>.$name+firstUpperCase {

        init {
            this.requester = $notDecorated+firstUpperCase~Requester(this) as DR
            this.notifier = $notDecorated+firstUpperCase~Notifier(this) as DN
            inflate(viewContext(), layout ?: R.layout.$name+camelCaseToSnakeCase+lowerCase, this)
        }

		$notification...[$NL$NL]
        <<$reference...[$NL]>>
        <<$component...[$NL]>>

    }

rule type(notification) and trigger(interface)
    fun $name(<<value : $parameter>>)

rule type(notification)
    override fun $name(<<value: $parameter>>) {
    }

rule trigger(parameterValue)
	value

rule type(date) and trigger(parameter)
    kotlinx.datetime.Instant

rule type(datetime) and trigger(parameter)
    kotlinx.datetime.Instant

rule type(integer) and trigger(parameter)
    Int

rule trigger(parameter)
    $value

rule type(displayRegistration) and trigger(import)
	import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';

rule type(displayRegistration, exposed) and trigger(declaration)
	DisplayFactory.register("$name+PascalCase~Proxy", $name+PascalCase~Proxy);

rule type(displayRegistration) and trigger(declaration)
	DisplayFactory.register("$name+firstUpperCase", $name+firstUpperCase);

rule type(alexandriaImport)
	import Ui$name+firstUpperCase from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";

rule type(alexandriaImport, embedded)
	import { Embedded$name+firstUpperCase as Ui$name+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";

rule type(alexandriaComponentImport)
	import Ui$type+firstUpperCase$facet...[] from "alexandria-ui-elements/<<$componentTarget>>/displays/<<$componentDirectory/>>$type+firstUpperCase$facet...[]";

rule type(projectComponentImport, inherittemplatestamp)
	import Displays$name+firstUpperCase from "$ownerModuleName/gen/displays/templates/$name+firstUpperCase";

rule type(projectComponentImport)
	import Displays$name+firstUpperCase from "$serviceName/<<$directory>>/displays/<<$componentDirectory/>>$name+firstUpperCase";

rule type(displayExtends, generic, isExtensionOf) and trigger(display)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, generic) and trigger(display)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))

rule type(displayExtends, template) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Template<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, table) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, dynamictable) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, collection) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, item) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Item<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, row) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Row<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, dialog) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.components.Dialog<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends) and trigger(display)
	: io.intino.alexandria.mobile.android.displays.$type+firstUpperCase<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))

rule type(displayExtends, generic, isExtensionOf)
	$parent

rule type(displayExtends, generic)
	$parent

rule type(displayExtends)
	$type+firstUpperCase

rule type(renderTag, template) and trigger(end)
	</UiBlock>

rule type(renderTag, block) and trigger(end)
	</UiBlock>

rule type(renderTag, item) and trigger(end)
	</div>

rule type(renderTag) and trigger(end)
	</React.Fragment>

rule type(renderTag, template)
	<UiBlock<<$properties+common$properties+specific>> style={{...this.props.style,...display}}>

rule type(renderTag, block)
	<UiBlock<<$properties+common$properties+specific>> style={{...this.props.style,...display}}>

rule type(renderTag, item)
	<div style={{width:"100%",height:"100%",...this.props.style,...this.style(),...display}} className={className}>

rule type(renderTag)
	<React.Fragment>

rule type(renderTagAttributes, block)
	$properties+common$properties+specific

rule type(renderTagAttributes)

rule attribute(parent) and trigger(import)
    import $package.mobile.android.displays.$parentDirectory.$parent+firstUpperCase

rule attribute(exposed) and trigger(import)
    import io.intino.alexandria.mobile.android.displays.ProxyDisplay

rule attribute(baseDisplay) and trigger(import)
    import io.intino.alexandria.mobile.android.displays.Display

rule attribute(baseComponent) and trigger(import)
    import io.intino.alexandria.mobile.android.displays.Component

rule attribute(embeddedComponent) and trigger(import)
    import io.intino.alexandria.mobile.android.displays.components.$value+firstUpperCase

rule attribute(component) and trigger(import)
    import io.intino.alexandria.mobile.android.displays.components.$value+firstUpperCase

rule trigger(import)
    import io.intino.alexandria.mobile.android.displays.$value+firstUpperCase

rule type(schemaImport)
	import $package.mobile.schemas.*;
