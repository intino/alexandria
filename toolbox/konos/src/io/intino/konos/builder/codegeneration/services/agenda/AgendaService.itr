rule type(service)
	package $package+ValidPackage;

	import $package+validPackage.$box+PascalCase~Box;
	import $package+validPackage.agenda.*;
	import io.intino.alexandria.http.AlexandriaHttpServer;
	import io.intino.alexandria.logger.Logger;
	import io.intino.alexandria.scheduler.AlexandriaScheduler;
	import org.apache.commons.io.FileUtils;
	import io.intino.alexandria.Json;

	$schemaImport
	import org.quartz.*;

	import java.io.File;
	import java.io.IOException;
	import java.nio.file.Files;
	import java.time.Instant;
	import java.time.temporal.ChronoUnit;
	import java.util.*;
	import java.util.function.Predicate;
	import java.util.stream.Collectors;

	import static io.intino.alexandria.Json.fromString;
	import static org.quartz.CronScheduleBuilder.cronSchedule;
	import static org.quartz.JobBuilder.newJob;
	import static org.quartz.TriggerBuilder.newTrigger;

	@SuppressWarnings("unchecked")
	public class AgendaService {
		public static final String BaseUri = "$baseUri/";
		private static final Map<String, File> sources = new HashMap<>();
		private static final Map<String, Instant> timeouts = new HashMap<>();
		private final $box+PascalCase~Box box;
		private final File root;

		public AgendaService($box+PascalCase~Box box) {
			this.box = box;
			this.root = $rootPath+customizeDirectory;
		}

		$future+getter...[$NL$NL]

		$future+class...[$NL$NL]

		$future+execute...[$NL$NL]

		public AlexandriaSpark<?> setup(AlexandriaHttpServer<?> server, AlexandriaScheduler scheduler) {
			loadFutures();
			startTimers(scheduler);
			startService(server);
			return server;
		}

		public Create create() {
			return new Create();
		}

		public Remove remove() {
			return new Remove();
		}

		private void startTimers(AlexandriaScheduler scheduler) {
			try {
				JobDetail job = newJob(AgendaServiceTrigger.class).withIdentity("AgendaServiceTrigger").build();
				job.getJobDataMap().put("box", box);
				scheduler.scheduleJob(job, Set.of(newTrigger().withIdentity("AgendaServiceTrigger").withSchedule(cronSchedule("0 0/1 * 1/1 * ? *")).build()), true);
			} catch (SchedulerException e) {
				Logger.error(e);
			}
		}

		private void startService(AlexandriaHttpServer<?> server) {
			$future+route...[$NL]
		}

		$future+register...[$NL]

		private void loadFutures() {
			$future+load...[$NL]
		}

		$future+private...[$NL]

		private static String read(File file) {
			try {
				return Files.readString(file.toPath());
			} catch (IOException e) {
				Logger.error(e);
				return "";
			}
		}

		private void write(Object schema, File file) {
			try {
				Files.writeString(file.toPath(), Json.toString(schema));
			} catch (IOException e) {
				Logger.error(e);
			}
		}

		public class Create {
			$future+createMethod...[$NL$NL]

			$future+createClass...[$NL$NL]
		}

		public class Remove {
			$future+removeMethod...[$NL$NL]
		}

		public static class Option {
			public String id = UUID.randomUUID().toString();
		}

		public static class AgendaServiceTrigger implements Job {
			public void execute(JobExecutionContext context) throws JobExecutionException {
				$box+PascalCase~Box box = ($box+PascalCase~Box) context.getMergedJobDataMap().get("box");
				final Instant instant = Instant.now().truncatedTo(ChronoUnit.MINUTES);
				timeouts.forEach((k, v) -> {
					if (instant.equals(v)) {
						$future+timeout...[$NL]
					}
				});
			}
		}
	}

rule type(future) and trigger(class)
	public class $name+firstUpperCase~Futures {
		public List<$name+firstUpperCase> all($parameter+predicateSignature...[, ]) {
			return $name+firstLowerCase~Files().stream()
					.filter(f -> $parameter+test...[ && ])
					.map(f -> load$name+firstUpperCase(f)).collect(Collectors.toList());
		}

		public $name+firstUpperCase $name+firstLowerCase($parameter+signature...[, ]) {
			return load$name+firstUpperCase($name+firstLowerCase~File($parameter+names...[, ]));
		}

		<<$option+execute...[$NL]>>
	}

rule trigger(register)
	private void register$name+firstUpperCase($name+firstUpperCase~Schema schema) {
		File file = $name+firstLowerCase~File($parameter+schemaParameter...[, ]);
		register(schema, file);
		write(schema, file);
	}

	private static void register($name+firstUpperCase~Schema schema, File file) {
		<<$option+putOption...[$NL]>>
		sources.put(schema.timeout().id, file);
		timeouts.put("$name+firstUpperCase#" + schema.timeout().id, schema.timeout().on());
	}

rule trigger(load)
	$name+firstLowerCase~Files().forEach(file -> register(fromString(read(file), $name+firstUpperCase~Schema.class), file));

rule trigger(route)
	server.route(BaseUri + Abstract$name+firstUpperCase.URI.Path + ":id").post(manager -> execute$name+firstUpperCase(manager.fromPath("id")));

rule trigger(ifOption)
	if ("$name".equalsIgnoreCase(option)) {
		future.schema().$name+firstLowerCase(new $future+firstUpperCase~Schema.$name+firstUpperCase($optionParameter+argIndex...[, ]));
		future.$name+firstLowerCase();
	}

rule trigger(putOption)
	sources.put(schema.$name+firstLowerCase~().id, file);

rule trigger(private)
	private void clean($name+firstUpperCase future) {
		future.uri().ids().forEach(i -> {
			final File file = sources.remove(i);
			if (file != null && file.exists()) file.delete();
		});
		String id = future.schema().timeout().id;
		final File file = sources.remove(id);
		if (file != null && file.exists()) file.delete();
	}

	private Collection<File> $name+firstLowerCase~Files() {
		File directory = new File(root, "$name+camelCaseToKebabCase/");
		directory.mkdirs();
		return FileUtils.listFiles(directory, new String[]{"json"}, true);
	}

	private File $name+firstLowerCase~File($parameter+signature...[, ]) {
		File directory = new File(root, "$name+camelCaseToKebabCase/");
		directory.mkdirs();
		return new File(directory, $parameter+names...[ + "##" + ] + ".json");
	}

	private $name+firstUpperCase load$name+firstUpperCase(File file) {
		if (!file.exists()) return null;
		final $name+firstUpperCase future = new $name+firstUpperCase(box);
		future.schema(fromString(read(file), $name+firstUpperCase~Schema.class));
		return future;
	}

rule type(option) and trigger(execute)
	public void $name+firstLowerCase($future+FirstUpperCase $future+FirstLowerCase<<, $optionParameter+signature...[, ]>>) {
		execute($future+FirstLowerCase, "$name+firstLowerCase"<<, $optionParameter+names...[, ]>>);
	}

rule type(future) and trigger(execute)
	private void execute$name+firstUpperCase(String id) {
		final File file = sources.get(id);
		if (file == null) return;
		final $name+firstUpperCase future = load$name+firstUpperCase(file);
		final String option = future.uri().option(id);
		execute(future, option);
	}

	private void execute($name+firstUpperCase future, String option, String... params) {
		<<$option+ifOption...[$NL~else ]>>
		<<$hasOption+else >>
		future.timeout();
		clean(future);
	}

rule trigger(else)
	else

rule trigger(getter)
	public $name+firstUpperCase~Futures $name+firstLowerCase() {
		return new $name+firstUpperCase~Futures();
	}

rule trigger(removeMethod)
	public boolean $name+firstLowerCase($parameter+signature...[, ]) {
		final File file = $name+firstLowerCase~File($parameter+names...[, ]);
		final $name+firstUpperCase $name+firstLowerCase = AgendaService.this.load$name+firstUpperCase(file);
		if ($name+firstLowerCase != null) timeouts.remove("$name+firstUpperCase#" + $name+firstLowerCase.schema().timeout().id);
		for (String key : new ArrayList<>(sources.keySet()))
			if (sources.get(key).equals(file)) sources.remove(key);
		if (file.exists()) return file.delete();
		return false;
	}

rule trigger(createMethod)
	public $name+firstUpperCase $name+firstLowerCase($parameter+signature...[, ]) {
		return new $name+firstUpperCase($parameter+names...[, ]);
	}

rule trigger(timeout)
	if (k.startsWith("$name+FirstUpperCase#")) box.agenda().execute$name+FirstUpperCase(k.split("#")[1]);

rule trigger(predicateSignature)
	Predicate<$type> $name

rule trigger(signature)
	$type $name

rule trigger(names)
	$name

rule trigger(argIndex)
	params[$index]

rule type(Boolean) and trigger(test)
	$name.test(Boolean.valueOf(f.getName().split("##")[$index]))

rule type(Double) and trigger(test)
	$name.test(Double.parseDouble(f.getName().split("##")[$index]))


rule type(Integer) and trigger(test)
	$name.test(Integer.parseInt(f.getName().split("##")[$index]))


rule trigger(test)
	$name.test(f.getName().split("##")[$index])

rule trigger(schemaParameter)
	schema.$name()

rule trigger(fluid)
	$name+firstLowerCase($name+firstLowerCase)

rule trigger(optionCreate)
	public $future+firstUpperCase $name+firstLowerCase($optionParameter+signature...[, ]) {
		schema.$name+firstLowerCase(new $future+firstUpperCase~Schema.$name+firstUpperCase($optionParameter+names...[, ]));
		return this;
	}

rule trigger(createClass)
	public class $name+firstUpperCase {
		private final $name+firstUpperCase~Schema schema;

		public $name+firstUpperCase($parameter+signature...[, ]) {
			schema = new $name+firstUpperCase~Schema()<<.$parameter+fluid...[.]>>;
		}

		$option+optionCreate...[$NL]

		public $name+firstUpperCase timeout(Instant timeout) {
			schema.timeout(new $name+firstUpperCase~Schema.Timeout(timeout.truncatedTo(ChronoUnit.MINUTES)));
			return this;
		}

		public void save() {
			register$name+firstUpperCase~(schema);
		}
	}

rule type(schemaImport)
	import $package.schemas.*;

rule type(archetype) and trigger(customizeDirectory)
	new $package.Archetype(box.configuration().home()).$path.root()

rule type(custom) and trigger(customizeDirectory)
	new File(box.configuration().get("$path+customParameter"))

rule trigger(customizeDirectory)
	new java.io.File("$path+customParameter")
