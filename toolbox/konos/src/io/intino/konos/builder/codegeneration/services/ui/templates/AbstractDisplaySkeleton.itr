def type(display, accessible)
	package $package.ui.displays<<.$packageType~s>>;

	import $package+validPackage.ui.displays.notifiers.$name+PascalCase~ProxyNotifier;
	import io.intino.alexandria.ui.displays.ProxyDisplay;
	import io.intino.alexandria.ui.services.push.UISession;

	import java.util.HashMap;
	import java.util.Map;

	public class $name+PascalCase~Proxy extends ProxyDisplay<$name+PascalCase~ProxyNotifier> {

		public $name+firstUpperCase~Proxy(io.intino.alexandria.ui.spark.pages.Unit unit) {
			super("$name+firstUpperCase", unit, "/$name+CamelCase+lowercase~proxy");
		}

		<<$request+accessible...[$NL$NL]>>
		<<$parameter+method...[$NL$NL]>>
		<<$event+method...[$NL$NL]>>
	}
end

def type(display)
	package $package.ui.displays<<.$packageType~s>>;

	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.ui.displays.components.*;
	import $package.ui.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;

	$templatesImport
	$tablesImport
	$listsImport
	$magazinesImport
	$mapsImport
	$dynamicTablesImport
	$blocksImport
	$itemsImport
	$rowsImport
	$notifierImport

	public <<$abstract+lowerCase>> class $abstract$name+firstUpperCase$parametrized $displayExtends<< $implements>> {
		<<$reference+declaration...[$NL]>>
		<<$component+declarations...[$NL]>>

		public $abstract$name+firstUpperCase($abstractBox+type box) {
			super(box);
			id("$id");
		}

		@Override
		public void init() {
			super.init();
			<<$reference...[$NL]>>
			<<$componentReferences>>
			<<$component+initializations...[$NL]>>
		}

		@Override
		public void remove() {
			super.remove();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}
end

def type(notifierImport, table)
	import io.intino.alexandria.ui.displays.notifiers.TableNotifier;
end

def type(notifierImport, dynamictable)
	import io.intino.alexandria.ui.displays.notifiers.DynamicTableNotifier;
end

def type(notifierImport, item)
	import io.intino.alexandria.ui.displays.notifiers.ItemNotifier;
end

def type(notifierImport, row)
	import io.intino.alexandria.ui.displays.notifiers.RowNotifier;
end

def type(notifierImport, template, accessible)
	import $package+validPackage.ui.displays.notifiers.$name+firstUpperCase~Notifier;
end

def type(notifierImport, template)
	import io.intino.alexandria.ui.displays.notifiers.TemplateNotifier;
end

def type(notifierImport)
	import $package+validPackage.ui.displays.notifiers.$name+firstUpperCase~Notifier;
end

def type(parametrized, generic)
	<DN extends $name+firstUpperCase~Notifier, $abstractBox+extension>
end

def type(parametrized, accessible)
	<DN extends $name+firstUpperCase~Notifier, $abstractBox+extension>
end

def type(parametrized)
	$abstractBox+extensionTagged
end

def type(displayExtends, generic)
	extends $parent<DN, $abstractBox+type>
end

def type(displayExtends, template, accessible)
	extends io.intino.alexandria.ui.displays.components.Template<DN, $modelClass, $abstractBox+type>
end

def type(displayExtends, template)
	extends io.intino.alexandria.ui.displays.components.Template<TemplateNotifier, $modelClass, $abstractBox+type>
end

def type(displayExtends, table)
	extends io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, $name+firstUpperCase~Row, $itemClass>
end

def type(displayExtends, dynamictable)
	extends io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, $name+firstUpperCase~Row, $itemClass>
end

def type(displayExtends, collection)
	extends io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, $componentType, $itemClass>
end

def type(displayExtends, item)
	extends io.intino.alexandria.ui.displays.components.Item<ItemNotifier, $itemClass, $abstractBox+type>
end

def type(displayExtends, row)
	extends io.intino.alexandria.ui.displays.components.Row<RowNotifier, $itemClass, $abstractBox+type>
end

def type(displayExtends, dialog)
	extends io.intino.alexandria.ui.displays.components.Dialog<$name+firstUpperCase~Notifier, $abstractBox+type>
end

def type(displayExtends)
	extends io.intino.alexandria.ui.displays.$type+firstUpperCase<$name+firstUpperCase~Notifier, $abstractBox+type>
end

def type(templatesImport)
	import $package+validPackage.ui.displays.templates.*;
end

def type(tablesImport)
	import $package+validPackage.ui.displays.tables.*;
end

def type(listsImport)
	import $package+validPackage.ui.displays.lists.*;
end

def type(magazinesImport)
	import $package+validPackage.ui.displays.magazines.*;
end

def type(mapsImport)
	import $package+validPackage.ui.displays.maps.*;
end

def type(dynamicTablesImport)
	import $package+validPackage.ui.displays.dynamictables.*;
end

def type(blocksImport)
	import $package+validPackage.ui.displays.blocks.*;
end

def type(itemsImport)
	import $package+validPackage.ui.displays.items.*;
end

def type(rowsImport)
	import $package+validPackage.ui.displays.rows.*;
end

def type(componentReferences, forRoot)
	<<$component+rootReferences...[$NL]>>
end

def type(componentReferences)
	<<$component+references...[$NL]>>
end

def type(attribute)
	public $clazz $name+firstLowerCase;
end

def type(methods, dynamicloaded)
	@Override
	public io.intino.alexandria.ui.displays.components.DynamicLoaded.LoadTime loadTime() {
		return io.intino.alexandria.ui.displays.components.DynamicLoaded.LoadTime.valueOf("$loadTime");
	}

	@Override
	public void showLoading() {
		notifier.refreshLoading(true);
	}

	@Override
	public void hideLoading() {
		notifier.refreshLoading(false);
	}
end

def type(request) and trigger(accessible)
	public void $name(<<$parameter value>>) {
		request("$name"<<, $parameter+parameterValue>>);
	}
end

def trigger(parameterValue)
	value
end

def type(parameter) and trigger(method)
	public void $value+firstLowerCase(String value) {
		add("$value", value);
	}
end

def type(parameter)
	$value
end

def type(event) and trigger(method)
	public void on~$name+firstUpperCase(java.util.function.Consumer<Boolean> listener) {
		onMessage("$name+firstLowerCase").then(listener);
	}
end