rule type(resource, template)
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout
	xmlns:android="http://schemas.android.com/apk/res/android"
	xmlns:alexandria="http://schemas.android.com/apk/res-auto"
	xmlns:tools="http://schemas.android.com/tools"
	android:layout_width="match_parent"
	android:layout_height="match_parent"
	tools:context=".pages.$name+PascalCase~Activity">

	<$package+validPackage.mobile.android.displays.templates.$pageDisplay+firstUpperCase
		android:id="@+id/$pageDisplayId+firstLowerCase"
		android:layout_width="match_parent"
		android:layout_height="match_parent">
	</$package+validPackage.mobile.android.displays.templates.$pageDisplay+firstUpperCase>
</androidx.constraintlayout.widget.ConstraintLayout>

rule type(resource, main)
    package $package+validPackage.mobile.android.pages

    import android.os.Bundle
    import io.intino.alexandria.mobile.Application
    import io.intino.alexandria.mobile.android.AlexandriaActivity
    import $package+validPackage.mobile.android.R

    class $name+PascalCase~Activity : AlexandriaActivity("$name") {

        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            Application.onVerifyPermissions { type, callback -> verifyPermissions(type, callback) }
            Application.onPickFile { callback -> pickFile(callback) }
            Application.start("$name", "$url", pushService(withParams("$url$path")) { showNoConnectionDialog(); })
            setContentView(R.layout.$name+camelCaseToSnakeCase+lowerCase~_activity)
        }


    }

rule type(resource)
    package $package+validPackage.mobile.android.pages

    import android.os.Bundle
    import io.intino.alexandria.mobile.Application
    import io.intino.alexandria.mobile.android.AlexandriaActivity
    import $package+validPackage.mobile.android.R

    class $name+PascalCase~Activity : AlexandriaActivity("$name") {

        override fun onCreate(savedInstanceState: Bundle?) {
            super.onCreate(savedInstanceState)
            Application.onVerifyPermissions { type, callback -> verifyPermissions(type, callback) }
            Application.onPickFile { callback -> pickFile(callback) }
            Application.close("$name")
            Application.open("$name", "$url", pushService(withParams("$url$path")) { showNoConnectionDialog(); })
            setContentView(R.layout.$name+camelCaseToSnakeCase+lowerCase~_activity)
        }

    }

rule attribute(hasAbstract) and trigger(origin)
	../../src

rule attribute(decorated) and trigger(origin)
	../../gen

rule trigger(origin)
	..

rule type(exposedImport)
	import $service+firstUpperCase~ExposedDisplays from '$elements/gen/ExposedDisplays';
