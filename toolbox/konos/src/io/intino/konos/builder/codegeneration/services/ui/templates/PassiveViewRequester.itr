rule type(display, accessible)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.<<$packageType~s.>>$name+FirstUppercase;
	import $package+validPackage.ui.displays.<<$packageType~s.>>$name+FirstUpperCase~Proxy;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.server.AlexandriaUiManager;

	public class $name+FirstUpperCase~ProxyRequester extends io.intino.alexandria.ui.displays.requesters.DisplayProxyRequester {

		public $name+FirstUpperCase~ProxyRequester(AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
		}

		@Override
		public void execute() throws AlexandriaException {
			String operation = operation();
			$name+FirstUppercase display = personifiedDisplay();
			if (display == null) return;
			if (operation.equals("refreshPersonifiedDisplay")) {
				$parameter...[$NL]
				display.refresh();
				return;
			}
			<<else $request...[$NL~else ]>>
			super.execute();
		}
	}

rule type(display)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.<<$packageType~s.>>$name+FirstUpperCase;
	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.server.AlexandriaUiManager;

	public class $name+firstUpperCase~Requester extends $parentType {

		public $name+firstUpperCase~Requester(AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
		}

		@Override
		public void execute() throws AlexandriaException {
			$name+firstUpperCase display = display();
			if (display == null) return;
			String operation = operation();

			<<$request...[$NL~else ]>>

			super.execute();
		}
	}

rule attribute(extensionOf) and trigger(parentType)
	$parent+firstUpperCase~Requester

rule trigger(parentType)
	io.intino.alexandria.ui.displays.requesters.<<$type+class+FirstUpperCase>>~Requester

rule attribute(this, Display) and trigger(class)
	Display

rule type(request, asset) and trigger(request)
	if (operation.equals("$name")) {
		io.intino.alexandria.ui.server.UIFile file = display.$name($parameter);
		if (file == null) return;
		manager.write(file.content(), file.label(), file.embedded());
		return;
	}

rule type(request) and trigger(request)
	if (operation.equals("$name")) {
		display.$name($parameter);
		return;
	}

rule type(parameter, accessible) and trigger(parameter)
	display.$value+firstLowercase(manager.fromQuery("$value"));

rule type(list) and trigger(parameter)
	java.util.List.of(io.intino.alexandria.Json.fromString(manager.fromQuery("v"), $value~[].class))

rule type(parameter, file) and trigger(parameter)
	manager.fromFormAsResource("v")

rule type(parameter, String) and trigger(parameter)
	manager.fromQuery("v")

rule type(parameter, Double) and trigger(parameter)
	Double.parseDouble(manager.fromQuery("v"))

rule type(parameter, Integer) and trigger(parameter)
	Integer.parseInt(manager.fromQuery("v"))

rule type(parameter, Long) and trigger(parameter)
	Long.parseLong(manager.fromQuery("v"))

rule type(parameter, DateTime) and trigger(parameter)
	manager.fromQuery("v") != null ? java.time.Instant.ofEpochMilli(Long.parseLong(manager.fromQuery("v"))) : null

rule type(parameter) and trigger(parameter)
	io.intino.alexandria.Json.fromString(manager.fromQuery("v"), $value.class)

rule trigger(parameter)
	aaaaa $value

rule type(schemaImport)
	import $package.schemas.*;
