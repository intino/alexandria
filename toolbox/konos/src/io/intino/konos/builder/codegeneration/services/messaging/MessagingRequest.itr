def type(request)
	package $package.requests;

	import io.intino.alexandria.exceptions.*;
	import $package.*;
	import com.google.gson.Gson;
	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.terminal.Connector;

	import javax.jms.*;
	import java.util.List;
	import java.util.logging.Level;
	import java.util.logging.Logger;
	$schemaImport

	public class $name+firstUpperCase~Request {
		private final $box+firstUpperCase~Box box;
		private final Connector connector;
		private final String responsePath;

		public $name+firstUpperCase~Request($box+firstUpperCase~Box box, Connector connector, String responsePath) {
			this.box = box;
			this.connector = connector;
			this.responsePath = responsePath;
		}

		public void accept(String request) {
			try {
				$call
			} [$exception+catch]
			catch (Throwable e) {
				io.intino.alexandria.logger.Logger.error(e.getMessage(), e);
			}
		}

		private $package.actions.$name+firstUpperCase~Action actionFor($parameter+signature) {
			final $package.actions.$name+firstUpperCase~Action action = new $package.actions.$name+firstUpperCase~Action();
			action.box = this.box;
			[$parameter+assign]
			return action;
		}
	}
end

def !type(void) trigger(call)
	connector.sendMessage(responsePath, io.intino.alexandria.Json.toString(actionFor([io.intino.alexandria.Json.fromString(request, $parameter+type.class)]).execute()));
end

def trigger(call)
	actionFor([io.intino.alexandria.Json.fromString(request, $parameter+type.class)]).execute();
end

def trigger(catch)
	catch (AlexandriaException e) {
		connector.sendMessage(responsePath, e.getMessage());
	}
end

def type(parameter) trigger(assign)
	action.$name+SnakeCaseToCamelCase+firstLowerCase = $name+SnakeCaseToCamelCase+firstLowerCase;
end

def type(parameter) trigger(signature)
	$type+FirstUpperCase $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter) trigger(type)
	$type
end

def type(schemaImport)
	import $package.schemas.*;
end