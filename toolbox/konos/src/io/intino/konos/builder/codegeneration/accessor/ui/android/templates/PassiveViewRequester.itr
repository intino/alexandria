rule type(display)
    package $package.mobile.displays.requesters

    import io.intino.alexandria.mobile.Application
    import io.intino.alexandria.mobile.UiMessage
    import io.intino.alexandria.mobile.util.Json
    import io.intino.alexandria.mobile.util.Uri

    import $package.mobile.displays.<<$packageType~s.>>$name+firstUpperCase$proxy
    $schemaImport

    open class $name+firstUpperCase$proxy~Requester(private var element: $name+firstUpperCase$proxy) : $parentType(element) {
        <<$request...[$NL]~>>
    }

rule attribute(accessible) and trigger(proxy)
	Proxy

rule trigger(proxy)

rule attribute(extensionOf) and trigger(parentType)
	$parent+firstUpperCase~Requester

rule trigger(parentType)
	io.intino.alexandria.mobile.displays.requesters.<<$type+class+FirstUpperCase>>~Requester

rule type(parameter) and trigger(request)
    fun $name(value: String)<< : $returnType>> {
        $method(UiMessage("$name", "$display+lowercase", element.shortId(), $parameter$nullParameter, element.owner(), element.context()), element.ownerUnit());
    }

rule trigger(request)
    fun $name(<<$parameterSignature: $customParameterType>>)<< : $returnType>> {
        $method(UiMessage("$name", "$display+lowercase", element.shortId(), $parameter$nullParameter, element.owner(), element.context()), element.ownerUnit());
    }

rule type(object) and trigger(parameter)
    Uri.encode(Json.stringify(value, $type.serializer()))

rule type(list, file) and trigger(parameter)
	if (value != null) Uri.encode(Json.stringify(arrayListOf("BASE64:" + io.intino.alexandria.mobile.util.Base64.encoder.encode(value).decodeToString()))) else null

rule type(list) and trigger(parameter)
    Uri.encode(Json.stringify(value))

rule type(file) and trigger(parameter)
	if (value != null) "BASE64:" + io.intino.alexandria.mobile.util.Base64.encoder.encode(value).decodeToString() else null

rule type(boolean) and trigger(parameter)
	value.toString()

rule type(LongInteger) and trigger(parameter)
	value.toString()

rule type(Integer) and trigger(parameter)
	value.toString()

rule type(Real) and trigger(parameter)
	value.toString()

rule type(Date) and trigger(parameter)
	value.toEpochMilliseconds().toString()

rule type(DateTime) and trigger(parameter)
	value.toEpochMilliseconds().toString()

rule trigger(parameter)
	Uri.encode(value)

rule attribute(upload) and trigger(method)
	Application.fileService()!!.upload

rule attribute(download) and trigger(method)
	return Application.fileService()!!.download

rule trigger(method)
	Application.pushService(element.activity())!!.s
rule attribute(download) and trigger(returnType)
	io.intino.alexandria.mobile.UiFile

rule trigger(returnType)

rule type(schemaImport)
	import $package.mobile.schemas.*;

rule type(parameterType, date, list)
    List<kotlinx.datetime.Instant>

rule type(parameterType, date)
    kotlinx.datetime.Instant

rule type(parameterType, datetime, list)
    List<kotlinx.datetime.Instant>

rule type(parameterType, datetime)
    kotlinx.datetime.Instant

rule type(parameterType, integer, list)
    List<Int>

rule type(parameterType, integer)
    Int

rule type(parameterType, file, list)
    List<ByteArray?>

rule type(parameterType, file)
    ByteArray?

rule type(parameterType, list)
    List<$value>

rule type(parameterType)
    $value
