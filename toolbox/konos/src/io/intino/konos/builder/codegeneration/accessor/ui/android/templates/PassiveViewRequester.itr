def type(display)
    package $package.mobile.displays.requesters

    import io.intino.alexandria.mobile.Application
    import io.intino.alexandria.mobile.UiMessage
    import io.intino.alexandria.mobile.util.Json
    import io.intino.alexandria.mobile.util.Uri

    import $package.mobile.displays.<<$packageType~s.>>$name+firstUpperCase$proxy
    $schemaImport

    open class $name+firstUpperCase$proxy~Requester(private var element: $name+firstUpperCase$proxy) : $parentType(element) {
        <<$request...[$NL]~>>
    }
end

def attribute(accessible) and trigger(proxy)
	Proxy
end

def trigger(proxy)
end

def attribute(extensionOf) and trigger(parentType)
	$parent+firstUpperCase~Requester
end

def trigger(parentType)
	io.intino.alexandria.mobile.displays.requesters.<<$type+class+FirstUpperCase>>~Requester
end

def type(parameter) and trigger(request)
    fun $name(value: String)<< : $returnType>> {
        $method(UiMessage("$name", "$display+lowercase", element.shortId(), $parameter$nullParameter, element.owner(), element.context()), element.ownerUnit());
    }
end

def trigger(request)
    fun $name(<<$parameterSignature: $customParameterType>>)<< : $returnType>> {
        $method(UiMessage("$name", "$display+lowercase", element.shortId(), $parameter$nullParameter, element.owner(), element.context()), element.ownerUnit());
    }
end

def type(object) and trigger(parameter)
    Uri.encode(Json.stringify(value, $type.serializer()))
end

def type(list, file) and trigger(parameter)
	if (value != null) Uri.encode(Json.stringify(arrayListOf("BASE64:" + io.intino.alexandria.mobile.util.Base64.encoder.encode(value).decodeToString()))) else null
end

def type(list) and trigger(parameter)
    Uri.encode(Json.stringify(value))
end

def type(file) and trigger(parameter)
	if (value != null) "BASE64:" + io.intino.alexandria.mobile.util.Base64.encoder.encode(value).decodeToString() else null
end

def type(boolean) and trigger(parameter)
	value.toString()
end

def type(LongInteger) and trigger(parameter)
	value.toString()
end

def type(Integer) and trigger(parameter)
	value.toString()
end

def type(Real) and trigger(parameter)
	value.toString()
end

def type(Date) and trigger(parameter)
	value.toEpochMilliseconds().toString()
end

def type(DateTime) and trigger(parameter)
	value.toEpochMilliseconds().toString()
end

def trigger(parameter)
	Uri.encode(value)
end

def attribute(upload) and trigger(method)
	Application.fileService()!!.upload
end

def attribute(download) and trigger(method)
	return Application.fileService()!!.download
end

def trigger(method)
	Application.pushService(element.activity())!!.send
end

def attribute(download) and trigger(returnType)
	io.intino.alexandria.mobile.UiFile
end

def trigger(returnType)
end

def type(schemaImport)
	import $package.mobile.schemas.*;
end

def type(parameterType, date, list)
    List<kotlinx.datetime.Instant>
end

def type(parameterType, date)
    kotlinx.datetime.Instant
end

def type(parameterType, datetime, list)
    List<kotlinx.datetime.Instant>
end

def type(parameterType, datetime)
    kotlinx.datetime.Instant
end

def type(parameterType, integer, list)
    List<Int>
end

def type(parameterType, integer)
    Int
end

def type(parameterType, file, list)
    List<ByteArray?>
end

def type(parameterType, file)
    ByteArray?
end

def type(parameterType, list)
    List<$value>
end

def type(parameterType)
    $value
end