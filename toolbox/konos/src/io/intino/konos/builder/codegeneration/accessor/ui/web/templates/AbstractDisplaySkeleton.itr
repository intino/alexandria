rule type(display, accessible)
	import React from "react";
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	<<import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";>>
	<<import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";>>
	<<$displayRegistration+import>>
	import $name+PascalCase from './$name+PascalCase';

	export default class $name+PascalCase~Proxy extends $displayExtends {

		constructor(props) {
			super(props);
			<<this.notifier = new $notDecorated+firstUpperCase~Notifier(this);>>
			<<this.requester = new $notDecorated+firstUpperCase~Requester(this);>>
			<<$properties+initialization>>
		};

	}

	<<$displayRegistration+declaration>>

rule type(display, noAbstract)
	import React from "react";
	import { withStyles } from '@material-ui/core/styles';
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	$accessibleNotifierImport
	import $name+firstUpperCase~Requester from "alexandria-ui-elements/gen/displays/requesters/$requester~Requester";
	import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';
	import { withSnackbar } from 'notistack';

	const styles = theme => ({});

	class $name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			this.notifier = new $name+firstUpperCase~Notifier(this);
			this.requester = new $name+firstUpperCase~Requester(this);
			<<$properties+initialization>>
		};

		render() {
			const display = !this.state.visible ? {display:'none'} : undefined;
			const className = "layout vertical center-justified" + (this.hiddenClass() !== "" ? " " + this.hiddenClass() : "");
			return <<this.$baseMethod>>(
				<<$renderTag>>
					<<$reference...[$NL]>>
					<<$component...[$NL]>>
				<<$renderTag+end>>
			);
		}

		$notification...[$NL$NL]
		<<$notifyProxyMethod>>
	}

	export default withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase));
	DisplayFactory.register("$name+firstUpperCase", withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase)));

rule type(accessibleNotifierImport, accessible)
	import $name+firstUpperCase~Notifier from "$serviceName/gen/displays/notifiers/$name+firstUpperCase~Notifier";

rule type(accessibleNotifierImport)
	import $name+firstUpperCase~Notifier from "alexandria-ui-elements/gen/displays/notifiers/$notifier~Notifier";

rule type(notifyProxyMethod)
	notifyProxyMessage = (name) => {
		if (!this.props.onProxyMessage) return;
		this.props.onProxyMessage(name);
	};

rule type(display, collection)
	import React from "react";
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	<<import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";>>
	<<import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";>>
	<<$displayRegistration+import>>

	export default class $abstract$name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			<<this.notifier = new $notDecorated+firstUpperCase~Notifier(this);>>
			<<this.requester = new $notDecorated+firstUpperCase~Requester(this);>>
			<<$properties+initialization>>
		};

	}

	<<$displayRegistration+declaration>>

rule type(display)
	import React from "react";
	<<$alexandriaBlockImport>>
	<<$alexandriaTemplateStampImport>>
	<<$alexandriaDisplayStampImport>>
	<<$alexandriaComponentImport...[$NL]>>
	<<$projectComponentImport...[$NL]>>
	<<$parent+import>>
	<<import $notDecorated+firstUpperCase~Notifier from "$notifierDirectory/notifiers/$notDecorated+firstUpperCase~Notifier";>>
	<<import $notDecorated+firstUpperCase~Requester from "$requesterDirectory/requesters/$notDecorated+firstUpperCase~Requester";>>
	<<$displayRegistration+import>>

	export default class $abstract$name+firstUpperCase extends $displayExtends {

		constructor(props) {
			super(props);
			<<this.notifier = new $notDecorated+firstUpperCase~Notifier(this);>>
			<<this.requester = new $notDecorated+firstUpperCase~Requester(this);>>
			<<$properties+initialization>>
		};

		render() {
			const display = !this.state.visible ? {display:'none'} : undefined;
			const className = "layout vertical center-justified" + (this.hiddenClass() !== "" ? " " + this.hiddenClass() : "");
			return <<this.$baseMethod>>(
				<<$renderTag>>
					<<$reference...[$NL]>>
					<<$component...[$NL]>>
				<<$renderTag+end>>
			);
		}
	}

	<<$displayRegistration+declaration>>

rule type(displayRegistration) and trigger(import)
	import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';

rule type(displayRegistration, accessible) and trigger(declaration)
	DisplayFactory.register("$name+PascalCase~Proxy", $name+PascalCase~Proxy);

rule type(displayRegistration) and trigger(declaration)
	DisplayFactory.register("$name+firstUpperCase", $name+firstUpperCase);

rule type(alexandriaImport)
	import Ui$name+firstUpperCase from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";

rule type(alexandriaImport, embedded)
	import { Embedded$name+firstUpperCase as Ui$name+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$name+firstUpperCase";

rule type(alexandriaComponentImport)
	import Ui$type+firstUpperCase$facet...[] from "alexandria-ui-elements/<<$componentTarget>>/displays/<<$componentDirectory/>>$type+firstUpperCase$facet...[]";

rule type(projectComponentImport, ownertemplatestamp)
	import Displays$name+firstUpperCase from "$ownerModuleName/gen/displays/templates/$name+firstUpperCase";

rule type(projectComponentImport)
	import Displays$name+firstUpperCase from "$serviceName/<<$directory>>/displays/<<$componentDirectory/>>$name+firstUpperCase";

rule type(displayExtends, generic, isExtensionOf)
	Displays~$parent

rule type(displayExtends, generic)
	Ui~$parent

rule type(displayExtends)
	Ui~$type+firstUpperCase

rule type(renderTag, template) and trigger(end)
	</UiBlock>

rule type(renderTag, block) and trigger(end)
	</UiBlock>

rule type(renderTag, item) and trigger(end)
	</div>

rule type(renderTag) and trigger(end)
	</React.Fragment>

rule type(renderTag, template)
	<UiBlock<<$properties+common$properties+specific>> style={{...this.props.style,...display}}>

rule type(renderTag, block)
	<UiBlock<<$properties+common$properties+specific>> style={{...this.props.style,...display}}>

rule type(renderTag, item)
	<div style={{width:"100%",height:"100%",...this.props.style,...this.style(),...display}} className={className}>

rule type(renderTag)
	<React.Fragment>

rule type(renderTagAttributes, block)
	$properties+common$properties+specific

rule type(renderTagAttributes)

rule attribute(parent) and trigger(import)
	import Displays$parent+firstUpperCase from "../../../src/displays/$parentDirectory/$parent+firstUpperCase";

rule attribute(accessible) and trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/ProxyDisplay";

rule attribute(baseDisplay) and trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/Display";

rule attribute(baseComponent) and trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/Component";

rule attribute(embeddedComponent) and trigger(import)
	import { Embedded$value+firstUpperCase as Ui$value+firstUpperCase } from "alexandria-ui-elements/src/displays/components/$value+firstUpperCase";

rule attribute(component) and trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/components/$value+firstUpperCase";

rule trigger(import)
	import Ui$value+firstUpperCase from "alexandria-ui-elements/src/displays/$value+firstUpperCase";
