rule type(resource, exposedDisplay, entryPoint)
	package $package+validPackage.ui.resources;

    import io.intino.alexandria.AbstractBox;
    import io.intino.alexandria.exceptions.AlexandriaException;
    import io.intino.alexandria.exceptions.Unauthorized;
    import io.intino.alexandria.ui.AlexandriaUiBox;
    import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
    import io.intino.alexandria.ui.server.pages.UiPage;
    import io.intino.alexandria.ui.services.auth.exceptions.CouldNotObtainInfo;
    import io.intino.alexandria.ui.services.push.UIClient;

	import $package+validPackage.ui.pages.$name+firstUpperCase~Page;

    import java.util.UUID;
    import java.util.function.Consumer;
    import java.util.function.Function;

    public class $name+firstUpperCase~Resource extends io.intino.alexandria.ui.server.resources.Resource {
        private final AlexandriaUiBox box;

        public $name+firstUpperCase~Resource(AlexandriaUiBox box, io.intino.alexandria.ui.server.AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
            super(manager, notifierProvider);
            this.box = box;
        }

        @Override
        public void execute() throws AlexandriaException {
            super.execute();
            fillDeviceParameter();
            $render
        }

        private void render() {
            String clientId = UUID.randomUUID().toString();
            UiPage page = new $name+firstUpperCase~Page();
            page.session = manager.session(manager.fromQuery("session"));
            page.session.browser().onRedirect(location -> manager.redirect(location));
            page.session.browser().requestUrl(manager.requestUrl());
            page.session.whenLogin(new Function<String, String>() {
                @Override
                public String apply(String baseUrl) {
                    return $name+firstUpperCase~Resource.this.authenticate(page.session, baseUrl);
                }
            });
            page.session.whenLogout(b -> logout(page.session));
            (($name+firstUpperCase~Page)page).box = box;
            page.clientId = clientId;
            page.webDirectories = manager.webDirectories();
            page.device = parameterValue("device");
            page.token = parameterValue("token");
			$parameter...[$NL]

            if (!page.hasPermissions()) {
                manager.redirect(page.redirectUrl());
                return;
            }

            manager.pushService().onOpen(client -> {
                if (!client.id().equals(page.clientId))
                    return false;

                if (client.soul() != null && box.routeManager().routeDispatcher() instanceof $package+validPackage.ui.displays.RouteDispatcher) {
                    (($package+validPackage.ui.displays.RouteDispatcher)box.routeManager().routeDispatcher()).dispatchHome(client.soul());
                    return false;
                }

                io.intino.alexandria.ui.Soul soul = page.prepareSoul(client);
                soul.onRedirect((location) -> manager.redirect(location));
                soul.addRegisterDisplayListener(display -> {
                    display.inject(notifier(page.session, client, display));
                    display.inject(page.session);
                    display.inject(soul);
                    display.inject(() -> soul);
                });
                ((UIClient)client).soul(soul);
                client.cookies(manager.cookies());

                box.registerSoul(clientId, soul);
                soul.register(new io.intino.alexandria.ui.displays.DisplayRouter(box).id("__router__"));
                if (box.routeManager().routeDispatcher() instanceof $package+validPackage.ui.displays.RouteDispatcher) (($package+validPackage.ui.displays.RouteDispatcher)box.routeManager().routeDispatcher()).dispatchHome(soul);

                return true;
            });

            manager.pushService().onClose(clientId).execute(new Consumer<UIClient>() {
                @Override
                public void accept(UIClient client) {
                    client.soul().destroy();
                    box.unRegisterSoul(client.id());
                    manager.unRegister(client);
                }
            });

            manager.write(page.execute());
        }

    }

rule type(resource, exposedDisplay)
	package $package+validPackage.ui.resources;

    import io.intino.alexandria.AbstractBox;
    import io.intino.alexandria.exceptions.AlexandriaException;
    import io.intino.alexandria.exceptions.Unauthorized;
    import io.intino.alexandria.ui.AlexandriaUiBox;
	import $package+validPackage.$box+PascalCase~Box;
	import $package+validPackage.ui.pages.$name+firstUpperCase~ProxyPage;
	import io.intino.alexandria.Json;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.exceptions.Unauthorized;
	import io.intino.alexandria.ui.Soul;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.services.auth.exceptions.CouldNotObtainInfo;
	import io.intino.alexandria.ui.services.push.UIClient;
	import io.intino.alexandria.ui.services.push.UISession;

	import java.util.function.Consumer;
	import java.util.function.Function;

	public class $name+firstUpperCase~ProxyResource extends io.intino.alexandria.ui.server.resources.ProxyResource {
		private final AlexandriaUiBox box;

		public $name+firstUpperCase~ProxyResource(AlexandriaUiBox box, io.intino.alexandria.ui.server.AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
			this.box = box;
		}

		@Override
		public void execute() throws AlexandriaException {
			fillBrowser(manager, session());
			fillDeviceParameter();
			$render
		}

		private void render() {
			UIClient client = client();

			$name+firstUpperCase~ProxyPage page = new $name+firstUpperCase~ProxyPage();
			page.session = session();
			page.session.browser().onRedirect(location -> manager.redirect(location));
			page.session.browser().requestUrl(manager.requestUrl());
			page.session.whenLogin(new Function<String, String>() {
				@Override
				public String apply(String baseUrl) {
					return $name+firstUpperCase~ProxyResource.this.authenticate(page.session, baseUrl);
				}
			});
			page.session.whenLogout(b -> logout(page.session));
			page.box = box;
			page.clientId = client.id();
			page.webDirectories = manager.webDirectories();
			page.googleApiKey = "";
			page.device = parameterValue("device");
			$parameter...[$NL]
			if (!page.hasPermissions()) {
				manager.redirect(page.redirectUrl());
				return;
			}

			Soul soul = soul();
			if (soul != null) {
				page.soul = soul;
				page.execute();
				return;
			}

			soul = new Soul(page.session) {
				@Override
				public void personify() {
					Soul soul = this;
					addRegisterDisplayListener(display -> {
						display.inject(notifier(page.session, client, display));
						display.inject(page.session);
						display.inject(soul);
						display.inject(() -> soul);
					});
				}
			};
			((UIClient)client).soul(soul);
			client.cookies(manager.cookies());
			page.soul = soul;
			page.execute();
			box.registerSoul(client.id(), soul);
			soul.register(new io.intino.alexandria.ui.displays.DisplayRouter(box).id("__router__"));
			//(($package+validPackage.ui.displays.RouteDispatcher)box.routeManager().routeDispatcher()).dispatch$name+firstUpperCase(soul<<, $parameter+dispatch...[, ]>>);

			manager.pushService().onClose(page.clientId).execute(new Consumer<UIClient>() {
				@Override
				public void accept(io.intino.alexandria.ui.services.push.UIClient client) {
					((AbstractBox)box).soul(client.id()).ifPresent(s -> s.destroy());
					box.unRegisterSoul(client.id());
					manager.unRegister(client);
				}
			});

			manager.write("OK");
		}
	}

rule type(render, confidential)
	try {
		if (!isLogged(accessToken()))
			throw new Unauthorized("user is not logged");

		authenticate(manager.session(manager.fromQuery("session")), accessToken());
		render();
	} catch (CouldNotObtainInfo couldNotObtainInfo) {
		throw new Unauthorized("user is not logged");
	} catch (Throwable error) {
		throw new Unauthorized("could not render component");
	}

rule type(render)
	render();

rule type(resource, static)
	package $package+validPackage.ui.resources;

	import $package+validPackage.$box+PascalCase~Box;
	import $package+validPackage.ui.pages.$name+firstUpperCase~Page;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;

	import java.util.Base64;
	import java.util.UUID;
	import java.util.function.Consumer;
	import java.util.function.Function;

	public class $name+firstUpperCase~Resource extends io.intino.alexandria.ui.server.resources.<<$editor>>Resource {
		private final $box+PascalCase~Box box;

		public $name+firstUpperCase~Resource($box+PascalCase~Box box, io.intino.alexandria.ui.server.AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
			this.box = box;
		}

		@Override
		public void execute() throws AlexandriaException {
			super.execute();
			fillDeviceParameter();
			<<$confidential
			if (isLogged()) render();
			else authenticate();?render();>>
		}

		private void render() {
			String clientId = UUID.randomUUID().toString();
			$name+firstUpperCase~Page page = new $name+firstUpperCase~Page();
			page.session = manager.currentSession();
			page.session.browser().onRedirect(location -> manager.redirect(location));
			page.session.browser().requestUrl(manager.requestUrl());
			page.session.whenLogin(new Function<String, String>() {
				@Override
				public String apply(String baseUrl) {
					return $name+firstUpperCase~Resource.this.authenticate(page.session, baseUrl);
				}
			});
			page.session.whenLogout(b -> logout(page.session));
			page.box = box;
			page.clientId = clientId;
			page.webDirectories = manager.webDirectories();
			<<page.googleApiKey = $googleApiKey+format;>>
			page.device = parameterValue("device");
			page.token = parameterValue("token");<<
			$editor+parameters>>
			$parameter...[$NL]
			if (!page.hasPermissions()) {
				manager.redirect(page.redirectUrl());
				return;
			}

			manager.write(page.execute());
		}

	}

rule type(resource, asset)
	package $package+validPackage.ui.resources;

	import $package+validPackage.$box+PascalCase~Box;
	import $package+validPackage.ui.pages.$name+firstUpperCase~Page;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;

	import java.util.Base64;
	import java.util.UUID;
	import java.util.function.Consumer;
	import java.util.function.Function;

	public class $name+firstUpperCase~Resource extends io.intino.alexandria.ui.server.resources.<<$editor>>Resource {
		private final $box+PascalCase~Box box;

		public $name+firstUpperCase~Resource($box+PascalCase~Box box, io.intino.alexandria.ui.server.AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
			this.box = box;
		}

		@Override
		public void execute() throws AlexandriaException {
			super.execute();
			fillDeviceParameter();
			<<$confidential
			if (isLogged()) render();
			else authenticate();?render();>>
		}

		private void render() {
			String clientId = UUID.randomUUID().toString();
			$name+firstUpperCase~Page page = new $name+firstUpperCase~Page();
			page.session = manager.currentSession();
			page.session.browser().onRedirect(location -> manager.redirect(location));
			page.session.browser().requestUrl(manager.requestUrl());
			page.session.whenLogin(new Function<String, String>() {
				@Override
				public String apply(String baseUrl) {
					return $name+firstUpperCase~Resource.this.authenticate(page.session, baseUrl);
				}
			});
			page.session.whenLogout(b -> logout(page.session));
			page.box = box;
			page.clientId = clientId;
			page.webDirectories = manager.webDirectories();
			<<page.googleApiKey = $googleApiKey+format;>>
			page.device = parameterValue("device");
			page.token = parameterValue("token");<<
			$editor+parameters>>
			$parameter...[$NL]
			if (!page.hasPermissions()) {
				manager.redirect(page.redirectUrl());
				return;
			}

			manager.write(page.execute());
		}

	}

rule type(resource)
	package $package+validPackage.ui.resources;

	import $package+validPackage.$box+PascalCase~Box;
	$page+import
	import $package+validPackage.ui.pages.$name+firstUpperCase~Page;
	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.server.pages.UiPage;
	import io.intino.alexandria.ui.services.push.UIClient;

	import java.util.Base64;
	import java.util.UUID;
	import java.util.function.Consumer;
	import java.util.function.Function;

	public class $name+firstUpperCase~Resource extends io.intino.alexandria.ui.server.resources.<<$editor>>Resource {
		private final $box+PascalCase~Box box;

		public $name+firstUpperCase~Resource($box+PascalCase~Box box, io.intino.alexandria.ui.server.AlexandriaUiManager manager, DisplayNotifierProvider notifierProvider) {
			super(manager, notifierProvider);
			this.box = box;
		}

		@Override
		public void execute() throws AlexandriaException {
			super.execute();
			fillDeviceParameter();
			<<$confidential
			if (isLogged()) render();
			else authenticate();?render();>>
		}

		private void render() {
			String clientId = UUID.randomUUID().toString();
			UiPage page = $page+instance;
			page.session = manager.currentSession();
			page.session.browser().onRedirect(location -> manager.redirect(location));
			page.session.browser().requestUrl(manager.requestUrl());
			page.session.whenLogin(new Function<String, String>() {
				@Override
				public String apply(String baseUrl) {
					return $name+firstUpperCase~Resource.this.authenticate(page.session, baseUrl);
				}
			});
			page.session.whenLogout(b -> logout(page.session));
            $page+box
			page.clientId = clientId;
			page.webDirectories = manager.webDirectories();
			<<page.googleApiKey = $googleApiKey+format;>>
			page.device = parameterValue("device");
			page.token = parameterValue("token");<<
			$editor+parameters>>
			$parameter...[$NL]
			if (!page.hasPermissions()) {
				manager.redirect(page.redirectUrl());
				return;
			}

			manager.pushService().onOpen(client -> {
				if (!client.id().equals(page.clientId))
					return false;

				if (client.soul() != null && box.routeManager().routeDispatcher() instanceof $package+validPackage.ui.displays.RouteDispatcher) {
					(($package+validPackage.ui.displays.RouteDispatcher)box.routeManager().routeDispatcher()).dispatch$name+firstUpperCase(client.soul()<<, $parameter+dispatch...[, ]>>);
					return false;
				}

				io.intino.alexandria.ui.Soul soul = page.prepareSoul(client);
				soul.onRedirect((location) -> manager.redirect(location));
				soul.addRegisterDisplayListener(display -> {
					display.inject(notifier(page.session, client, display));
					display.inject(page.session);
					display.inject(soul);
					display.inject(() -> soul);
				});
				((UIClient)client).soul(soul);
				client.cookies(manager.cookies());

				box.registerSoul(clientId, soul);
				soul.register(new io.intino.alexandria.ui.displays.DisplayRouter(box).id("__router__"));
				if (box.routeManager().routeDispatcher() instanceof $package+validPackage.ui.displays.RouteDispatcher)
				    (($package+validPackage.ui.displays.RouteDispatcher)box.routeManager().routeDispatcher()).dispatch$name+firstUpperCase(soul<<, $parameter+dispatch...[, ]>>);

				return true;
			});

			manager.pushService().onClose(clientId).execute(new Consumer<io.intino.alexandria.ui.services.push.UIClient>() {
				@Override
				public void accept(io.intino.alexandria.ui.services.push.UIClient client) {
					box.soul(client.id()).ifPresent(s -> s.destroy());
					box.unRegisterSoul(client.id());
					manager.unRegister(client);
				}
			});

			manager.write(page.execute());
		}

	}

rule trigger(parameters)
	page.document = loadDocument();
	page.permission = loadPermission();

rule type(parameter, mobile) and trigger(dispatch)
    page instanceof $resource+firstUpperCase~MobilePage ? (($resource+firstUpperCase~MobilePage)page).$name+CamelCase : (($resource+firstUpperCase~Page)page).$name+CamelCase

rule type(parameter) and trigger(dispatch)
    (($resource+firstUpperCase~Page)page).$name+CamelCase

rule type(parameter, mobile)
    if (page instanceof $resource+firstUpperCase~MobilePage) (($resource+firstUpperCase~MobilePage)page).$name+CamelCase = parameterValue("$name");
    else (($resource+firstUpperCase~Page)page).$name+CamelCase = parameterValue("$name");

rule type(parameter)
	(($resource+firstUpperCase~Page)page).$name+CamelCase = parameterValue("$name");

rule type(googleApiKey) and trigger(format)
	"$name"<<$custom...[]>>

rule trigger(custom)
	.replace("{$this}", box.configuration().get("$this"))

rule type(page, mobile) and trigger(import)
	import $package+validPackage.ui.pages.$name+firstUpperCase~MobilePage;

rule type(page) and trigger(import)

rule type(page, mobile) and trigger(instance)
    manager.fromQuery("device") != null ? new $name+firstUpperCase~MobilePage() : new $name+firstUpperCase~Page()

rule type(page) and trigger(instance)
    new $name+firstUpperCase~Page()

rule type(page, mobile) and trigger(box)
    if (page instanceof $name+firstUpperCase~MobilePage) (($name+firstUpperCase~MobilePage)page).box = box;
    else (($name+firstUpperCase~Page)page).box = box;

rule type(page) and trigger(box)
    (($name+firstUpperCase~Page)page).box = box;
