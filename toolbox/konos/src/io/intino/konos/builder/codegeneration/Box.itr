def type(box)
	package $package;

	public class $name+PascalCase~Box extends AbstractBox {

		public $name+PascalCase~Box(String[] args) {
			this(new $name+PascalCase~Configuration(args));
		}

		public $name+PascalCase~Box($name+PascalCase~Configuration configuration) {
			super(configuration);
		}

		@Override
		public io.intino.alexandria.core.Box put(Object o) {
			super.put(o);
			return this;
		}

		public void beforeStart() {

		}

		public void afterStart() {

		}

		public void beforeStop() {

		}

		public void afterStop() {

		}

		<<$hasUi+authService>>

		<<$terminal+datamartSourceSelector>>

		<<$rest>>
		<<$authenticationValidator>>
	}
end

def trigger(hide)

end

def trigger(authservice)
	protected io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl) {
		//TODO add your authService
		return null;
	}
end

def trigger(rest)
	protected io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl) {
		//TODO add your authService
		return null;
	}	
end

def type(datamartsLoad) and trigger(datamartSourceSelector)
	protected String $datamartsLoad() {
		return null;//TODO add ss selector using SQL syntax
	}
end

def trigger(authenticationValidator)
	public io.intino.alexandria.http.security.$type+FirstUpperCase~AuthenticationValidator authenticationValidator() {
		return token -> false;
	}
end