def type(sentinels)
	package $package+ValidPackage;

	import $package+ValidPackage.$box+FirstUpperCase~Box;
	import io.intino.alexandria.scheduler.AlexandriaScheduler;
	import $package+ValidPackage.actions.*;
	import org.quartz.*;
	import java.util.LinkedHashSet;
	import java.util.Map;
	import java.util.Set;
	import java.util.TimeZone;
	import java.time.ZoneId;
	import java.io.File;
	import io.intino.alexandria.logger.Logger;

	import static org.quartz.JobBuilder.newJob;
	import static org.quartz.CronScheduleBuilder.*;
	import static org.quartz.TriggerBuilder.newTrigger;

	public class $name+pascalCase~Sentinels {

		private $name+pascalCase~Sentinels() {

		}

		public static void init(AlexandriaScheduler scheduler, java.io.File home<<$hasWebhook io.intino.alexandria.http.AlexandriaSpark webServer>>, $box+FirstUpperCase~Box box) {
			JobDetail job;
			try {
				$sentinel+init...[$NL]
				scheduler.startSchedules();
			} catch (Exception e) {
				Logger.error(e.getMessage());
			}
		}

		$sentinel+actionCall...[$NL]

		private static Set<Trigger> newSet(Trigger... triggers) {
			LinkedHashSet<Trigger> set = new LinkedHashSet<>();
			java.util.Collections.addAll(set, triggers);
			return set;
		}
	}
end

def type(sentinel) and type(FileListener) and trigger(init)
	File directory = $file+customizeDirectory;
	if (directory != null && directory.exists()) scheduler.watchDirectory("$name", directory, (file, event) -> {
				$package+ValidPackage.actions.$name+CamelCase~Action action = new $package+ValidPackage.actions.$name+CamelCase~Action();
				action.box = box;
				action.file = file;
				action.event = event;
				action.execute();
			}, $event+fullEvent...[, ]);
	else if (directory != null) Logger.warn("Directory " + directory + " not found");
end

def type(archetype) and trigger(customizeDirectory)
	new $package.Archetype(home).$path
end

def type(custom) and trigger(customizeDirectory)
	box.configuration().get("$path") == null ? null : new java.io.File(box.configuration().get("$path"))
end

def trigger(customizeDirectory)
	new java.io.File("$path")
end

def type(sentinel) and type(webhook) and trigger(init)
	webServer.route($path+format).get(manager -> $name+CamelCase~Action(manager).execute());
end

def type(sentinel) and type(webhook) and trigger(actionCall)
	private static $name+PascalCase~Action $name+CamelCase~Action(io.intino.alexandria.http.spark.SparkManager manager) {
		$name+PascalCase~Action action = new $name+PascalCase~Action();
		$parameter+assign...[$NL]
		return action;
	}
end

def type(sentinel) and trigger(init)
	job = newJob($package+ValidPackage.scheduling.$name+PascalCase~Listener.class).withIdentity("$name").build();
	job.getJobDataMap().put("box", box);
	scheduler.scheduleJob(job, newSet($job...[, ]), true);
end

def trigger(assign)
	action.$name+CamelCase = manager.from$in+firstUpperCase("$name");
end

def type(path) and trigger(format)
	"$name"<<$custom...[]>>
end

def trigger(fullEvent)
	io.intino.alexandria.scheduler.directory.DirectorySentinel.Event.$this
end

def type(cronTrigger) and trigger(job)
	newTrigger().withIdentity("$name").withSchedule(cronSchedule("$pattern")<<.inTimeZone(TimeZone.getTimeZone(ZoneId.of("$timeZone")))>>).build()
end

def type(onBootTrigger) and type(delay) and trigger(job)
	newTrigger().startAt(java.util.Date.from(java.time.Instant.now().plus($delay, java.time.temporal.ChronoUnit.MILLIS))).build()
end

def type(onBootTrigger) and trigger(job)
	newTrigger().startNow().build()
end