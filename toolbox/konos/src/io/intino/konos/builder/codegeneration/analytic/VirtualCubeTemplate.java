package io.intino.konos.builder.codegeneration.analytic;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class VirtualCubeTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("cube", "src")).output(literal("package ")).output(placeholder("package")).output(literal(".analytic.cubes;\n\nimport io.intino.alexandria.Timetag;\nimport io.intino.alexandria.led.buffers.store.ByteStore;\n\nimport ")).output(placeholder("package")).output(literal(".analytic.Axis;\nimport ")).output(placeholder("package")).output(literal(".analytic.axes.*;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.function.Predicate;\n\npublic class ")).output(placeholder("name", "FirstUpperCase")).output(literal(" extends Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(" {\n\n\tpublic ")).output(placeholder("name", "FirstUpperCase")).output(literal("(List<Loader> loaders) {\n\t\tsuper(loaders);\n\t}\n\n\tpublic static long ")).output(placeholder("name", "firstLowerCase")).output(literal("Id(")).output(placeholder("name", "FirstUpperCase")).output(literal(".Fact fact) {\n\t\treturn fact.id();//TODO\n\t}\n\n\t")).output(expression().output(placeholder("customDimension", "staticMethod").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("customFilter", "staticMethod").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("customIndicator", "staticMethod").multiple("\n\n"))).output(literal("\n\n\t@Override\n\tpublic ")).output(placeholder("name", "FirstUpperCase")).output(literal(" execute() {\n\t\tsuper.execute();\n\t\treturn this;\n\t}\n\n\tpublic static long idOf(")).output(placeholder("mainCube", "idOf")).output(literal(") {\n\t\treturn ")).output(placeholder("mainCube")).output(literal(".id(); //TODO\n\t}\n\n\tpublic static class Loader extends Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(".Loader {\n\n\t\tpublic static List<Loader> create(File root, Timetag from, Timetag to, Collection<String> divisions) {\n\t\t\treturn divisions.stream().map(d -> new Loader(new Loader.Datasource(root, from, to), d)).collect(Collectors.toList());\n\t\t}\n\n\n\t\tpublic Loader(Datasource datasource")).output(expression().output(literal(", ")).output(placeholder("split", "parameter"))).output(literal(") {\n\t\t\tsuper(datasource")).output(expression().output(literal(", ")).output(placeholder("split", "name"))).output(literal(");\n\t\t}\n\n\t\t// TODO write here a cache if necessary\n\t}\n\n\tpublic static class Aggregation extends Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(".AbstractAggregation {\n\n\t\tpublic Aggregation(Timetag timetag, List<Axis.Component> components, Map<Axis, Predicate<Fact>> filters) {\n\t\t\tsuper(timetag, components, filters);\n\t\t}\n\n\t\t")).output(expression().output(placeholder("customIndicator", "implementation").multiple("\n\n"))).output(literal("\n\t}\n}")));
		rules.add(rule().condition(trigger("idof")).output(placeholder("", "FirstUpperCase")).output(literal(".Fact ")).output(placeholder("", "firstLowerCase")));
		rules.add(rule().condition(allTypes("cube")).output(literal("package ")).output(placeholder("package")).output(literal(".analytic.cubes;\n\nimport io.intino.alexandria.Timetag;\nimport io.intino.alexandria.led.LedReader;\nimport io.intino.alexandria.led.LedStream;\nimport io.intino.alexandria.led.Schema;\nimport io.intino.alexandria.led.buffers.store.ByteStore;\nimport io.intino.alexandria.led.util.iterators.MergedIterator;\nimport io.intino.alexandria.led.util.iterators.StatefulIterator;\nimport io.intino.alexandria.led.util.collections.SparseLongList;\n\nimport ")).output(placeholder("package")).output(literal(".analytic.axes.*;\nimport ")).output(placeholder("package")).output(literal(".analytic.Axis;\n\nimport java.io.File;\nimport java.util.*;\nimport java.util.stream.Collectors;\nimport java.util.function.Function;\nimport java.util.function.Predicate;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport static java.util.Comparator.comparingLong;\nimport static java.util.Spliterators.spliteratorUnknownSize;\nimport ")).output(placeholder("package")).output(literal(".analytic.cubes.")).output(placeholder("name", "FirstUpperCase")).output(literal(".Aggregation;\n\npublic abstract class Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(" implements Iterable<")).output(placeholder("name", "FirstUpperCase")).output(literal(".Aggregation> {\n\n\tpublic static final Fact NULL_FACT = new NullFact();\n\n\tprivate final List<? extends Loader> loaders;\n\tprivate Predicate<Fact> filter = fact -> true;\n\tprivate final List<Axis> axes = new ArrayList<>();\n\tprivate final Map<Axis, Set<Axis.Component>> components = new HashMap<>();\n\tprivate final List<Function<Fact, ? extends Axis.Component>> groupByList = new ArrayList<>();\n\tprivate final Map<Axis, Predicate<Fact>> filters = new LinkedHashMap<>();\n\tprivate Aggregation[] result;\n\n\tpublic Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal("(List<? extends Loader> loaders) {\n\t\tthis.loaders = loaders;\n\t}\n\n\t")).output(expression().output(placeholder("dimension", "method").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("customDimension", "method").multiple("\n\n"))).output(literal("\n\n\t")).output(expression().output(placeholder("customFilter", "method").multiple("\n\n"))).output(literal("\n\n\tpublic Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(" groupBy(Axis axis) {\n\t\tif(axis == null) throw new NullPointerException(\"Axis cannot be null\");\n\t\tswitch(axis.getTitle()) {\n\t\t\t")).output(expression().output(placeholder("dimension", "switchCaseGroupBy").multiple("\n"))).output(literal("\n\t\t}\n\t\treturn this;\n\t}\n\n\t@SuppressWarnings(\"unchecked\")\n\tpublic Abstract")).output(placeholder("name", "FirstUpperCase")).output(literal(" filter(Axis axis, Set<? extends Axis.Component> components) {\n\t\tif(axis == null) throw new NullPointerException(\"Axis cannot be null\");\n\t\tswitch(axis.getTitle()) {\n\t\t\t")).output(expression().output(placeholder("dimension", "switchCaseFilterBy").multiple("\n"))).output(literal("\n\t\t}\n\t\treturn this;\n\t}\n\n\tpublic Abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" execute() {\n\t\tresult = new Aggregation[resultsSize()];\n\t\tresults().forEach(this::append);\n\t\tfillCategories();\n\t\tcalculateTotals();\n\n\t\treturn this;\n\t}\n\n\tpublic Aggregation[] result() {\n\t\tif(result == null) return new Aggregation[0];\n\t\treturn Arrays.stream(result).filter(java.util.Objects::nonNull).toArray(Aggregation[]::new);\n\t}\n\n\t@Override\n\tpublic Iterator<Aggregation> iterator() {\n\t\treturn result == null\n\t\t\t? Stream.<Aggregation>empty().iterator()\n\t\t\t: Arrays.stream(result).filter(java.util.Objects::nonNull).iterator();\n\t}\n\n\tpublic static List<Axis> dimensions() {\n\t\treturn List.of(")).output(expression().output(placeholder("dimension", "getInstance").multiple(", "))).output(literal(");\n\t}\n\n\tpublic boolean contains(Axis axis, Axis.Component component) {\n\t\tif(!components.containsKey(axis)) return false;\n\t\treturn components.get(axis).contains(component);\n\t}\n\n\tpublic Iterator<Fact> detail() {\n\t\tMergedIterator<Fact> iterator = new MergedIterator<>(loaders.stream().map(Iterable::iterator), comparingLong(Fact::id));\n\t\treturn StreamSupport.stream(spliteratorUnknownSize(iterator, Spliterator.SORTED), false).filter(this::check).iterator();\n\t}\n\n\tpublic Aggregation aggregation(List<Axis.Component> components) {\n\t\tif(result == null || result.length == 0) return null;\n\t\tfinal int index = indexOf(components);\n\t\treturn result[index];\n\t}\n\n\tpublic Aggregation aggregation(Axis.Component... components) {\n\t\tif(result == null || result.length == 0) return null;\n\t\tfinal int index = indexOf(components);\n\t\treturn result[index];\n\t}\n\n\tprivate void fillCategories() {\n\t\tfor (Aggregation aggregation : result) {\n\t\t\tif (aggregation == null) continue;\n\t\t\tList<Axis.Component> components = aggregation.components();\n\t\t\tfor (int i = 0; i < components.size(); i++)\n\t\t\t\tthis.components.get(axes.get(i)).add(components.get(i));\n\t\t}\n\t}\n\n\tprivate void calculateTotals() {\n\t\tfor (Loader loader : loaders) {\n\t\t\tif(loader.axes().size() != axes.size()) return;\n\t\t\tfor (int i = 0; i < loader.totals().length; i++) {\n\t\t\t\tif (result[i] == null) continue;\n\t\t\t\tresult[i].append(loader.totals()[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate int resultsSize() {\n\t\tint accumulator = 1;\n\t\tfor (Axis axis : axes) accumulator *= axis.getSize() + 1;\n\t\treturn accumulator;\n\t}\n\n\tprivate Stream<Aggregation[]> results() {\n\t\treturn loaders.parallelStream().map(this::results);\n\t}\n\n\tprivate Aggregation[] results(Iterable<Fact> facts) {\n\t\tAggregation[] result = new Aggregation[resultsSize()];\n\t\tfor (Fact fact : facts) {\n\t\t\tfact.setCube(this);\n\t\t\tif (!check(fact)) continue;\n\t\t\tAxis.Component[] components = componentsOf(fact);\n\t\t\tint index = indexOf(components);\n\t\t\tif (result[index] == null) result[index] = new Aggregation(fact.timetag(), Arrays.asList(components), filters);\n\t\t\tresult[index].append(fact);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate synchronized void append(Aggregation[] results) {\n\t\tfor (int i = 0; i < results.length; i++) {\n\t\t\tif (results[i] == null) continue;\n\t\t\tif (result[i] == null) result[i] = results[i];\n\t\t\telse result[i].append(results[i]);\n\t\t}\n\t}\n\n\tprivate int indexOf(Axis.Component[] components) {\n\t\tint index = 0;\n\t\tfor (int i = 0; i < components.length; i++) {\n\t\t\tindex *= axes.get(i).getSize();\n\t\t\tindex += components[i].index();\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate int indexOf(List<Axis.Component> components) {\n\t\tint index = 0;\n\t\tfor (int i = 0; i < components.size(); i++) {\n\t\t\tindex *= axes.get(i).getSize();\n\t\t\tindex += components.get(i).index();\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate boolean check(Fact item) {\n\t\treturn filter.test(item);\n\t}\n\n\tprivate Axis.Component[] componentsOf(Fact item) {\n\t\tAxis.Component[] components = new Axis.Component[groupByList.size()];\n\t\tfor (int i = 0; i < components.length; i++) components[i] = groupByList.get(i).apply(item);\n\t\treturn components;\n\t}\n\n\tpublic static class Fact {\n\n\t\t")).output(expression().output(placeholder("cube", "fieldFact").multiple("\n"))).output(literal("\n\n\t\tprivate Abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" cube;\n\n\t\tpublic Fact(")).output(placeholder("cube", "factParameter").multiple(", ")).output(literal(") {\n\t\t\t")).output(placeholder("cube", "assignFact").multiple("\n")).output(literal("\n\t\t}\n\n\t\tpublic ")).output(placeholder("mainCube", "firstUpperCase")).output(literal(".Fact ")).output(placeholder("mainCube", "firstLowerCase")).output(literal("() {\n\t\t\treturn ")).output(placeholder("mainCube", "firstLowerCase")).output(literal(";\n\t\t}\n\n\t\tpublic ")).output(placeholder("joinCube", "firstUpperCase")).output(literal(".Fact ")).output(placeholder("joinCube", "firstLowerCase")).output(literal("() {\n\t\t\treturn ")).output(placeholder("joinCube", "firstLowerCase")).output(literal(";\n\t\t}\n\n\t\tpublic Abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" cube() {\n\t\t\treturn cube;\n\t\t}\n\n\t\tpublic Timetag timetag() {\n\t\t\treturn ")).output(placeholder("joinCube", "firstLowerCase")).output(literal(".timetag();\n\t\t}\n\n\t\tpublic long id() {\n\t\t\treturn ")).output(placeholder("mainCube", "firstLowerCase")).output(literal(".id();\n\t\t}\n\n\t\t")).output(expression().output(placeholder("column", "factGetter").multiple("\n\n"))).output(literal("\n\n\t\t")).output(expression().output(placeholder("virtualColumn", "factGetter").multiple("\n\n"))).output(literal("\n\n\t\tvoid setCube(Abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" cube) {\n\t\t\tthis.cube = cube;\n\t\t}\n\n\t\tpublic int size() {\n\t\t\treturn ")).output(placeholder("cube", "size").multiple(" + ")).output(literal(";\n\t\t}\n\n\t\t@Override\n\t\tpublic boolean equals(Object o) {\n\t\t\tif(o == null || o.getClass() != getClass()) return false;\n\t\t\tfinal Fact other = (Fact) o;\n\t\t\treturn Objects.equals(")).output(placeholder("mainCube", "firstLowerCase")).output(literal(", other.")).output(placeholder("mainCube", "firstLowerCase")).output(literal(");\n\t\t}\n\n\t\t@Override\n\t\tpublic int hashCode() {\n\t\t\treturn ")).output(placeholder("mainCube", "firstLowerCase")).output(literal(".hashCode();\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"")).output(placeholder("name")).output(literal("Fact{\" +\n\t\t\t\t\t\"")).output(placeholder("mainCube")).output(literal("=\" + ")).output(placeholder("mainCube", "firstLowerCase")).output(literal(" +\n\t\t\t\t\t\", ")).output(placeholder("joinCube")).output(literal("=\" + ")).output(placeholder("joinCube", "firstLowerCase")).output(literal(" +\n\t\t\t\t\t\"}\";\n\t\t}\n\t}\n\n\tpublic static class NullFact extends Fact {\n\n\t\tprivate NullFact() {\n\t\t\tsuper(")).output(placeholder("cube", "nullFactParameter").multiple(", ")).output(literal(");\n\t\t}\n\n\t\t")).output(expression().output(placeholder("column", "nullgetter").multiple("\n\n"))).output(literal("\n\n\t\t@Override\n\t\tpublic long id() {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tpublic enum Indicator {\n\n\t\tTotal(\"Total\", \"\", Mode.Sum, false),\n\t\tDistinct(\"Distinct\", \"\", Mode.Sum, false),\n\t\t")).output(expression().output(placeholder("indicator", "enum").multiple(",\n"))).output(literal("\n\t\t")).output(expression().output(literal(",")).output(placeholder("customIndicator", "enum").multiple(",\n"))).output(literal(";\n\n\n\t\tpublic static Indicator byName(String name) {\n\t\t\treturn Arrays.stream(values()).filter(i -> i.name().equalsIgnoreCase(name)).findFirst().orElse(null);\n\t\t}\n\n\t\tpublic final String title;\n\t\tpublic final String unit;\n\t\tpublic final Mode mode;\n\t\tprivate final boolean virtual;\n\n\t\tIndicator(String title, String unit, Mode mode, boolean virtual) {\n\t\t\tthis.title = title;\n\t\t\tthis.unit = unit;\n\t\t\tthis.mode = mode;\n\t\t\tthis.virtual = virtual;\n\t\t}\n\n\t\tpublic enum Mode {\n\t\t\tSum, Average\n\t\t}\n\t}\n\n\tpublic static abstract class AbstractAggregation {\n\n\t\tprivate static final long Long_NaN = Long.MIN_VALUE;\n\n\t\tprivate final Timetag timetag;\n\t\tprivate final List<Axis.Component> components;\n\t\tprivate final Map<Axis, Predicate<Fact>> filters;\n\t\tprivate long aggregationTotal = 0L;\n\t\tprivate long aggregationDistinct = 0L;\n\t\tprivate long lastID = Long.MIN_VALUE;\n\t\t")).output(expression().output(placeholder("index", "field"))).output(literal("\n\t\t")).output(expression().output(placeholder("indicator", "field").multiple("\n"))).output(literal("\n\t\t")).output(expression().output(placeholder("customIndicator", "field").multiple("\n"))).output(literal("\n\t\tprivate long total")).output(placeholder("name", "FirstUpperCase")).output(literal(";\n\n\t\tpublic AbstractAggregation(Timetag timetag, List<Axis.Component> components, Map<Axis, Predicate<Fact>> filters) {\n\t\t\tthis.timetag = timetag;\n\t\t\tthis.components = components;\n\t\t\tthis.filters = filters;\n\t\t}\n\n\t\tpublic void append(Fact fact) {\n\t\t\t")).output(expression().output(placeholder("indicator", "sum").multiple("\n"))).output(literal("\n\t\t\tif(lastID != fact.id()) {\n\t\t\t\t")).output(expression().output(placeholder("index", "append"))).output(literal("\n\t\t\t\t++aggregationDistinct;\n\t\t\t\tlastID = fact.id();\n\t\t\t}\n\t\t\t++aggregationTotal;\n\t\t}\n\n\t\tpublic void append(AbstractAggregation aggregation) {\n\t\t\t")).output(expression().output(placeholder("indicator", "sumAggregation").multiple("\n"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("customIndicator", "sumAggregation").multiple("\n"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("index", "append2"))).output(literal("\n\t\t\taggregationDistinct = Math.max(aggregationDistinct, aggregation.aggregationDistinct);\n\t\t\taggregationTotal += aggregation.aggregationTotal();\n\t\t}\n\n\t\tpublic Aggregation append(long ids) {\n\t\t\tthis.total")).output(placeholder("name", "FirstUpperCase")).output(literal(" += ids;\n\t\t\treturn (Aggregation) this;\n\t\t}\n\n\t\tpublic long aggregationTotal() {\n\t\t\treturn aggregationTotal;\n\t\t}\n\n\t\tpublic long aggregationDistinct() {\n\t\t\treturn aggregationDistinct;\n\t\t}\n\n\t\tpublic long total")).output(placeholder("name", "FirstUpperCase")).output(literal("() {\n\t\t\treturn total")).output(placeholder("name", "FirstUpperCase")).output(literal(";\n\t\t}\n\n\t\t")).output(expression().output(placeholder("index", "getter"))).output(literal("\n\n\t\tpublic Timetag timetag() {\n\t\t\treturn timetag;\n\t\t}\n\n\t\tpublic List<Axis.Component> components() {\n\t\t\treturn components;\n\t\t}\n\n\t\t")).output(expression().output(placeholder("indicator", "getter").multiple("\n\n"))).output(literal("\n\n\t\t")).output(expression().output(placeholder("customIndicator", "getter").multiple("\n\n"))).output(literal("\n\n\t\tpublic Number indicator(Indicator indicator) {\n\t\t\tswitch(indicator) {\n\t\t\t\t")).output(expression().output(placeholder("indicator", "switchCase").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("customIndicator", "switchCase").multiple("\n"))).output(literal("\n\t\t\t\tcase Total: return aggregationTotal;\n\t\t\t\tcase Distinct: return aggregationDistinct;\n\t\t\t}\n\t\t\treturn 0L;\n\t\t}\n\n\t\t@Override\n\t\tpublic String toString() {\n\t\t\treturn \"")).output(placeholder("name", "FirstUpperCase")).output(literal(".Aggregation{\"\n\t\t\t\t+ \"total=\" + aggregationTotal\n\t\t\t\t+ \", distincts=\" + aggregationDistinct\n\t\t\t\t")).output(expression().output(placeholder("index", "toString").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("indicator", "toString").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("customIndicator", "toString").multiple("\n"))).output(literal("\n\t\t\t\t+ \"}\";\n\t\t}\n\t}\n\n\tpublic static class Loader implements Iterable<Fact> {\n\n\t\tprivate final StatefulIterator<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact> ids;\n\t\tprivate final List<Axis> axes = new ArrayList<>();\n\t\tprivate long[] totals;\n\t\tprivate final List<Predicate<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact>> filters = new ArrayList<>();\n\t\tprivate final List<Function<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact, Axis.Component>> groupsBy = new ArrayList<>();\n\t\tprotected final Datasource datasource;\n\t\t")).output(expression().output(placeholder("split", "field"))).output(literal("\n\n\t\tpublic Loader(Datasource datasource")).output(expression().output(literal(", ")).output(placeholder("split", "parameter"))).output(literal(") {\n\t\t\tthis.datasource = datasource;\n\t\t\t")).output(expression().output(placeholder("split", "assign"))).output(literal("\n\t\t\tthis.ids = StatefulIterator.of(new ")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Loader(new ")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)")).output(expression().output(literal(", ")).output(placeholder("split", "name"))).output(literal(").iterator());\n\t\t}\n\n\t\t@Override\n\t\tpublic Iterator<Fact> iterator() {\n\t\t\tif(!ids.hasNext()) return Stream.<Fact>empty().iterator();\n\t\t\tStatefulIterator<")).output(placeholder("mainCube", "FirstUpperCase")).output(literal(".Fact> facts = StatefulIterator.of(new ")).output(placeholder("mainCube", "FirstUpperCase")).output(literal(".Loader(new ")).output(placeholder("mainCube", "FirstUpperCase")).output(literal(".Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)")).output(expression().output(literal(", ")).output(placeholder("split", "name"))).output(literal(").iterator());\n\t\t\tids.next();\n\t\t\tprocess(ids.current());\n\t\t\treturn StreamSupport.stream(Spliterators.spliteratorUnknownSize(facts, Spliterator.SORTED), false)\n\t\t\t\t\t.map(f -> {\n\t\t\t\t\t\tfinal long mainID = ")).output(placeholder("name", "FirstUpperCase")).output(literal(".idOf(facts.current());\n\t\t\t\t\t\twhile (ids.current() != null && ids.current().id() < mainID) {\n\t\t\t\t\t\t\tids.next();\n\t\t\t\t\t\t\tprocess(ids.current());\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!facts.hasNext()) end();\n\t\t\t\t\t\treturn new Fact(f, ids.current() != null && ids.current().id() == mainID ?\n\t\t\t\t\t\t\t\tids.current() : Abstract")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".NULL_FACT);\n\t\t\t\t\t})\n\t\t\t\t\t.iterator();\n\t\t}\n\n\t\tprivate void end() {\n\t\t\twhile (ids.hasNext()) {\n\t\t\t\tids.next();\n\t\t\t\tprocess(ids.current());\n\t\t\t}\n\t\t}\n\n\t\tpublic Timetag from() {\n\t\t\treturn datasource.from;\n\t\t}\n\n\t\tprivate int totalsSize() {\n\t\t\tint accumulator = 1;\n\t\t\tfor (Axis axis : axes) accumulator *= axis.getSize();\n\t\t\treturn accumulator;\n\t\t}\n\n\t\tprivate void process(")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact fact) {\n\t\t\tif (fact == null) return;\n\t\t\tif (totals == null) totals = new long[totalsSize()];\n\t\t\tfor (Predicate<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact> filter : filters) if (!filter.test(fact)) return;\n\t\t\tAxis.Component[] components = componentsOf(fact);\n\t\t\ttotals[indexOf(components)] += 1;\n\t\t}\n\n\t\tprivate int indexOf(Axis.Component[] components) {\n\t\t\tint index = 0;\n\t\t\tfor (int i = 0; i < components.length; i++) {\n\t\t\t\ti *= axes.get(i).getSize();\n\t\t\t\ti += components[i].index();\n\t\t\t}\n\t\t\treturn index;\n\t\t}\n\n\t\tprivate Axis.Component[] componentsOf(")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact item) {\n\t\t\tAxis.Component[] components = new Axis.Component[axes.size()];\n\t\t\tfor (int i = 0; i < components.length; i++) components[i] = groupsBy.get(i).apply(item);\n\t\t\treturn components;\n\t\t}\n\n\t\tprivate long totalOf(List<Axis.Component> categories) {\n\t\t\treturn totals[indexOf(categories.toArray(new Axis.Component[0]))];\n\t\t}\n\n\t\tpublic Loader filter(Predicate<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact> filter) {\n\t\t\tif (filter == null) return this;\n\t\t\tfilters.add(filter);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic Loader groupBy(Axis axis, Function<")).output(placeholder("joinCube", "FirstUpperCase")).output(literal(".Fact, Axis.Component> dimension) {\n\t\t\tif (dimension == null) return this;\n\t\t\taxes.add(axis);\n\t\t\tgroupsBy.add(dimension);\n\t\t\treturn this;\n\t\t}\n\n\t\tpublic List<Axis> axes() {\n\t\t\treturn axes;\n\t\t}\n\n\t\tpublic long[] totals() {\n\t\t\tif(totals == null) totals = new long[totalsSize()];\n\t\t\treturn totals;\n\t\t}\n\n\t\tpublic static class Datasource {\n\n\t\t\tprivate final File root;\n\t\t\tprivate final Timetag from;\n\t\t\tprivate final Timetag to;\n\n\t\t\tpublic Datasource(File root, Timetag from, Timetag to) {\n\t\t\t\tthis.root = root;\n\t\t\t\tthis.from = from;\n\t\t\t\tthis.to = to;\n\t\t\t}\n\n\t\t\tpublic Timetag from() {\n\t\t\t\treturn from;\n\t\t\t}\n\n\t\t\tpublic Timetag to() {\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}\n\t}\n}")));
		rules.add(rule().condition(all(allTypes("indicator"), trigger("enum"))).output(placeholder("fieldName", "PascalCase")).output(literal("(\"")).output(placeholder("label")).output(literal("\", \"")).output(placeholder("unit")).output(literal("\", Mode.")).output(placeholder("mode")).output(literal(", false)")));
		rules.add(rule().condition(all(allTypes("customIndicator"), trigger("enum"))).output(placeholder("fieldName", "PascalCase")).output(literal("(\"")).output(placeholder("label")).output(literal("\", \"")).output(placeholder("unit")).output(literal("\", Mode.")).output(placeholder("mode")).output(literal(", true)")));
		rules.add(rule().condition(all(allTypes("indicator"), trigger("switchcase"))).output(literal("case ")).output(placeholder("fieldName", "PascalCase")).output(literal(": return ")).output(placeholder("name", "CamelCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("customIndicator"), trigger("switchcase"))).output(literal("case ")).output(placeholder("fieldName", "PascalCase")).output(literal(": return ")).output(placeholder("name", "CamelCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("index"), trigger("field"))).output(literal("private final SparseLongList ids = new SparseLongList();")));
		rules.add(rule().condition(all(allTypes("index"), trigger("append"))).output(literal("ids.add(fact.id());")));
		rules.add(rule().condition(all(allTypes("index"), trigger("append2"))).output(literal("ids.addAll(aggregation.ids);")));
		rules.add(rule().condition(all(allTypes("index"), trigger("getter"))).output(literal("public List<Long> ids() {\n\treturn ids.asList();\n}")));
		rules.add(rule().condition(trigger("assignfact")).output(literal("this.")).output(placeholder("", "FirstLowerCase")).output(literal(" = ")).output(placeholder("", "FirstLowerCase")).output(literal(";")));
		rules.add(rule().condition(trigger("fieldfact")).output(literal("private final ")).output(placeholder("", "FirstUpperCase")).output(literal(".Fact ")).output(placeholder("", "FirstLowerCase")).output(literal(";")));
		rules.add(rule().condition(trigger("factparameter")).output(placeholder("", "FirstUpperCase")).output(literal(".Fact ")).output(placeholder("", "FirstLowerCase")));
		rules.add(rule().condition(trigger("nullfactparameter")).output(literal("Abstract")).output(placeholder("", "FirstUpperCase")).output(literal(".NULL_FACT")));
		rules.add(rule().condition(trigger("size")).output(placeholder("", "FirstLowerCase")).output(literal(".size()")));
		rules.add(rule().condition(trigger("nbits")).output(literal("NBits")));
		rules.add(rule().condition(all(allTypes("customFilter"), trigger("method"))).output(literal("public Abstract")).output(placeholder("cube", "firstUpperCase")).output(literal(" filter")).output(placeholder("name", "PascalCase")).output(literal("() {\n\tfilter = filter.and(")).output(placeholder("cube", "PascalCase")).output(literal("::")).output(placeholder("name", "CamelCase")).output(literal("Filter);\n\treturn this;\n}")));
		rules.add(rule().condition(all(allTypes("customFilter"), trigger("staticmethod"))).output(literal("public static boolean ")).output(placeholder("name", "CamelCase")).output(literal("Filter(Fact fact) {\n\treturn true;\n}")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("switchcasegroupby"))).output(literal("case ")).output(placeholder("axis", "PascalCase")).output(literal(".TITLE: return groupBy")).output(placeholder("name", "PascalCase")).output(literal("();")));
		rules.add(rule().condition(all(allTypes("dimension", "categorical"), trigger("switchcasefilter"))).output(literal("case ")).output(placeholder("axis", "PascalCase")).output(literal(".TITLE: return filter")).output(placeholder("name", "PascalCase")).output(literal("((Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component>) components);")));
		rules.add(rule().condition(all(allTypes("dimension", "continuous"), trigger("switchcasefilter"))).output(literal("case ")).output(placeholder("axis", "PascalCase")).output(literal(".TITLE: return filter")).output(placeholder("name", "PascalCase")).output(literal("((Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Range>) components);")));
		rules.add(rule().condition(all(allTypes("customDimension", "categorical"), trigger("staticmethod"))).output(literal("public static ")).output(placeholder("axis", "PascalCase")).output(literal(".Component ")).output(placeholder("name", "CamelCase")).output(literal("Function(Fact fact) {\n\t// TODO\n\treturn ")).output(placeholder("axis", "PascalCase")).output(literal(".NA;\n}")));
		rules.add(rule().condition(all(allTypes("customDimension", "continuous"), trigger("staticmethod"))).output(literal("public static ")).output(placeholder("axis", "PascalCase")).output(literal(".Range ")).output(placeholder("name", "CamelCase")).output(literal("Function(Fact fact) {\n\t// TODO\n\treturn ")).output(placeholder("axis", "PascalCase")).output(literal(".component(0);\n}")));
		rules.add(rule().condition(all(allTypes("dimension", "categorical"), trigger("method"))).output(literal("public Abstract")).output(placeholder("cube", "firstUpperCase")).output(literal(" filter")).output(placeholder("name", "PascalCase")).output(literal("(Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component> ")).output(placeholder("axis", "CamelCase")).output(literal(") {\n\tif(filters.containsKey(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return this;\n\tPredicate<Fact> f = v -> ")).output(placeholder("name", "CamelCase")).output(literal("Filter(v, ")).output(placeholder("axis", "CamelCase")).output(literal(");\n\tfilters.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), f);\n\tfilter = filter.and(f);\n\treturn this;\n}\n\npublic Abstract")).output(placeholder("cube", "FirstUpperCase")).output(literal(" groupBy")).output(placeholder("name", "PascalCase")).output(literal("() {\n\taxes.add(")).output(placeholder("axis", "PascalCase")).output(literal(".get());\n\tcomponents.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), new HashSet<>());\n\tgroupByList.add(v -> ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(v));\n\treturn this;\n}\n\npublic static boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(Fact fact, Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\treturn ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(".contains(")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(fact));\n}\n\npublic static ")).output(placeholder("axis", "PascalCase")).output(literal(".Component ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(Fact fact) {\n\treturn fact.")).output(placeholder("source", "CamelCase", "firstLowerCase")).output(literal("()")).output(expression().output(literal(".")).output(placeholder("child", "CamelCase", "firstLowerCase")).output(literal("()"))).output(literal(";\n}")));
		rules.add(rule().condition(all(allTypes("customDimension", "categorical"), trigger("method"))).output(literal("public Abstract")).output(placeholder("cube", "firstUpperCase")).output(literal(" filter")).output(placeholder("name", "PascalCase")).output(literal("(Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\tif(filters.containsKey(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return this;\n\tPredicate<Fact> f = v -> ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(v, ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(");\n\tfilters.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), f);\n\tfilter = filter.and(f);\n\treturn this;\n}\n\npublic Abstract")).output(placeholder("cube", "FirstUpperCase")).output(literal(" groupBy")).output(placeholder("name", "PascalCase")).output(literal("() {\n\taxes.add(")).output(placeholder("axis", "PascalCase")).output(literal(".get());\n\tcomponents.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), new HashSet<>());\n\tgroupByList.add(v -> ")).output(placeholder("cube", "firstUpperCase")).output(literal(".")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(v));\n\treturn this;\n}\n\npublic static boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(Fact fact, Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\treturn ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(".contains(")).output(placeholder("cube", "firstUpperCase")).output(literal(".")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(fact));\n}")));
		rules.add(rule().condition(all(allTypes("dimension", "continuous"), trigger("method"))).output(literal("public Abstract")).output(placeholder("cube", "firstUpperCase")).output(literal(" filter")).output(placeholder("name", "PascalCase")).output(literal("(Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Range> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\tif(filters.containsKey(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return this;\n\tPredicate<Fact> f = v -> ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(v, ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(");\n\tfilters.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), f);\n\tfilter = filter.and(f);\n\treturn this;\n}\n\npublic Abstract")).output(placeholder("cube", "FirstUpperCase")).output(literal(" groupBy")).output(placeholder("name", "PascalCase")).output(literal("() {\n\taxes.add(")).output(placeholder("axis", "PascalCase")).output(literal(".get());\n\tcomponents.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), new HashSet<>());\n\tgroupByList.add(")).output(placeholder("cube", "FirstUpperCase")).output(literal("::")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function);\n\treturn this;\n}\n\npublic static boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(Fact fact, Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Range> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\treturn ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(".contains(")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(fact));\n}\n\npublic static ")).output(placeholder("axis", "PascalCase")).output(literal(".Range ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(Fact fact) {\n\treturn ")).output(placeholder("axis", "PascalCase")).output(literal(".rangeOf(fact.")).output(placeholder("source", "firstLowerCase")).output(literal("());\n}")));
		rules.add(rule().condition(all(allTypes("customDimension", "continuous"), trigger("method"))).output(literal("public Abstract")).output(placeholder("cube", "firstUpperCase")).output(literal(" filter")).output(placeholder("name", "PascalCase")).output(literal("(Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Range> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\tif(filters.containsKey(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return this;\n\tPredicate<Fact> f = v -> ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(v, ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(");\n\tfilters.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), f);\n\tfilter = filter.and(f);\n\treturn this;\n}\n\npublic Abstract")).output(placeholder("cube", "FirstUpperCase")).output(literal(" groupBy")).output(placeholder("name", "PascalCase")).output(literal("() {\n\taxes.add(")).output(placeholder("axis", "PascalCase")).output(literal(".get());\n\tcomponents.put(")).output(placeholder("axis", "PascalCase")).output(literal(".get(), new HashSet<>());\n\tgroupByList.add(")).output(placeholder("cube", "FirstUpperCase")).output(literal("::")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function);\n\treturn this;\n}\n\npublic static boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Filter(Fact fact, Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Range> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(") {\n\treturn ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal(".contains(")).output(placeholder("cube", "firstUpperCase")).output(literal(".")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("Function(fact));\n}")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("ifgroupby"))).output(literal("if(axis.equals(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return groupBy")).output(placeholder("name", "PascalCase")).output(literal("();")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("iffilterby"))).output(literal("if(axis.equals(")).output(placeholder("axis", "PascalCase")).output(literal(".get())) return filter")).output(placeholder("name", "PascalCase")).output(literal("();")));
		rules.add(rule().condition(all(allTypes("customIndicator"), trigger("tostring"))).output(literal(" + \", ")).output(placeholder("name", "firstLowerCase")).output(literal("=\" + ")).output(placeholder("name", "firstLowerCase")).output(literal("()")));
		rules.add(rule().condition(all(allTypes("indicator"), trigger("sum"))).output(placeholder("name", "firstLowerCase")).output(literal(" += fact.")).output(placeholder("source", "firstLowerCase")).output(literal("();")));
		rules.add(rule().condition(all(allTypes("indicator"), trigger("sumaggregation"))).output(placeholder("name", "firstLowerCase")).output(literal(" += aggregation.")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("customIndicator", "sum"), trigger("sumaggregation"))).output(literal("if(")).output(placeholder("name", "firstLowerCase")).output(literal(" != Long_NaN && aggregation.")).output(placeholder("name", "firstLowerCase")).output(literal(" != Long_NaN)\n\t")).output(placeholder("name", "firstLowerCase")).output(literal(" += aggregation.")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("customIndicator", "average"), trigger("sumaggregation"))).output(literal("if(!Double.isNaN(")).output(placeholder("name", "firstLowerCase")).output(literal(") && !Double.isNaN(aggregation.")).output(placeholder("name", "firstLowerCase")).output(literal("))\n\t")).output(placeholder("name", "firstLowerCase")).output(literal(" += aggregation.")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("customIndicator", "average"), trigger("field"))).output(literal("protected double ")).output(placeholder("name", "firstLowerCase")).output(literal(" = Double.NaN;")));
		rules.add(rule().condition(all(allTypes("indicator", "average"), trigger("field"))).output(literal("protected double ")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("indicator", "sum"), trigger("field"))).output(literal("protected long ")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("customIndicator", "sum"), trigger("field"))).output(literal("protected long ")).output(placeholder("name", "firstLowerCase")).output(literal(" = Long_NaN;")));
		rules.add(rule().condition(all(allTypes("indicator", "average"), trigger("getter"))).output(literal("public double ")).output(placeholder("name", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("name", "firstLowerCase")).output(literal(" / (double) aggregationDistinct;\n}")));
		rules.add(rule().condition(all(allTypes("customIndicator", "average"), trigger("getter"))).output(literal("public final double ")).output(placeholder("name", "firstLowerCase")).output(literal("() {\n\tif(Double.isNaN(")).output(placeholder("name", "firstLowerCase")).output(literal("))\n\t\t")).output(placeholder("name", "firstLowerCase")).output(literal(" = calculate")).output(placeholder("name", "firstUpperCase")).output(literal("();\n\treturn ")).output(placeholder("name", "firstLowerCase")).output(literal(";\n}\n\nprotected double calculate")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n\treturn 0.0;\n}")));
		rules.add(rule().condition(all(allTypes("indicator", "sum"), trigger("getter"))).output(literal("public long ")).output(placeholder("name", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("name", "firstLowerCase")).output(literal(";\n}")));
		rules.add(rule().condition(all(allTypes("customIndicator", "sum"), trigger("getter"))).output(literal("public final long ")).output(placeholder("name", "firstLowerCase")).output(literal("() {\n\tif(")).output(placeholder("name", "firstLowerCase")).output(literal(" == Long_NaN)\n\t\t")).output(placeholder("name", "firstLowerCase")).output(literal(" = calculate")).output(placeholder("name", "firstUpperCase")).output(literal("();\n\treturn ")).output(placeholder("name", "firstLowerCase")).output(literal(";\n}\n\nprotected long calculate")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n\treturn 0L;\n}")));
		rules.add(rule().condition(all(allTypes("index"), trigger("index"))).output(literal("ids.size()")));
		rules.add(rule().condition(all(allTypes("indicator", "average"), trigger("staticmethod"))).output(literal("public static double ")).output(placeholder("name")).output(literal("(Fact fact) {\n\treturn 0.0;\n}")));
		rules.add(rule().condition(all(allTypes("indicator", "sum"), trigger("staticmethod"))).output(literal("public static long ")).output(placeholder("name")).output(literal("(Fact fact) {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("split"), trigger("parameter"))).output(literal("String ")).output(placeholder("name", "firstLowerCase")));
		rules.add(rule().condition(all(allTypes("split"), trigger("setparameter"))).output(literal("java.util.Set<String> ")).output(placeholder("name", "firstLowerCase")));
		rules.add(rule().condition(all(allTypes("split"), trigger("assign"))).output(literal("this.")).output(placeholder("name", "firstLowerCase")).output(literal(" = ")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("split"), trigger("name"))).output(placeholder("name", "firstLowerCase")));
		rules.add(rule().condition(all(allTypes("split"), trigger("nameupper"))).output(placeholder("name", "firstUpperCase")));
		rules.add(rule().condition(all(allTypes("split"), trigger("field"))).output(literal("protected final String ")).output(placeholder("name", "firstLowerCase")).output(literal(";")));
		rules.add(rule().condition(all(allTypes("split"), trigger("method"))).output(literal("private static Set<String> all")).output(placeholder("name", "FirstUpperCase")).output(literal("() {\n\treturn java.util.Set.of(")).output(placeholder("value", "quoted").multiple(", ")).output(literal(");\n}")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("getinstance"))).output(placeholder("axis", "PascalCase")).output(literal(".get()")));
		rules.add(rule().condition(trigger("dimension")).output(literal("public static Predicate<")).output(placeholder("cube", "FirstUpperCase")).output(literal(".Fact> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("(Set<")).output(placeholder("axis", "PascalCase")).output(literal(".Component> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("List) {\n\treturn r -> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("List.contains(r.")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("());\n}\n\npublic static Function<")).output(placeholder("cube", "FirstUpperCase")).output(literal(".Fact, String> ")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn r -> r.")).output(placeholder("axis", "CamelCase", "firstLowerCase")).output(literal("().id();\n}")));
		rules.add(rule().condition(all(allTypes("column", "int", "unsigned"), trigger("factgetter"))).output(literal("public long ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "int"), trigger("factgetter"))).output(literal("public int ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "float"), trigger("factgetter"))).output(literal("public float ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "double"), trigger("factgetter"))).output(literal("public double ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), any(allTypes("id"), allTypes("long"))), trigger("factgetter"))).output(literal("public long ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), allTypes("byte", "unsigned")), trigger("factgetter"))).output(literal("public short ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), allTypes("byte")), trigger("factgetter"))).output(literal("public byte ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), allTypes("short", "unsigned")), trigger("factgetter"))).output(literal("public int ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), allTypes("short")), trigger("factgetter"))).output(literal("public short ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), allTypes("boolean")), trigger("factgetter"))).output(literal("public boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "categorical"), trigger("factgetter"))).output(literal("public ")).output(placeholder("type", "firstUpperCase")).output(literal(".Component ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column"), trigger("factgetter"))).output(literal("public ")).output(placeholder("type", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "virtual"), trigger("factgetter"))).output(literal("public ")).output(placeholder("type")).output(literal(" ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube", "firstLowerCase")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("column", "categorical"), trigger("nullgetter"))).output(literal("public ")).output(placeholder("type", "firstUpperCase")).output(literal(".Component ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("type", "firstUpperCase")).output(literal(".NA;\n}")));
		rules.add(rule().condition(all(allTypes("column", "int", "unsigned"), trigger("nullgetter"))).output(literal("public long ")).output(placeholder("name", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("column", "int"), trigger("nullgetter"))).output(literal("public int ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(all(allTypes("column"), any(allTypes("id"), allTypes("long"))), trigger("nullgetter"))).output(literal("public long ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0L;\n}")));
		rules.add(rule().condition(all(allTypes("column", "short", "unsigned"), trigger("nullgetter"))).output(literal("public int ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("column", "short"), trigger("nullgetter"))).output(literal("public short ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("column", "byte", "unsigned"), trigger("nullgetter"))).output(literal("public short ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("column", "byte"), trigger("nullgetter"))).output(literal("public byte ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("column", "float"), trigger("nullgetter"))).output(literal("public float ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0.0f;\n}")));
		rules.add(rule().condition(all(allTypes("column", "double"), trigger("nullgetter"))).output(literal("public double ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn 0.0f;\n}")));
		rules.add(rule().condition(all(allTypes("column", "boolean"), trigger("nullgetter"))).output(literal("public boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn false;\n}")));
		rules.add(rule().condition(all(allTypes("column", "boolean"), trigger("nullgetter"))).output(literal("public boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn false;\n}")));
		rules.add(rule().condition(all(allTypes("column", "boolean"), trigger("nullgetter"))).output(literal("public boolean ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn false;\n}")));
		rules.add(rule().condition(all(allTypes("virtualColumn", "primitive"), trigger("factgetter"))).output(literal("public ")).output(placeholder("type", "firstLowerCase")).output(literal(" ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("virtualColumn"), trigger("factgetter"))).output(literal("public ")).output(placeholder("type", "firstUpperCase")).output(literal(" ")).output(placeholder("name", "CamelCase", "firstLowerCase")).output(literal("() {\n\treturn ")).output(placeholder("cube")).output(literal(".")).output(placeholder("name", "firstLowerCase")).output(literal("();\n}")));
		rules.add(rule().condition(all(allTypes("customIndicator", "sum"), trigger("implementation"))).output(literal("@Override\nprotected long calculate")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n\t// TODO: calculate and return ")).output(placeholder("name", "firstLowerCase")).output(literal("\n\treturn 0;\n}")));
		rules.add(rule().condition(all(allTypes("customIndicator", "average"), trigger("implementation"))).output(literal("@Override\nprotected double calculate")).output(placeholder("name", "firstUpperCase")).output(literal("() {\n\t// TODO: calculate and return ")).output(placeholder("name", "firstLowerCase")).output(literal("\n\treturn 0.0;\n}")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}