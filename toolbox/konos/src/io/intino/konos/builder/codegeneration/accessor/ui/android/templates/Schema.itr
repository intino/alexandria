rule type(root)
	package $package+ValidPackage;

	import $root.*;
    import kotlinx.serialization.Serializable

    @Serializable
	$schema

rule trigger(schema)
    <<$inner>>
	open class $name+firstUpperCase <<: $parent()>> {

		$attribute+declaration...[$NL]

		$attribute+getter...[$NL$NL]

		$attribute+setter...[$NL$NL]

        companion object {
            fun empty(): $name+firstUpperCase {
                val result = $name+firstUpperCase()
		        $attribute+init...[$NL$NL]
                return result
            }
        }

		<<$schema...[$NL$NL]>>
	}

rule type(word, single) and trigger(declaration)
    private lateinit var $name+FirstLowerCase : $type+FirstUpperCase

	enum class $name+FirstUpperCase {
		$words...[, ]
	}


rule type(word, list) and trigger(declaration)
	private var $name+FirstLowerCase : List<$type+FirstUpperCase> = arrayListOf()

	enum class $name+FirstUpperCase {
		$words...[, ]
	}


rule type(primitive, single) and trigger(declaration)
	$typeFrame+serialization private<< $lateInit~lateinit>> var $name+firstLowerCase : $typeFrame<< = $defaultValue>>

rule not type(primitive) and type(single) and trigger(declaration)
	private<< $lateInit~lateinit>> var $name+firstLowerCase : $type+firstUpperCase<< = $defaultValue>>

rule type(map) and trigger(declaration)
	private var $name+firstLowerCase : Map<$key+renderMapType, $value+renderMapType> = mapOf()

rule type(list) and (type(object) or type(schema)) and trigger(declaration)
	private var $name+firstLowerCase : List<$type+firstUpperCase> = arrayListOf()

rule type(list) and trigger(declaration)
	private var $name+firstLowerCase : List<$type> = arrayListOf()

rule type(word, single) and trigger(getter)
	fun $name+CamelCase() : $type+FirstUpperCase {
		return $name+FirstLowerCase
	}

rule type(word, list) and trigger(getter)
	fun $name+CamelCase() : List<$type+FirstUpperCase> {
		return $name+FirstLowerCase
	}

rule type(primitive, single) and trigger(getter)
	fun $name+CamelCase() : $typeFrame {
		return this.$name+firstLowerCase
	}

rule not type(primitive) and type(single) and trigger(getter)
	fun $name+CamelCase() : $type+firstUpperCase {
		return this.$name+firstLowerCase
	}

rule type(list, schema) and trigger(getter)
	fun $name+CamelCase~List() : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase
	}

	fun $name+firstLowerCase~List(predicate : java.util.function.Predicate<$type+firstUpperCase>) : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase.stream().filter(predicate).toList()
	}

	fun $name+firstLowerCase(predicate : java.util.function.Predicate<$type+firstUpperCase>) : $type+firstUpperCase {
		return this.$name+firstLowerCase.stream().filter(predicate).findFirst().orElse(null)
	}

rule type(list, object) and trigger(getter)
	fun $name+CamelCase() : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase
	}

rule type(list) and trigger(getter)
	fun $name+CamelCase() : List<$type> {
		return this.$name+firstLowerCase
	}

rule type(map) and trigger(getter)
	fun $name+firstLowerCase() : Map<$key+renderMapType, $value+renderMapType> {
		return this.$name+firstLowerCase
	}

rule type(map) and trigger(setter)
	fun $name+firstLowerCase($name+firstLowerCase : Map<$key+renderMapType, $value+renderMapType>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+firstLowerCase
		return this
	}

rule type(list) and trigger(renderMapType)
	List<$type+firstUpperCase>

rule trigger(renderMapType)
	$type+firstUpperCase

rule type(word, single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $type+FirstUpperCase) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule type(word, list) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : List<$type+FirstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule type(primitive, single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $typeFrame) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule not type(primitive) and type(single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $type+firstUpperCase) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase;
		return this
	}

rule type(list, object) and trigger(setter)
	fun $name+firstLowerCase($name+CamelCase : List<$type+firstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule type(list, schema) and trigger(setter)
	fun $name+CamelCase~List($name+CamelCase : List<$type+firstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule type(list) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : List<$type>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}

rule type(list) and trigger(init)
    result.$name+firstLowerCase = emptyList();

rule type(single, object) and trigger(init)
    result.$name+firstLowerCase = $type+PascalCase.empty()

rule type(single) and trigger(init)
    result.$name+firstLowerCase = $typeFrame+empty

rule type(typeFrame, datetime) and trigger(empty)
    null!!

rule type(typeFrame, date) and trigger(empty)
    null!!

rule type(typeFrame, real) and trigger(empty)
    null!!

rule type(typeFrame, boolean) and trigger(empty)
    false

rule type(typeFrame, integer) and trigger(empty)
    null!!

rule type(typeFrame, longinteger) and trigger(empty)
    null!!

rule type(typeFrame, word) and trigger(empty)
    null!!

rule type(typeFrame) and trigger(empty)
    ""

rule type(typeFrame, datetime) and trigger(serialization)
    @Serializable(with = io.intino.alexandria.mobile.util.InstantSerializer::class)

rule type(typeFrame) and trigger(serialization)

rule type(typeFrame, datetime)
    kotlinx.datetime.Instant

rule type(typeFrame, date)
    kotlinx.datetime.Instant

rule type(typeFrame, real)
    Double

rule type(typeFrame, integer)
    Int

rule type(typeFrame, longinteger)
    Long

rule type(typeFrame)
    $value

rule trigger(inner)
    @kotlinx.serialization.Serializable
