def type(root)
	package $package+ValidPackage;

	import $root.*;
    import kotlinx.serialization.Serializable

    @Serializable
	$schema
end

def trigger(schema)
    <<$inner>>
	open class $name+firstUpperCase <<: $parent()>> {

		$attribute+declaration...[$NL]

		$attribute+getter...[$NL$NL]

		$attribute+setter...[$NL$NL]

        companion object {
            fun empty(): $name+firstUpperCase {
                val result = $name+firstUpperCase()
		        $attribute+init...[$NL$NL]
                return result
            }
        }

		<<$schema...[$NL$NL]>>
	}
end

def type(word, single) and trigger(declaration)
    private lateinit var $name+FirstLowerCase : $type+FirstUpperCase

	enum class $name+FirstUpperCase {
		$words...[, ]
	}

end

def type(word, list) and trigger(declaration)
	private var $name+FirstLowerCase : List<$type+FirstUpperCase> = arrayListOf()

	enum class $name+FirstUpperCase {
		$words...[, ]
	}

end

def type(primitive, single) and trigger(declaration)
	private<< $lateInit~lateinit>> var $name+firstLowerCase : $typeFrame<< = $defaultValue>>
end

def not type(primitive) and type(single) and trigger(declaration)
	private<< $lateInit~lateinit>> var $name+firstLowerCase : $type+firstUpperCase<< = $defaultValue>>
end

def type(map) and trigger(declaration)
	private var $name+firstLowerCase : Map<$key+renderMapType, $value+renderMapType> = mapOf()
end

def type(list) and (type(object) or type(schema)) and trigger(declaration)
	private var $name+firstLowerCase : List<$type+firstUpperCase> = arrayListOf()
end

def type(list) and trigger(declaration)
	private var $name+firstLowerCase : List<$type> = arrayListOf()
end

def type(word, single) and trigger(getter)
	fun $name+CamelCase() : $type+FirstUpperCase {
		return $name+FirstLowerCase
	}
end

def type(word, list) and trigger(getter)
	fun $name+CamelCase() : List<$type+FirstUpperCase> {
		return $name+FirstLowerCase
	}
end

def type(primitive, single) and trigger(getter)
	fun $name+CamelCase() : $typeFrame {
		return this.$name+firstLowerCase
	}
end

def not type(primitive) and type(single) and trigger(getter)
	fun $name+CamelCase() : $type+firstUpperCase {
		return this.$name+firstLowerCase
	}
end

def type(list, schema) and trigger(getter)
	fun $name+CamelCase~List() : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase
	}

	fun $name+firstLowerCase~List(predicate : java.util.function.Predicate<$type+firstUpperCase>) : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase.stream().filter(predicate).toList()
	}

	fun $name+firstLowerCase(predicate : java.util.function.Predicate<$type+firstUpperCase>) : $type+firstUpperCase {
		return this.$name+firstLowerCase.stream().filter(predicate).findFirst().orElse(null)
	}
end

def type(list, object) and trigger(getter)
	fun $name+CamelCase() : List<$type+firstUpperCase> {
		return this.$name+firstLowerCase
	}
end

def type(list) and trigger(getter)
	fun $name+CamelCase() : List<$type> {
		return this.$name+firstLowerCase
	}
end

def type(map) and trigger(getter)
	fun $name+firstLowerCase() : Map<$key+renderMapType, $value+renderMapType> {
		return this.$name+firstLowerCase
	}
end

def type(map) and trigger(setter)
	fun $name+firstLowerCase($name+firstLowerCase : Map<$key+renderMapType, $value+renderMapType>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+firstLowerCase
		return this
	}
end

def type(list) and trigger(renderMapType)
	List<$type+firstUpperCase>
end

def trigger(renderMapType)
	$type+firstUpperCase
end

def type(word, single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $type+FirstUpperCase) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def type(word, list) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : List<$type+FirstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def type(primitive, single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $typeFrame) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def not type(primitive) and type(single) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : $type+firstUpperCase) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase;
		return this
	}
end

def type(list, object) and trigger(setter)
	fun $name+firstLowerCase($name+CamelCase : List<$type+firstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def type(list, schema) and trigger(setter)
	fun $name+CamelCase~List($name+CamelCase : List<$type+firstUpperCase>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def type(list) and trigger(setter)
	fun $name+CamelCase($name+CamelCase : List<$type>) : $element+firstUpperCase {
		this.$name+firstLowerCase = $name+CamelCase
		return this
	}
end

def type(list) and trigger(init)
    result.$name+firstLowerCase = emptyList();
end

def type(single, object) and trigger(init)
    result.$name+firstLowerCase = $type+PascalCase.empty()
end

def type(single) and trigger(init)
    result.$name+firstLowerCase = $typeFrame+empty
end

def type(typeFrame, datetime) and trigger(empty)
    null!!
end

def type(typeFrame, date) and trigger(empty)
    null!!
end

def type(typeFrame, real) and trigger(empty)
    null!!
end

def type(typeFrame, boolean) and trigger(empty)
    false
end

def type(typeFrame, integer) and trigger(empty)
    null!!
end

def type(typeFrame, longinteger) and trigger(empty)
    null!!
end

def type(typeFrame, word) and trigger(empty)
    null!!
end

def type(typeFrame) and trigger(empty)
    ""
end

def type(typeFrame, datetime)
    kotlinx.datetime.Instant
end

def type(typeFrame, date)
    kotlinx.datetime.Instant
end

def type(typeFrame, real)
    Double
end

def type(typeFrame, integer)
    Int
end

def type(typeFrame, longinteger)
    Long
end

def type(typeFrame)
    $value
end

def trigger(inner)
    @kotlinx.serialization.Serializable
end