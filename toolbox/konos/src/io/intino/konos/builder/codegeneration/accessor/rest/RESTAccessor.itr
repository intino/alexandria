def type(accessor)
	package $package+ValidPackage;

	import java.util.List;
	import java.util.Map;
	import java.util.Set;
	import java.util.HashSet;
	import java.util.HashMap;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.net.URL;
	import java.lang.reflect.Type;
	import com.google.gson.JsonSerializer;
	import com.google.gson.JsonDeserializer;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.restaccessor.RequestBuilder;
	import io.intino.alexandria.restaccessor.core.RestAccessorNotifier;
	import io.intino.alexandria.restaccessor.exceptions.RestfulFailure;

	$schemaImport

	public class $name+pascalCase~Accessor {
		private final URL url;
		private final RestAccessorNotifier notifier = new RestAccessorNotifier();
		private int timeoutMillis = 120 * 1_000;
		private io.intino.alexandria.restaccessor.OutBox outBox = null;
		private Map<String, String> additionalHeaders = new HashMap<>();
		$authentication+field
		$enumParameter...[$NL$NL]

		public $name+pascalCase~Accessor(URL url<<, $authentication+parameter>>) {
			this.url = url;
			$authentication+assign
		}

		public $name+pascalCase~Accessor(URL url, int timeoutMillis<<, $authentication+parameter>>) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			$authentication+assign
		}

		public $name+pascalCase~Accessor(URL url, int timeoutMillis, java.io.File outBoxDirectory, int intervalRetrySeconds<<, $authentication+parameter>>) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			this.outBox = new io.intino.alexandria.restaccessor.OutBox(outBoxDirectory, intervalRetrySeconds);
			$authentication+assign
		}

		public void addCommonHeader(String name, String value) {
			additionalHeaders.put(name, value);
		}

		public void addRequestSerializer(Type type, JsonSerializer<?> adapter) {
			io.intino.alexandria.restaccessor.adapters.RequestAdapter.addCustomAdapter(type, adapter);
		}

		public void addResponseDeserializer(Type type, JsonDeserializer<?> adapter) {
			io.intino.alexandria.restaccessor.adapters.ResponseAdapter.addCustomAdapter(type, adapter);
		}

		$resource...[$NL$NL]

		$notification...[$NL$NL]
	}
end

def type(resource)
	public $response $method+firstLowerCase~$name+PascalCase($parameter+signature...[, ]) $exceptionResponses+declaration {
		RequestBuilder builder = new RequestBuilder(this.url).timeOut(this.timeoutMillis);
		additionalHeaders.forEach((k,v) -> builder.headerParameter(k,v));
		RequestBuilder.Request request = builder
			<<.$auth>>
			<<.$parameter...[$NL.]>>
			.build(RequestBuilder.Method.$method+upperCase, $path);
		try {
			io.intino.alexandria.restaccessor.Response response = request.execute();
			<<$response+return>>
		} catch (AlexandriaException e) {
			$exceptionResponses+throws
			if (outBox != null) outBox.push(request);
			throw new InternalServerError(e.message());
		}
	}
end

def type(parameter, query, word) and trigger(parameter)
	queryParameter("$name", $name+CamelCase.name())
end

def type(parameter, query) and trigger(parameter)
	queryParameter("$name", $name+CamelCase)
end

def type(parameter, header, word) and trigger(parameter)
	headerParameter("$name", $name+CamelCase.name())
end

def type(parameter, header) and trigger(parameter)
	headerParameter("$name", $name+CamelCase)
end

def not type(file) and type(parameter, body) and trigger(parameter)
	entityPart("$name", $name+CamelCase)
end

def not type(file) and type(parameter, form) and trigger(parameter)
	entityPart("$name", $name+CamelCase)
end

def type(file) and type(parameter) and trigger(parameter)
	entityPart($name+CamelCase)
end

def trigger(enumParameter)
	public enum $class+PascalCase {
		$value...[, ]
	}
end

def type(list) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), new com.google.gson.reflect.TypeToken<Array$value>(){}.getType());
end

def type(set) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), new com.google.gson.reflect.TypeToken<Hash$value>(){}.getType());
end

def type(file) and trigger(return)
	String filename = !response.headers().containsKey("Content-Disposition") ? "filename=content":
		Arrays.stream(response.headers().get("Content-Disposition").split(";")).filter(c-> c.startsWith("filename")).findFirst().orElse(null);
	return new io.intino.alexandria.Resource(filename.split("=")[1], response.contentType(), response.contentAsStream());
end

def not type(list) and not attribute(value, void) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), $value.class);
end

def trigger(return)
end

def trigger(response)
	$value
end

def type(notification)
	public void listen$name+PascalCase(<<$parameter+signature...[, ], >>java.util.function.Consumer<String> listener) throws InternalServerError {
		RequestBuilder.Request request = new RequestBuilder(this.url).timeOut(this.timeoutMillis)
			<<.$auth>>
			<<.$parameter...[.]>>
			.build(RequestBuilder.Method.POST, "$path");
		try {
			this.notifier.listen(listener, request.execute().content().trim());
		} catch (AlexandriaException e) {
			throw new InternalServerError(e.message());
		}
	}

	public void stopListen$name+PascalCase() {
		this.notifier.close();
	}
end

def type(basic) and trigger(auth)
	basicAuth(this.user, this.pasword)
end

def type(bearer) and trigger(auth)
	bearerAuth(this.token)
end

def type(authentication, basic) and trigger(parameter)
	String user, String password
end

def type(authentication, bearer) and trigger(parameter)
	String token
end

def type(authentication, withCertificate) and trigger(parameter)
	URL certificate
end

def type(authentication, withCertificate) and trigger(assign)
	this.certificate = certificate;
end

def type(authentication, basic) and trigger(assign)
	this.user = user;
	this.password = password;
end

def type(authentication, bearer) and trigger(assign)
	this.token = token;
end

def type(authentication, withCertificate) and trigger(assign)
	this.certificate = certificate;
end

def type(authentication) and type(basic) and trigger(field)
	private final String user;
	private final String password;
end

def type(authentication) and type(bearer) and trigger(field)
	private final String token;
end

def type(authentication, withCertificate) and trigger(field)
	private final URL certificate;
end

def type(parameter) and trigger(signature)
	$parameterType $name+CamelCase
end

def type(exceptionResponses) and trigger(throws)
	$exceptionResponse+throws...[$NLelse ]
end

def type(exceptionResponse) and trigger(throws)
	if (e instanceof $exceptionName) throw (($exceptionName) e);
end

def type(exceptionResponses) and trigger(declaration)
	throws <<$exceptionResponse+declaration...[, ],>> InternalServerError
end

def type(exceptionResponse) and trigger(declaration)
	$exceptionName
end

def type(schemaImport) and trigger(schemaImport)
	import $package.schemas.*;
end