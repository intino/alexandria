rule type(accessor)
	package $package+ValidPackage;

	import java.util.List;
	import java.util.Map;
	import java.util.Set;
	import java.util.HashSet;
	import java.util.HashMap;
	import java.util.ArrayList;
	import java.util.Arrays;
	import java.net.URL;
	import java.lang.reflect.Type;
	import com.google.gson.JsonSerializer;
	import com.google.gson.JsonDeserializer;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.restaccessor.RequestBuilder;
	import io.intino.alexandria.restaccessor.core.RestAccessorNotifier;
	import io.intino.alexandria.restaccessor.exceptions.RestfulFailure;

	$schemaImport

	public class $name+pascalCase~Accessor {
		private final URL url;
		private final RestAccessorNotifier notifier = new RestAccessorNotifier();
		private int timeoutMillis = 120 * 1_000;
		private io.intino.alexandria.restaccessor.OutBox outBox = null;
		private Map<String, String> additionalHeaders = new HashMap<>();
		$authentication+field
		$enumParameter...[$NL$NL]

		public $name+pascalCase~Accessor(URL url<<, $authentication+parameter>>) {
			this.url = url;
			$authentication+assign
		}

		public $name+pascalCase~Accessor(URL url, int timeoutMillis<<, $authentication+parameter>>) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			$authentication+assign
		}

		public $name+pascalCase~Accessor(URL url, int timeoutMillis, java.io.File outBoxDirectory, int intervalRetrySeconds<<, $authentication+parameter>>) {
			this.url = url;
			this.timeoutMillis = timeoutMillis;
			this.outBox = new io.intino.alexandria.restaccessor.OutBox(outBoxDirectory, intervalRetrySeconds);
			$authentication+assign
		}

		public void addCommonHeader(String name, String value) {
			additionalHeaders.put(name, value);
		}

		public void addRequestSerializer(Type type, JsonSerializer<?> adapter) {
			io.intino.alexandria.restaccessor.adapters.RequestAdapter.addCustomAdapter(type, adapter);
		}

		public void addResponseDeserializer(Type type, JsonDeserializer<?> adapter) {
			io.intino.alexandria.restaccessor.adapters.ResponseAdapter.addCustomAdapter(type, adapter);
		}

		$resource...[$NL$NL]

		$notification...[$NL$NL]
	}

rule type(resource)
	public $response $method+firstLowerCase~$name+PascalCase($parameter+signature...[, ]) $exceptionResponses+declaration {
		RequestBuilder builder = new RequestBuilder(this.url).timeOut(this.timeoutMillis);
		additionalHeaders.forEach((k,v) -> builder.headerParameter(k,v));
		RequestBuilder.Request request = builder
			<<.$auth>>
			<<.$parameter...[$NL.]>>
			.build(RequestBuilder.Method.$method+upperCase, $path);
		try {
			io.intino.alexandria.restaccessor.Response response = request.execute();
			<<$response+return>>
		} catch (AlexandriaException e) {
			$exceptionResponses+throws
			if (outBox != null) outBox.push(request);
			throw new InternalServerError(e.message());
		}
	}

rule type(parameter, query, word) and trigger(parameter)
	queryParameter("$name", $name+CamelCase.name())

rule type(parameter, query) and trigger(parameter)
	queryParameter("$name", $name+CamelCase)

rule type(parameter, header, word) and trigger(parameter)
	headerParameter("$name", $name+CamelCase.name())

rule type(parameter, header) and trigger(parameter)
	headerParameter("$name", $name+CamelCase)

rule not type(file) and type(parameter, body) and trigger(parameter)
	entityPart("$name", $name+CamelCase)

rule not type(file) and type(parameter, form) and trigger(parameter)
	entityPart("$name", $name+CamelCase)

rule type(file) and type(parameter) and trigger(parameter)
	entityPart($name+CamelCase)

rule trigger(enumParameter)
	public enum $class+PascalCase {
		$value...[, ]
	}

rule type(list) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), new com.google.gson.reflect.TypeToken<Array$value>(){}.getType());

rule type(set) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), new com.google.gson.reflect.TypeToken<Hash$value>(){}.getType());

rule type(file) and trigger(return)
	String filename = !response.headers().containsKey("Content-Disposition") ? "filename=content":
		Arrays.stream(response.headers().get("Content-Disposition").split(";")).filter(c-> c.startsWith("filename")).findFirst().orElse(null);
	return new io.intino.alexandria.Resource(filename.split("=")[1], response.contentType(), response.contentAsStream());

rule not type(list) and not attribute(value, void) and trigger(return)
	return io.intino.alexandria.restaccessor.adapters.ResponseAdapter.adapt(response.content(), $value.class);

rule trigger(return)

rule trigger(response)
	$value

rule type(notification)
	public void listen$name+PascalCase(<<$parameter+signature...[, ], >>java.util.function.Consumer<String> listener) throws InternalServerError {
		RequestBuilder.Request request = new RequestBuilder(this.url).timeOut(this.timeoutMillis)
			<<.$auth>>
			<<.$parameter...[.]>>
			.build(RequestBuilder.Method.POST, "$path");
		try {
			this.notifier.listen(listener, request.execute().content().trim());
		} catch (AlexandriaException e) {
			throw new InternalServerError(e.message());
		}
	}

	public void stopListen$name+PascalCase() {
		this.notifier.close();
	}

rule type(basic) and trigger(auth)
	basicAuth(this.user, this.pasword)

rule type(bearer) and trigger(auth)
	bearerAuth(this.token)

rule type(authentication, basic) and trigger(parameter)
	String user, String password

rule type(authentication, bearer) and trigger(parameter)
	String token

rule type(authentication, withCertificate) and trigger(parameter)
	URL certificate

rule type(authentication, withCertificate) and trigger(assign)
	this.certificate = certificate;

rule type(authentication, basic) and trigger(assign)
	this.user = user;
	this.password = password;

rule type(authentication, bearer) and trigger(assign)
	this.token = token;

rule type(authentication, withCertificate) and trigger(assign)
	this.certificate = certificate;

rule type(authentication) and type(basic) and trigger(field)
	private final String user;
	private final String password;

rule type(authentication) and type(bearer) and trigger(field)
	private final String token;

rule type(authentication, withCertificate) and trigger(field)
	private final URL certificate;

rule type(parameter) and trigger(signature)
	$parameterType $name+CamelCase

rule type(exceptionResponses) and trigger(throws)
	$exceptionResponse+throws...[$NLelse ]

rule type(exceptionResponse) and trigger(throws)
	if (e instanceof $exceptionName) throw (($exceptionName) e);

rule type(exceptionResponses) and trigger(declaration)
	throws <<$exceptionResponse+declaration...[, ],>> InternalServerError

rule type(exceptionResponse) and trigger(declaration)
	$exceptionName

rule type(schemaImport) and trigger(schemaImport)
	import $package.schemas.*;
