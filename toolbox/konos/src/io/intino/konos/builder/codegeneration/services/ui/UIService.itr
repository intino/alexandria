rule type(ui)
	package $package+validPackage;
	<<import $dialogsImport+validPackage.dialogs.*;>>
	<<import $displaysImport+validPackage.displays.*;>>
	<<import $displaysImport+validPackage.displays.notifiers.*;>>
	<<import $displaysImport+validPackage.displays.requesters.*;>>
	import $package+validPackage.resources.*;

	import io.intino.alexandria.ui.UIAlexandriaSpark;
	import io.intino.alexandria.ui.AssetResourceLoader;
	import io.intino.alexandria.ui.displays.AlexandriaDisplayNotifier;
	import io.intino.alexandria.ui.displays.AlexandriaDisplayNotifierProvider;
	import io.intino.alexandria.ui.services.push.PushService;
	import io.intino.alexandria.ui.spark.resources.AfterDisplayRequest;
	import io.intino.alexandria.ui.spark.resources.AssetResource;
	import io.intino.alexandria.ui.spark.resources.AuthenticateCallbackResource;
	import io.intino.alexandria.ui.spark.resources.BeforeDisplayRequest;

	import java.net.MalformedURLException;
	import java.net.URL;

	public class $name+PascalCase~Service extends io.intino.alexandria.ui.UI {

		public static void init(UIAlexandriaSpark spark, $box+PascalCase~Box box) {
			$box+PascalCase~Configuration configuration = ($box+PascalCase~Configuration) box.configuration();
			box.routeManager(routeManager(spark));
			spark.route("/_alexandria/push").push(new PushService());
			spark.route("/authenticate-callback").get(manager -> new AuthenticateCallbackResource(manager, notifierProvider()).execute());
			spark.route("/authenticate-callback/").get(manager -> new AuthenticateCallbackResource(manager, notifierProvider()).execute());
			spark.route("/asset/:name").get(manager -> new AssetResource(name -> new AssetResourceLoader(box).load(name), manager, notifierProvider()).execute());
			<<$userHome>>
			<<$resource+path...[$NL]>>
			<<$display+path...[$NL]>>
			initDisplays(spark);
		}

		public static void initDisplays(UIAlexandriaSpark spark) {
			$display...[$NL]
			$dialog...[$NL]
			registerNotifiers();
		}

		private static void registerNotifiers() {
			$display+notifier...[$NL]
			$dialog+notifier...[$NL]
		}
	}

rule type(resource) and trigger(path)
	$path...[$NL]

rule trigger(userHome)
	spark.route("/alexandria/user").get(manager -> new $this+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(display, accessible) and trigger(path)
	spark.route("/$name+lowercase~proxy/:displayId/personify").post(manager -> new $name+firstUpperCase~ProxyResource(box, manager, notifierProvider()).execute()); //AAA

rule type(display) and trigger(path)

rule type(path, editor)
	spark.route("$value"<<$custom...[]>>).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());
	spark.route("$value"<<$custom...[]>>).post(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(path)
	spark.route("$value"<<$custom...[]>>).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(display, proxy) and trigger(notifier)
	register($name+firstUpperCase~ProxyNotifier.class).forDisplay($package+validPackage.displays.$name+firstUpperCase~Proxy.class);

rule type(display) and trigger(notifier)
	register($name+firstUpperCase~Notifier.class).forDisplay($package+validPackage.displays.$name+firstUpperCase.class);
	<<$display+notifier>>

rule type(dialog) and trigger(notifier)
	register(io.intino.alexandria.ui.displays.AlexandriaDialogNotifier.class).forDisplay($package+validPackage.dialogs.$name+firstUpperCase.class);

rule trigger(custom)
	.replace("{$this}", configuration.get("$this"))

rule type(display, proxy) and trigger(proxy)
	spark.route("/$name+lowercase~proxy/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());//CCC
	spark.route("/$name+lowercase~proxy/:displayId").post(manager -> new $name+firstUpperCase~ProxyRequester(manager, notifierProvider()).execute());
	spark.route("/$name+lowercase~proxy/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());

rule type(display)
	spark.route("/$name+lowercase/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());//BBB
	spark.route("/$name+lowercase/:displayId").post(manager -> new $name+firstUppercase~Requester(manager, notifierProvider()).execute());
	<<$asset>>
	spark.route("/$name+lowercase/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());
	$display+proxy

rule type(dialog)
	spark.route("/$name+lowercase/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());
	spark.route("/$name+lowercase/:displayId").post(manager -> new io.intino.alexandria.ui.displays.AlexandriaDialogRequester(manager, notifierProvider()).execute());
	spark.route("/$name+lowercase/:displayId").get(manager -> new io.intino.alexandria.ui.displays.AlexandriaDialogRequester(manager, notifierProvider()).execute());
	spark.route("/$name+lowercase/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());

rule trigger(asset)
	spark.route("/$this+lowercase/:displayId").get(manager -> new $this+firstUppercase~Requester(manager, notifierProvider()).execute());

rule trigger(quoted)
	"$value"

rule type(custom) and trigger(custom)
	.replace("{$value}", configuration.get("$value"))
