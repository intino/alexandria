rule type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.Map;
	import java.util.UUID;
	<<
	import java.util.HashMap;
	import java.util.Map$hasUi+hideUi>>

	import io.intino.alexandria.logger.Logger;
	import java.util.logging.ConsoleHandler;
	import java.util.logging.Level;

	<<$messagehub+import>>
	<<$terminal+import>>
	<<import io.intino.alexandria.http.AlexandriaHttpServer;$hasREST>>
	<<import io.intino.alexandria.ui.services.libraries.AlexandriaLibraryArchetype$hasUI+hideUi>>
	<<import io.intino.alexandria.ui.services.libraries.AlexandriaLibraryInstaller$hasUI+hideUi>>
	<<import io.intino.alexandria.ui.services.libraries.AlexandriaLibraryLoader$hasUI+hideUi>>
	<<import io.intino.alexandria.ui.services.libraries.AlexandriaLibraryUiInitializer$hasUI+hideUi>>
	<<import io.intino.alexandria.ui.services.push.PushService$hasUI+hideUi>>
	<<import io.intino.alexandria.ui.Soul$hasUi+hideUi>>

	public abstract class AbstractBox extends <<$hasUi+uiBox?io.intino.alexandria.core.Box>> {
		protected $name+PascalCase~Configuration configuration;
		<<$service+field...[$NL]>>
		<<$connector+field>>
		<<$terminal+field>>
		<<$sentinel+field>>
		<<$workflow+field>>
		<<protected Map<String, Soul> uiSouls = new java.util.HashMap<>()$hasUi+hideUi>>
		<<private java.util.List<io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed> soulsClosedListeners = new java.util.ArrayList<>()$hasUi+hideUi>>
		<<private io.intino.alexandria.ui.services.AuthService authService$hasUi+hideUi>>
		<<private java.util.List<AlexandriaLibraryLoader> libraryLoaders = new java.util.ArrayList<>();$hasUI+hideUi>>

		public AbstractBox(String[] args) {
			this(new $name+PascalCase~Configuration(args));
		}

		public AbstractBox($name+PascalCase~Configuration configuration) {
			<<owner = new $parent~Box(configuration);>>
			this.configuration = configuration;
			<<$parent+empty?initJavaLogger();>>
			<<$connector+setup>>
			<<$service+setup...[$NL]>>
			<<$terminal+setup>>
		}

		public $name+PascalCase~Configuration configuration() {
			return configuration;
		}

		@Override
		public io.intino.alexandria.core.Box put(Object o) {
			<<$hasUi~super.put(o);>>
			<<$hasParent~owner.put(o);>>
			return this;
		}

		public abstract void beforeStart();

		public io.intino.alexandria.core.Box start() {
			initConnector();
			if (owner != null) owner.beforeStart();
			beforeStart();
			if (owner != null) owner.startServices();
			startServices();
			if (owner != null) owner.afterStart();
			afterStart();
			return this;
		}

		public abstract void afterStart();

		public abstract void beforeStop();

		public void stop() {
			if (owner != null) owner.beforeStop();
			beforeStop();
			if (owner != null) owner.stopServices();
			stopServices();
			if (owner != null) owner.afterStop();
			afterStop();
		}

		@Override
		public void stopServices() {
			<<$server...[$NL]>>
			<<$service+stop...[$NL]>>
			<<$connector+stop>>
		}

		public abstract void afterStop();

		@Override
		public void startServices() {
			initUI();
			initAgenda();
			initRestServices();
			initSoapServices();
			initJmxServices();
			initTerminal();
			initMessagingServices();
			initSentinels();
			initSlackBots();
			initWorkflow();
			initCli();
		}

		<<$hasUi+registerSoul>>

		<<$hasUi+existsLibrary>>

		<<$service+method...[$NL]>>

		<<$service+getter...[$NL$NL]>>

		<<$hasUi+authService>>

		<<$terminal+getter>>

		<<$sentinel+getter...[$NL$NL]>>

		<<$workflow+getter>>

		$service+setupMethod...[$NL$NL]

		<<$terminal+datamartSourceSelector>>

		private void initRestServices() {
			$service+rest...[$NL]
		}

		private void initSoapServices() {
			$service+soap...[$NL]
		}

		private void initMessagingServices() {
			$service+messaging...[$NL]
		}

		private void initJmxServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initUI() {
			$service+ui...[$NL]
		}

		<<$hasUi+translatorServiceInitialization>>

		protected void initConnector() {
			<<$connector+init>>
		}

		protected void initTerminal() {
			<<$terminal+init>>
		}

		protected void initSentinels() {
			<<$sentinel+init...[$NL]>>
		}

		protected void initWorkflow() {
			<<$workflow+init>>
		}

		protected void initAgenda() {
			$service+agenda...[$NL]
		}

		protected void initCli() {
			$service+cli...[$NL]
		}

		protected void initJavaLogger() {
			final java.util.logging.Logger Logger = java.util.logging.Logger.getGlobal();
			final ConsoleHandler handler = new ConsoleHandler();
			handler.setLevel(Level.INFO);
			handler.setFormatter(new io.intino.alexandria.logger.Formatter());
			Logger.setUseParentHandlers(false);
			Logger.addHandler(handler);
			$logger
		}

		public static java.net.URL url(String url) {
            try {
                return new java.net.URI(url).toURL();
            } catch (java.net.MalformedURLException | java.net.URISyntaxException | IllegalArgumentException e) {
                return null;
            }
        }
	}

rule trigger(empty)
	;

rule type(logger) and trigger(logger)
	io.intino.alexandria.logger4j.Logger.init();

rule type(connector) and trigger(import)
	import io.intino.alexandria.terminal.Connector;

rule trigger(uiBox)
	io.intino.alexandria.ui.AlexandriaUiBox

rule type(service, ui) and trigger(setupMethod)
    protected void beforeSetup$name+firstUpperCase~Ui(io.intino.alexandria.ui.AlexandriaUiServer server) {}
	public void setup$name+firstUpperCase~Ui() {
		<<if($port == null || $port.isEmpty())>> return;
		this.authService = <<this.authService($authentication)?null>>;
		<<io.intino.alexandria.http.AlexandriaHttpServerBuilder.setup(Integer.parseInt($port), "www/", Long.parseLong($maxResourceSize))>>;
		io.intino.alexandria.http.AlexandriaHttpServerBuilder.setUI(true);
		io.intino.alexandria.http.AlexandriaHttpServerBuilder.addParameters(this.authService);
		this.pushService = owner != null && owner instanceof io.intino.alexandria.ui.AlexandriaUiBox ? ((io.intino.alexandria.ui.AlexandriaUiBox)owner).pushService() : new io.intino.alexandria.ui.services.push.PushService();
		io.intino.alexandria.ui.AlexandriaUiServer server = (io.intino.alexandria.ui.AlexandriaUiServer) io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance();
		beforeSetup$name+firstUpperCase~Ui(server);
		$package+validPackage.ui.$name+PascalCase~Service.init(server, ($configuration+PascalCase~Box) this, pushService, new $package+validPackage.ui.displays.RouteDispatcher());
		$use...[$NL]
		$importLibrary...[$NL]
		io.intino.alexandria.ui.UiElementsService.initDisplays(server, pushService);
	}

rule type(service, cli) and trigger(setupMethod)
	public void setupCli() {
		<<if($port == null || $port.isEmpty())>> return;
		<<io.intino.alexandria.http.AlexandriaHttpServerBuilder.setup(Integer.parseInt($port), "www/", Long.parseLong($maxResourceSize))>>;
	}

rule type(service, soap) and trigger(setup)
	<<if($port != null && !$port.isEmpty()) >>io.intino.alexandria.http.AlexandriaHttpServerBuilder.setup(Integer.parseInt($port), "www/", Long.parseLong($maxResourceSize));

rule type(terminal) and trigger(setup)
	this.terminal = new $qn(connector);

rule type(connector) and trigger(setup)
	this.connector = io.intino.alexandria.terminal.ConnectorFactory.createConnector(new io.intino.alexandria.jms.ConnectionConfig($parameter...[, ]), $additionalParameter...[,]);

rule type(service, jmx) and trigger(jmx)
	this.$name+CamelCase = new JMX$name+PascalCase().init((($configuration+PascalCase~Box) this));
	Logger.info("Jmx service $name: started!");

rule type(service, slack) and trigger(slack)
	if ($parameter == null || $parameter.isEmpty()) return;
	this.$name+CamelCase = new $name+PascalCase~SlackBot(($configuration+PascalCase~Box) this, $parameter);
	Logger.info("Slack service $name: started!");

rule type(service, rest) and trigger(rest)
	<<if($port == null || $port.isEmpty()) return;>>
	io.intino.alexandria.http.AlexandriaHttpServerBuilder.setup(Integer.parseInt($port), "www/", Long.parseLong($maxResourceSize));
	<<$name+PascalCase~Service.setup(io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance(), ($configuration+PascalCase~Box) this);>>
	<<io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance().start();>>
	Logger.info("Rest service $name: started at port " + $port + "!");

rule type(service, soap) and trigger(soap)
	<<$name+PascalCase~Service.setup(io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance(), ($configuration+PascalCase~Box) this);>>
	<<io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance().start();
	Logger.info("Soap service $name: started!");>>

rule type(service, ui) and trigger(ui)
	setup$name+firstUpperCase~Ui();
	<<this.initTranslatorService()>>;
	io.intino.alexandria.ui.AlexandriaUiServer server$name+firstUpperCase~Instance = (io.intino.alexandria.ui.AlexandriaUiServer) io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance();
	server$name+firstUpperCase~Instance.start();
	Logger.info("UI $name: started at port " + $port + "!");

rule trigger(use)
	<<$this.initDisplays(server, pushService);>>

rule type(service, messaging) and trigger(messaging)
	this.$name+CamelCase = new $name+PascalCase~Service(this.connector, ($configuration+PascalCase~Box) this);
	Logger.info("Messaging service $name: started!");

rule type(service, agenda) and trigger(agenda)
	if (this.agenda != null) return;
	this.agenda = new $name+PascalCase~Service(($configuration+PascalCase~Box) this);
	this.agenda.setup(io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance(), scheduler);
	io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance().start();
	Logger.info("Agenda service: started!");

rule type(service, cli) and trigger(cli)
    setupCli();
    $name+PascalCase~Service $name+CamelCase~Service = new $name+PascalCase~Service();
    $name+CamelCase~Service.setup(io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance(), ($configuration+PascalCase~Box) this, new $name+PascalCase(($configuration+PascalCase~Box)this));
    io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance().start();
    Logger.info("$name+firstUpperCase service: started!");

rule type(sentinel) and trigger(init)
	Sentinels.init(this.scheduler, this.configuration.home() <<$hasWebhook io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance()>>, ($configuration+PascalCase~Box) this);

rule type(workflow) and trigger(init)
	this.workflow = new $package.bpm.Workflow(($box+PascalCase~Box)this<<, $parameter>>);

rule type(connector) and trigger(init)
	if (!(this.connector instanceof io.intino.alexandria.terminal.JmsConnector) || ((io.intino.alexandria.terminal.JmsConnector) this.connector).connection() != null) return;
	final io.intino.alexandria.terminal.JmsConnector connector = (io.intino.alexandria.terminal.JmsConnector) this.connector;
	if (connector.connection() == null) connector.start();
	if (configuration().get("datahub_url") != null)
		while (connector.connection() == null) try {
			Thread.sleep(1000 * 30);
			connector.start();
		} catch (InterruptedException e) {
			Logger.error(e);
		}

rule type(terminal) and trigger(init)
	if (this.terminal != null) {
		java.time.Instant sealStamp = this.terminal.requestLastSeal();
		Logger.info("Last seal on " + sealStamp.toString());
		java.util.function.Predicate<java.time.Instant> filter = i -> !i.isBefore(sealStamp);
		this.terminal.initDatamarts(<<$datamartsLoad()>>);
		$subscriber...[$NL]
	}

rule type(datamartsLoad) and trigger(datamartSourceSelector)
	protected abstract String $datamartsLoad();

rule type(subscriber, durable, filtered) and trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t), "$subscriberId", filter, null);

rule type(subscriber, durable) and trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t), "$subscriberId");

rule type(subscriber) and trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t));

rule trigger(split)
	$type.Split.$value

rule type(service, jmx) and trigger(field)
	protected io.intino.alexandria.jmx.JMXServer $name+CamelCase;

rule type(service, slack) and trigger(field)
	private io.intino.alexandria.slack.Bot $name+CamelCase;

rule type(service, messaging) and trigger(field)
	private $name+PascalCase~Service $name+CamelCase;

rule type(sentinel) and trigger(field)
	private io.intino.alexandria.scheduler.AlexandriaScheduler scheduler = new io.intino.alexandria.scheduler.AlexandriaScheduler();

rule type(connector) and trigger(field)
	protected io.intino.alexandria.terminal.Connector connector;

rule type(terminal) and trigger(field)
	protected $qn terminal;

rule type(workflow) and trigger(field)
	protected $package.bpm.Workflow workflow;

rule type(agenda) and trigger(field)
	protected AgendaService agenda;

rule type(service, ui) and trigger(method)
    $importLibrary+method...[$NL]

rule type(service, messaging) and trigger(getter)
	public $name+PascalCase~Service $name+CamelCase() {
		return $name+CamelCase;
	}

rule type(terminal) and trigger(getter)
	public $qn terminal() {
		return this.terminal;
	}

	protected io.intino.alexandria.terminal.Connector datahubConnector() {
		return this.connector;
	}

rule type(workflow) and trigger(getter)
	public $package.bpm.Workflow workflow() {
		return this.workflow;
	}


rule type(agenda) and trigger(getter)
	public AgendaService agenda() {
		return this.agenda;
	}

rule type(service, slack) and trigger(getter)
	public $name+PascalCase~SlackBot $name+CamelCase() {
		return ($name+PascalCase~SlackBot) $name+CamelCase;
	}

rule type(service) and trigger(getter)

rule trigger(server)
	io.intino.alexandria.http.AlexandriaHttpServerBuilder.instance().stop();

rule type(connector) and trigger(stop)
	if (connector instanceof io.intino.alexandria.terminal.JmsConnector) ((io.intino.alexandria.terminal.JmsConnector) connector).stop();

rule type(service, slack) and trigger(stop)
	this.$name+CamelCase.disconnect();

rule type(service) and trigger(stop)

rule type(service)

rule type(sentinel) and trigger(getter)
	public io.intino.alexandria.scheduler.AlexandriaScheduler scheduler() {
		return this.scheduler;
	}

rule trigger(authservice)
	protected abstract io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl);

rule trigger(translatorServiceInitialization)
	private void initTranslatorService() {
		translatorService = new io.intino.alexandria.ui.services.TranslatorService();
		$useDictionaries...[$NL]
		translatorService.addAll($package+validPackage.I18n.dictionaries());
		translatorService.addAll(io.intino.alexandria.I18n.dictionaries());
	}

rule trigger(useDictionaries)
	translatorService.addAll($this);

rule type(importLibrary) and trigger(method)
	private void init$name+firstUpperCase~Library(io.intino.alexandria.ui.AlexandriaUiServer server, PushService pushService) {
		java.io.File library = new java.io.File($libraryFile);
		if (!library.exists()) return;
	    AlexandriaLibraryArchetype archetype = new AlexandriaLibraryArchetype(new java.io.File("$destination"), $basePackage, $libraryName);
	    AlexandriaLibraryLoader loader = new AlexandriaLibraryLoader(archetype);
	    new AlexandriaLibraryInstaller(archetype).install(library);
	    new AlexandriaLibraryUiInitializer(this, loader).initialize(server, pushService);
	    server.add(loader.webDirectory().getAbsolutePath());
	    libraryLoaders.add(loader);
	}

rule type(importLibrary)
	init$name+firstUpperCase~Library(server, pushService);

rule trigger(registerSoul)
	public java.util.List<Soul> souls() {
		return new java.util.ArrayList<>(uiSouls.values());
	}

	public java.util.Optional<Soul> soul(String clientId) {
		return java.util.Optional.ofNullable(uiSouls.get(clientId));
	}

	public void registerSoul(String clientId, Soul soul) {
		<<if (owner != null) (($parent~Box) owner).registerSoul(clientId, soul);>>
		uiSouls.put(clientId, soul);
	}

	public void unRegisterSoul(String clientId) {
		<<if (owner != null) (($parent~Box) owner).unRegisterSoul(clientId);>>
		uiSouls.remove(clientId);
		if (uiSouls.size() <= 0) notifySoulsClosed();
	}

	public void onSoulsClosed(io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed listener) {
		<<if (owner != null) (($parent~Box) owner).onSoulsClosed(listener);>>
		this.soulsClosedListeners.add(listener);
	}

	private void notifySoulsClosed() {
		soulsClosedListeners.forEach(l -> l.accept());
	}

rule trigger(existsLibrary)
	public boolean existsLibraryTemplate(String name) {
		return libraryLoaders.stream().anyMatch(l -> l.libraryTemplateEntryPointClass(name) != null);
	}

rule type(conf, file) and trigger(additionalParameter)
	configuration().get("$value") == null ? null : new java.io.File(configuration().get("$value"))

rule type(conf) and trigger(additionalParameter)
	configuration().get("$value")

rule type(conf, file) and trigger(parameter)
	configuration().get("$value") == null ? null : new java.io.File(configuration().get("$value"))

rule type(conf) and trigger(parameter)
	configuration().get("$value")

rule type(parameter, custom) and trigger(authentication)
	url(configuration().get("$value+customParameter"))

rule type(parameter, custom) and trigger(edition)
	url(configuration().get("$value+customParameter"))

rule type(parameter, custom)
	configuration().get("$value+customParameter")

rule type(custom) and trigger(parameter)
	configuration().get("$value+customParameter")

rule type(file) and trigger(parameter)
	$value

rule type(int) and trigger(parameter)
	$value

rule trigger(authentication)
	url("$value")

rule trigger(parameter)
	"$value"

rule type(parameter)
	"$value"

rule trigger(edition)
	url("$value")

rule trigger(parentInit)

rule trigger(hide)


rule trigger(hideUi)
	;

rule trigger(hideUi)
	;
