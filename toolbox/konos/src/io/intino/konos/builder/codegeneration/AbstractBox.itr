def type(box)
	package $package;

	import java.util.LinkedHashMap;
	import java.util.Map;
	import java.util.UUID;
	[
	import java.util.HashMap;
	import java.util.Map$hasUi+hideUi]

	import io.intino.alexandria.logger.Logger;
	import java.util.logging.ConsoleHandler;
	import java.util.logging.Level;

	[$messagehub+import]
	[$terminal+import]
	[import io.intino.alexandria.http.AlexandriaSpark;$hasREST]
	[import io.intino.alexandria.ui.services.push.PushService$hasUI+hideUi]
	[import io.intino.alexandria.ui.Soul$hasUi+hideUi]

	public abstract class AbstractBox extends [$hasUi+uiBox?io.intino.alexandria.core.Box] {
		protected $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration;
		[$service+field...[$NL]]
		[$connector+field]
		[$terminal+field]
		[$sentinel+field]
		[$workflow+field]
		[protected Map<String, Soul> uiSouls = new java.util.HashMap<>()$hasUi+hideUi]
		[private java.util.List<io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed> soulsClosedListeners = new java.util.ArrayList<>()$hasUi+hideUi]
		[private io.intino.alexandria.ui.services.AuthService authService$hasUi+hideUi]
		[private PushService pushService$hasUi+hideUi]

		public AbstractBox(String$[] args) {
			this(new $name+SnakeCaseToCamelCase+FirstUpperCase~Configuration(args));
		}

		public AbstractBox($name+SnakeCaseToCamelCase+FirstUpperCase~Configuration configuration) {
			[owner = new $parent~Box(configuration);]
			this.configuration = configuration;
			[$parent+empty?initJavaLogger();]
			[$connector+setup]
			[$service+setup...[$NL]]
			[$terminal+setup]
		}

		public $name+SnakeCaseToCamelCase+firstUpperCase~Configuration configuration() {
			return configuration;
		}

		@Override
		public io.intino.alexandria.core.Box put(Object o) {
			[$hasParent~owner.put(o);]
			return this;
		}

		public abstract void beforeStart();

		public io.intino.alexandria.core.Box start() {
			initConnector();
			if (owner != null) owner.beforeStart();
			beforeStart();
			if (owner != null) owner.startServices();
			startServices();
			if (owner != null) owner.afterStart();
			afterStart();
			return this;
		}

		public abstract void afterStart();

		public abstract void beforeStop();

		public void stop() {
			if (owner != null) owner.beforeStop();
			beforeStop();
			if (owner != null) owner.stopServices();
			stopServices();
			if (owner != null) owner.afterStop();
			afterStop();
		}

		@Override
		public void stopServices() {
			[$spark...[$NL]]
			[$service+stop...[$NL]]
			[$connector+stop]
		}

		public abstract void afterStop();

		@Override
		public void startServices() {
			initUI();
			initAgenda();
			initRestServices();
			initSoapServices();
			initJmxServices();
			initTerminal();
			initMessagingServices();
			initSentinels();
			initSlackBots();
			initWorkflow();
			initCli();
		}

		[$hasUi+pushService]

		[$hasUi+registerSoul]

		[$service+getter...[$NL$NL]]

		[$hasUi+authService]

		[$terminal+getter]

		[$sentinel+getter...[$NL$NL]]

		[$workflow+getter]

		$service+setupMethod...[$NL$NL]

		[$terminal+datamartSourceSelector]

		private void initRestServices() {
			$service+rest...[$NL]
		}

		private void initSoapServices() {
			$service+soap...[$NL]
		}

		private void initMessagingServices() {
			$service+messaging...[$NL]
		}

		private void initJmxServices() {
			$service+jmx...[$NL]
		}

		private void initSlackBots() {
			$service+slack...[$NL]
		}

		private void initUI() {
			$service+ui...[$NL]
		}

		[$hasUi+translatorServiceInitialization]

		protected void initConnector() {
			[$connector+init]
		}

		protected void initTerminal() {
			[$terminal+init]
		}

		protected void initSentinels() {
			[$sentinel+init...[$NL]]
		}

		protected void initWorkflow() {
			[$workflow+init]
		}

		protected void initAgenda() {
			$service+agenda...[$NL]
		}

		protected void initCli() {
			$service+cli...[$NL]
		}

		protected void initJavaLogger() {
			final java.util.logging.Logger Logger = java.util.logging.Logger.getGlobal();
			final ConsoleHandler handler = new ConsoleHandler();
			handler.setLevel(Level.INFO);
			handler.setFormatter(new io.intino.alexandria.logger.Formatter());
			Logger.setUseParentHandlers(false);
			Logger.addHandler(handler);
			$logger
		}

		public static java.net.URL url(String url) {
            try {
                return new java.net.URI(url).toURL();
            } catch (java.net.MalformedURLException | java.net.URISyntaxException | IllegalArgumentException e) {
                return null;
            }
        }
	}
end

def trigger(empty)
	;
end

def type(logger) trigger(logger)
	io.intino.alexandria.logger4j.Logger.init();
end

def type(connector) trigger(import)
	import io.intino.alexandria.terminal.Connector;
end

def trigger(uiBox)
	io.intino.alexandria.ui.AlexandriaUiBox
end

def type(service & ui) trigger(setupMethod)
	public void setup$name+firstUpperCase~Ui() {
		[if($parameter == null || $parameter.isEmpty())] return;
		this.authService = [this.authService($authentication)?null];
		[io.intino.alexandria.http.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/")];
		io.intino.alexandria.http.AlexandriaSparkBuilder.setUI(true);
		io.intino.alexandria.http.AlexandriaSparkBuilder.addParameters(this.authService);
		this.pushService = new io.intino.alexandria.ui.services.push.PushService();
		io.intino.alexandria.ui.UISpark sparkInstance = (io.intino.alexandria.ui.UISpark) io.intino.alexandria.http.AlexandriaSparkBuilder.instance();
		$package+validPackage.ui.$name+SnakeCaseToCamelCase+FirstUpperCase~Service.init(sparkInstance, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, pushService, new $package+validPackage.ui.displays.RouteDispatcher());
		$use...[$NL]
		io.intino.alexandria.ui.UiElementsService.initDisplays(sparkInstance, pushService);
	}
end

def type(service & cli) trigger(setupMethod)
	public void setupCli() {
		[if($parameter == null || $parameter.isEmpty())] return;
		[io.intino.alexandria.http.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/")];
	}
end

def type(service & soap) trigger(setup)
	[if($parameter != null && !$parameter.isEmpty()) ]io.intino.alexandria.http.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/");
end

def type(terminal) trigger(setup)
	this.terminal = new $qn(connector);
end

def type(connector) trigger(setup)
	this.connector = io.intino.alexandria.terminal.ConnectorFactory.createConnector(new io.intino.alexandria.jms.ConnectionConfig($parameter...[, ]), $additionalParameter...[,]);
end

def type(service & jmx) trigger(jmx)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new JMX$name+SnakeCaseToCamelCase+FirstUpperCase().init((($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this));
	Logger.info("Jmx service $name: started!");
end

def type(service & slack) trigger(slack)
	if ($parameter == null || $parameter.isEmpty()) return;
	this.$name+SnakeCaseToCamelCase+FirstLowerCase = new $name+SnakeCaseToCamelCase+FirstUpperCase~SlackBot(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, $parameter);
	Logger.info("Slack service $name: started!");
end

def type(service & rest) trigger(rest)
	[if($parameter == null || $parameter.isEmpty()) return;]
	io.intino.alexandria.http.AlexandriaSparkBuilder.setup(Integer.parseInt($parameter), "www/");
	[$name+SnakeCaseToCamelCase+FirstUpperCase~Service.setup(io.intino.alexandria.http.AlexandriaSparkBuilder.instance(), ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);]
	[io.intino.alexandria.http.AlexandriaSparkBuilder.instance().start();]
	Logger.info("Rest service $name: started at port " + $parameter + "!");
end

def type(service & soap) trigger(soap)
	[$name+SnakeCaseToCamelCase+FirstUpperCase~Service.setup(io.intino.alexandria.http.AlexandriaSparkBuilder.instance(), ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);]
	[io.intino.alexandria.http.AlexandriaSparkBuilder.instance().start();
	Logger.info("Soap service $name: started!");]
end

def type(service & ui) trigger(ui)
	setup$name+firstUpperCase~Ui();
	[this.initTranslatorService()];
	io.intino.alexandria.ui.UISpark spark$name+firstUpperCase~Instance = (io.intino.alexandria.ui.UISpark) io.intino.alexandria.http.AlexandriaSparkBuilder.instance();
	spark$name+firstUpperCase~Instance.start();
	Logger.info("UI $name: started at port " + $parameter + "!");
end

def trigger(use)
	[$this.initDisplays(sparkInstance, pushService);]
end

def type(service & messaging) trigger(messaging)
	this.$name+SnakeCaseToCamelCase+firstLowerCase = new $name+SnakeCaseToCamelCase+firstUpperCase~Service(this.connector, ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
	Logger.info("Messaging service $name: started!");
end

def type(service & agenda) trigger(agenda)
	if (this.agenda != null) return;
	this.agenda = new $name+SnakeCaseToCamelCase+firstUpperCase~Service(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
	this.agenda.setup(io.intino.alexandria.http.AlexandriaSparkBuilder.instance(), scheduler);
	io.intino.alexandria.http.AlexandriaSparkBuilder.instance().start();
	Logger.info("Agenda service: started!");
end

def type(service & cli) trigger(cli)
    setupCli();
    $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstLowerCase~Service = new $name+SnakeCaseToCamelCase+firstUpperCase~Service();
    $name+SnakeCaseToCamelCase+firstLowerCase~Service.setup(io.intino.alexandria.http.AlexandriaSparkBuilder.instance(), ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this, new $name+SnakeCaseToCamelCase+firstUpperCase(($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box)this));
    io.intino.alexandria.http.AlexandriaSparkBuilder.instance().start();
    Logger.info("$name+firstUpperCase service: started!");
end

def type(sentinel) trigger(init)
	Sentinels.init(this.scheduler, this.configuration.home() [$hasWebhook io.intino.alexandria.http.AlexandriaSparkBuilder.instance()], ($configuration+SnakeCaseToCamelCase+FirstUpperCase~Box) this);
end

def type(workflow) trigger(init)
	this.workflow = new $package.bpm.Workflow(($box+SnakeCaseToCamelCase+FirstUpperCase~Box)this[, $parameter]);
end

def type(connector) trigger(init)
	if (!(this.connector instanceof io.intino.alexandria.terminal.JmsConnector) || ((io.intino.alexandria.terminal.JmsConnector) this.connector).connection() != null) return;
	final io.intino.alexandria.terminal.JmsConnector connector = (io.intino.alexandria.terminal.JmsConnector) this.connector;
	if (connector.connection() == null) connector.start();
	if (configuration().get("datahub_url") != null)
		while (connector.connection() == null) try {
			Thread.sleep(1000 * 30);
			connector.start();
		} catch (InterruptedException e) {
			Logger.error(e);
		}
end

def type(terminal) trigger(init)
	if (this.terminal != null) {
		java.time.Instant sealStamp = this.terminal.requestLastSeal();
		Logger.info("Last seal on " + sealStamp.toString());
		java.util.function.Predicate<java.time.Instant> filter = i -> !i.isBefore(sealStamp);
		this.terminal.initDatamarts([$datamartsLoad()]);
		$subscriber...[$NL]
	}
end

def type(datamartsLoad) trigger(datamartSourceSelector)
	protected abstract String $datamartsLoad();
end

def type(subscriber & durable & filtered) trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t), "$subscriberId", filter, null);
end

def type(subscriber & durable) trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t), "$subscriberId");
end

def type(subscriber) trigger(subscriber)
	this.terminal.subscribe(($terminal.$eventQn+FirstUpperCase~Consumer) (e, t) -> new $package.subscribers.$name+FirstUpperCase(($box+firstUpperCase~Box) AbstractBox.this).accept(e, t));
end

def trigger(split)
	$type.Split.$value
end

def type(service & jmx) trigger(field)
	protected io.intino.alexandria.jmx.JMXServer $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & slack) trigger(field)
	private io.intino.alexandria.slack.Bot $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(service & messaging) trigger(field)
	private $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase;
end

def type(sentinel) trigger(field)
	private io.intino.alexandria.scheduler.AlexandriaScheduler scheduler = new io.intino.alexandria.scheduler.AlexandriaScheduler();
end

def type(connector) trigger(field)
	protected io.intino.alexandria.terminal.Connector connector;
end

def type(terminal) trigger(field)
	protected $qn terminal;
end

def type(workflow) trigger(field)
	protected $package.bpm.Workflow workflow;
end

def type(agenda) trigger(field)
	protected AgendaService agenda;
end

def type(service & messaging) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~Service $name+SnakeCaseToCamelCase+firstlowerCase() {
		return $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(terminal) trigger(getter)
	public $qn terminal() {
		return this.terminal;
	}

	protected io.intino.alexandria.terminal.Connector datahubConnector() {
		return this.connector;
	}
end

def type(workflow) trigger(getter)
	public $package.bpm.Workflow workflow() {
		return this.workflow;
	}
end


def type(agenda) trigger(getter)
	public AgendaService agenda() {
		return this.agenda;
	}
end

def type(service & slack) trigger(getter)
	public $name+SnakeCaseToCamelCase+firstUpperCase~SlackBot $name+SnakeCaseToCamelCase+firstlowerCase() {
		return ($name+SnakeCaseToCamelCase+firstUpperCase~SlackBot) $name+SnakeCaseToCamelCase+firstlowerCase;
	}
end

def type(service) trigger(getter)
end

def trigger(spark)
	io.intino.alexandria.http.AlexandriaSparkBuilder.instance().stop();
end

def type(connector) trigger(stop)
	if (connector instanceof io.intino.alexandria.terminal.JmsConnector) ((io.intino.alexandria.terminal.JmsConnector) connector).stop();
end

def type(service & slack) trigger(stop)
	this.$name+SnakeCaseToCamelCase+FirstLowerCase.disconnect();
end

def type(service) trigger(stop)
end

def type(service)
end

def type(sentinel) trigger(getter)
	public io.intino.alexandria.scheduler.AlexandriaScheduler scheduler() {
		return this.scheduler;
	}
end

def trigger(authservice)
	protected abstract io.intino.alexandria.ui.services.AuthService authService(java.net.URL authServiceUrl);
end

def trigger(translatorServiceInitialization)
	private void initTranslatorService() {
		translatorService = new io.intino.alexandria.ui.services.TranslatorService();
		$useDictionaries...[$NL]
		translatorService.addAll($package+validPackage.I18n.dictionaries());
		translatorService.addAll(io.intino.alexandria.I18n.dictionaries());
	}
end

def trigger(useDictionaries)
	translatorService.addAll($this);
end

def trigger(pushService)
	public PushService pushService() {
		return pushService;
	}
end

def trigger(registerSoul)
	public java.util.List<Soul> souls() {
		return new java.util.ArrayList<>(uiSouls.values());
	}

	public java.util.Optional<Soul> soul(String clientId) {
		return java.util.Optional.ofNullable(uiSouls.get(clientId));
	}

	public void registerSoul(String clientId, Soul soul) {
		[if (owner != null) (($parent~Box) owner).registerSoul(clientId, soul);]
		uiSouls.put(clientId, soul);
	}

	public void unRegisterSoul(String clientId) {
		[if (owner != null) (($parent~Box) owner).unRegisterSoul(clientId);]
		uiSouls.remove(clientId);
		if (uiSouls.size() <= 0) notifySoulsClosed();
	}

	public void onSoulsClosed(io.intino.alexandria.ui.AlexandriaUiBox.SoulsClosed listener) {
		[if (owner != null) (($parent~Box) owner).onSoulsClosed(listener);]
		this.soulsClosedListeners.add(listener);
	}

	private void notifySoulsClosed() {
		soulsClosedListeners.forEach(l -> l.accept());
	}
end


def type(conf & file) trigger(additionalParameter)
	configuration().get("$value") == null ? null : new java.io.File(configuration().get("$value"))
end

def type(conf) trigger(additionalParameter)
	configuration().get("$value")
end

def type(conf & file) trigger(parameter)
	configuration().get("$value") == null ? null : new java.io.File(configuration().get("$value"))
end

def type(conf) trigger(parameter)
	configuration().get("$value")
end

def type(custom) trigger(parameter)
	configuration().get("$value+customParameter")
end

def type(custom) trigger(authentication)
	url(configuration().get("$value+customParameter"))
end

def type(custom) trigger(edition)
	url(configuration().get("$value+customParameter"))
end

def type(file) trigger(parameter)
	$value
end

def type(int) trigger(parameter)
	$value
end

def trigger(parameter)
	"$value"
end

def trigger(authentication)
	url("$value")
end

def trigger(edition)
	url("$value")
end

def trigger(parentInit)
end

def trigger(hide)

end

def trigger(hideUi)
	;
end

def trigger(hideUi)
	;
end