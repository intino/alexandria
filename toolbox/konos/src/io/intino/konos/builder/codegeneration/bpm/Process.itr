rule type(process, src)
	package $package+validPackage.bpm;

	import io.intino.alexandria.bpm.Task;
	import io.intino.alexandria.bpm.Task.Type.*;
	import $package+validPackage.$box+FirstUpperCase~Box;

	public class $name+firstUpperCase extends Abstract$name+firstUpperCase {

		$parameter+fieldName...[$NL]

		$name+firstUpperCase(String id, $box+firstUpperCase~Box box) {
			super(id, box);
		}

		$name+firstUpperCase($box+firstUpperCase~Box box<<, $parameter+signature...[, ]>>) {
			super(java.util.UUID.randomUUID().toString(), box);
			<<$parameter+put...[$NL]>>
		}

		$state+execute...[$NL$NL]

		<<$state+accept...[$NL$NL]>>
	}

rule type(process)
	package $package+validPackage.bpm;

	import static io.intino.alexandria.bpm.State.Type.*;
	import io.intino.alexandria.bpm.Task;
	import $package+validPackage.$box+FirstUpperCase~Box;

	import java.util.List;

	import static io.intino.alexandria.bpm.Link.Type.*;

	public abstract class Abstract$name+firstUpperCase extends io.intino.alexandria.bpm.Process {

		protected $box+firstUpperCase~Box box;

		Abstract$name+firstUpperCase(String id, $box+firstUpperCase~Box box) {
			super(id);
			this.box = box;
			init();
		}

		private void init() {
			<<$state...[$NL]>>
			<<$link...[$NL]>>
		}

		@Override
		public String name() {
			return "$name+firstUpperCase";
		}

		$state+abstractExecute...[$NL$NL]

		<<$state+abstractaccept...[$NL$NL]>>

		$state+method...[$NL$NL]
	}

rule trigger(method)
	private Task execute$method+firstUpperCase() {
		return new Task(Task.Type.$taskType) {
			@Override
			public void execute() {
				$method+FirstLowerCase();
			}

			@Override
			public boolean accept() {
				return accept$method+FirstUpperCase();
			}
		};
	}

rule trigger(abstractExecute)
	protected abstract void $method+FirstLowerCase();

rule trigger(execute)
	protected void $method+FirstLowerCase() {

	}

rule trigger(abstractAccept)
	protected boolean accept$method+FirstUpperCase() {
		return true;
	}

rule type(conditional) and trigger(accept)
	protected boolean accept$method+FirstUpperCase() {
		return true;
	}

rule trigger(state)
	addState(new io.intino.alexandria.bpm.State("$label", execute$method+firstUpperCase()<<, $type+lowercase+FirstUpperCase...[, ]>>));

rule trigger(link)
	addLink(new io.intino.alexandria.bpm.Link("$from", "$to", $type+linkType));

rule attribute(this, Default) and trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Default

rule attribute(this, Line) and trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Inclusive

rule attribute(this, Exclusive) and trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Exclusive

rule attribute(this, Inclusive) and trigger(linkType)
	io.intino.alexandria.bpm.Link.Type.Inclusive

rule trigger(put)
	put($this+firstUpperCase, $this+firstLowerCase);

rule trigger(signature)
	String $this+firstLowerCase

rule trigger(fieldName)
	private static final String $this+FirstUpperCase = "$this";
