def type(column) and trigger(toString)
	+ ", $name=" + $name()
end

def type(column) and type(id) and trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.getAlignedLong(0);
	}
end

def type(column) and type(long, unsigned) and trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~ULong<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(long) and trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~Long<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(int, unsigned) and trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.get$aligned~UInteger<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(int) and trigger(getter)
	public int $name+firstLowerCase() {
		return bitBuffer.get$aligned~Integer<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(short, unsigned) and trigger(getter)
	public int $name+firstLowerCase() {
		return bitBuffer.get$aligned~UShort<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(short) and trigger(getter)
	public short $name+firstLowerCase() {
		return bitBuffer.get$aligned~Short<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(byte, unsigned) and trigger(getter)
	public short $name+firstLowerCase() {
		return bitBuffer.get$aligned~UByte<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column) and type(byte) and trigger(getter)
	public byte $name+firstLowerCase() {
		return bitBuffer.get$aligned~Byte<<$bits+nbits>>($offset<<, $bits>>);
	}
end

def type(column, boolean) and trigger(getter)
	public boolean $name+firstLowerCase() {
		return bitBuffer.getBoolean($offset);
	}
end

def type(column, float) and trigger(getter)
	public float $name+firstLowerCase() {
		return bitBuffer.get$aligned~Real$size~Bits($offset);
	}
end

def type(column, double) and trigger(getter)
	public double $name+firstLowerCase() {
		return bitBuffer.get$aligned~Real$size~Bits($offset);
	}
end

def type(column, datetime) and trigger(getter)
	public $type $name+firstLowerCase() {
		return java.time.Instant.ofEpochMilli(bitBuffer.get$aligned~Long<<$bits+nbits>>($offset<<, $bits>>));
	}
end

def type(column, date) and trigger(getter)
	public $type $name+firstLowerCase() {
		return java.time.LocalDate.ofEpochDay(Short.toUnsignedInt(bitBuffer.get$aligned~Short<<$bits+nbits>>($offset<<, $bits>>)));
	}
end

def type(column, categorical) and trigger(getter)
	public $type+firstUpperCase.Component $name+firstLowerCase() {
		return $type+firstUpperCase.component((int)bitBuffer.getUIntegerNBits($offset, $bits));
	}
end

def type(column, real) and attribute(size, 32) and trigger(getter)
	public float $name+firstLowerCase() {
		return bitBuffer.getAlignedReal$size~Bits($offset);
	}
end

def type(column, real) and trigger(getter)
	public double $name+firstLowerCase() {
		return bitBuffer.getAlignedReal$size~Bits($offset);
	}
end

def type(virtualColumn, primitive) and trigger(abstract)
	public abstract $type+firstLowerCase $name+firstLowerCase();
end

def type(virtualColumn) and trigger(abstract)
	public abstract $type+firstUpperCase $name+firstLowerCase();
end

def type(virtualColumn, primitive) and trigger(implementation)
	@Override
	public $type+firstLowerCase $name+firstLowerCase() {
		// TODO: compute and return $name+firstLowerCase.
		return $defaultValue;
	}
end

def type(virtualColumn) and trigger(implementation)
	@Override
	public $type+firstUpperCase $name+firstLowerCase() {
		// TODO: compute and return $name+firstLowerCase.
		return $defaultValue;
	}
end

def type(column, byte, unsigned) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(byte $name+firstLowerCase) {
		bitBuffer.set$aligned~UByte<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, byte) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(byte $name+firstLowerCase) {
		bitBuffer.set$aligned~Byte<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, short, unsigned) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(short $name+firstLowerCase) {
		bitBuffer.set$aligned~UShort<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, short) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(short $name+firstLowerCase) {
		bitBuffer.set$aligned~Short<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(int, unsigned) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~UInteger<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, int) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~Integer<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, boolean) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(boolean $name+firstLowerCase) {
		bitBuffer.setBoolean($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(id) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.setAlignedLong(0, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(long, unsigned) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~ULong<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(long) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~Long<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, datetime) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Long<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase.toEpochMilli());
		return this;
	}
end

def type(column, date) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Short<<$bits+nbits>>($offset<<, $bits>>, (short) $name+firstLowerCase.toEpochDay());
		return this;
	}
end

def type(column, integer) and type(unsigned) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~UInteger<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end


def type(column, integer) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(int $name+firstLowerCase) {
		bitBuffer.set$aligned~Integer<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column, boolean) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(boolean $name+firstLowerCase) {
		bitBuffer.setBoolean($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column, float) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(float $name+firstLowerCase) {
		bitBuffer.set$aligned~Real$size~Bits($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column, double) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Real$size~Bits($offset, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(longInteger, unsigned) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~ULong<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(longInteger) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.set$aligned~Long<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase);
		return this;
	}
end

def type(column) and type(id) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase(long $name+firstLowerCase) {
		bitBuffer.setAlignedLong(0, $name+firstLowerCase);
		return this;
	}
end

def type(column, datetime) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Long<<$bits+nbits>>($offset<<, $bits>>, $name+firstLowerCase.toEpochMilli());
		return this;
	}
end

def type(column, date) and trigger(setter)
	public $owner+firstUpperCase~Builder $name+firstLowerCase($type $name+firstLowerCase) {
		bitBuffer.set$aligned~Short<<$bits+nbits>>($offset<<, $bits>>, (short) $name+firstLowerCase.toEpochDay());
		return this;
	}
end

def type(column, id) and trigger(getter)
	public long $name+firstLowerCase() {
		return bitBuffer.getAlignedLong(0);
	}
end

def type(column, categorical) and trigger(setter)
	public $owner+firstUpperCase $name+firstLowerCase(String $name+firstLowerCase) {
		bitBuffer.setUIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $type+firstUpperCase.component($name+firstLowerCase).index());
		return this;
	}

	public $owner+firstUpperCase $name+firstLowerCase($type+firstUpperCase.Component $name+firstLowerCase) {
		bitBuffer.setUIntegerNBits($offset, $bits, $name+firstLowerCase == null ? (int) NULL : $name+firstLowerCase.index());
		return this;
	}
end