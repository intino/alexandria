def type(server)
	package $package+ValidPackage;

	import io.intino.alexandria.http.AlexandriaSpark;
	import $package+ValidPackage.rest.resources.*;
	import io.intino.alexandria.core.Box;

	public class $name+pascalCase~Service {

		<<$authenticator+field>>

		public static AlexandriaSpark setup(AlexandriaSpark server, $box+FirstUpperCase~Box box) {
			<<$authenticator+assign>>
			<<$authenticationWithCertificate>>
			<<$hasNotifications>>
			<<$notification...[$NL]>>
			<<$resource...[$NL]>>

			return server;
		}
	}
end

def type(authenticator) and trigger(assign)
	authenticator = new $service+pascalCase~ServiceAuthenticator(box);
end

def type(authenticator) and trigger(field)
	private static $service+pascalCase~ServiceAuthenticator authenticator;
end

def type(authenticationWithCertificate)
	server.secure(new io.intino.alexandria.http.security.DefaultSecurityManager(new java.io.File("$file"), "$password"));
end

def trigger(notification)
	server.route("$path+format").post(manager -> new $package.rest.notifications.$name+pascalCase~Notification(box, manager).execute());
end

def type(resource)
	server.route($path+format)<<$authenticate>>.$method+firstlowerCase(manager -> new $operation+firstUpperCase~$name+pascalCase~Resource(box, manager).execute());
end

def type(bearer) and trigger(authenticate)
	.before(manager -> { if (manager.fromHeader("Authorization") == null || !authenticator.isAuthenticated(manager.fromHeader("Authorization").replace("Bearer ", ""))) throw new io.intino.alexandria.exceptions.Unauthorized("Credential not found");})
end

def type(basic) and trigger(authenticate)
	.before(manager -> { if (manager.fromHeader("Authorization") == null || !authenticator.isAuthenticated(manager.fromHeader("Authorization").replace("Basic ", ""))) throw new io.intino.alexandria.exceptions.Unauthorized("Credential not found");})
end

def type(custom) and trigger(authenticate)
	.before(manager -> { if (!authenticator.isAuthenticated(manager.request().queryParams().stream().collect(java.util.stream.Collectors.toMap(p -> p, p -> manager.request().queryParams(p))))) throw new io.intino.alexandria.exceptions.Unauthorized("Credential not found");})
end

def type(path) and trigger(format)
	"$name"<<$custom...[]>>
end

def trigger(custom)
	.replace("{$value}", box.configuration().get("$value"))
end

def trigger(hasNotifications)
	if (!io.intino.alexandria.http.AlexandriaSparkBuilder.isUI()) server.route("/_alexandria/push").push(new io.intino.alexandria.http.spark.SparkPushService());
end