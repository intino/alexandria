def type(future)
	package $package+validPackage.agenda;

	import $package+validPackage.$box+PascalCase~Box;
	$schemaImport

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {
		private final $box+PascalCase~Box box;

		public $name+FirstUpperCase($box+PascalCase~Box box) {
			this.box = box;
		}

		$option...[$NL$NL]

		@Override
		protected void onTimeout($parameter+signature...[, ]) {

		}
	}
end

def trigger(option)
	@Override
	protected void on$name+firstUpperCase($parameter+signature...[, ]<<, $optionParameter+signature...[, ]>>) {

	}
end

def trigger(signature)
	$type $name
end

def trigger(names)
	$name
end

def type(schemaImport)
	import $package.schemas.*;
end