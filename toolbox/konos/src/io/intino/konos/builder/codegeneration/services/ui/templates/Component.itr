rule type(reference) and trigger(declaration)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;

rule type(reference, item)
	if ($name == null) $name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").<$name+firstUpperCase>item($owner.this.item()).owner($owner.this));

rule type(reference)
	if ($name == null) $name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, collection, embedded) and trigger(declarations)


rule type(component, child, collection) and trigger(declarations)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;
	<<$component+declarations...[$NL]>>

rule type(component, child, displaystamp, single) and trigger(declarations)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;
	<<$component+declarations...[$NL]>>

rule type(component, child, ownertemplatestamp, single) and trigger(declarations)
	public $ownerPackage.$template+firstUpperCase $name;

rule type(component, child, proxystamp, single) and trigger(declarations)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;

rule type(component, child, basestamp, single) and trigger(declarations)
	public $template+firstUpperCase $name;

rule type(component, child) and trigger(declarations)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;
	<<$component+declarations...[$NL]>>

rule type(component, child, displaystamp) and trigger(declaration)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;

rule type(component, child, ownertemplatestamp, single) and trigger(declaration)
	public $ownerPackage.$template+firstUpperCase $name;

rule type(component, child, proxystamp, single) and trigger(declaration)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;

rule type(component, child, basestamp, single) and trigger(declaration)
	public $template+firstUpperCase $name;

rule type(component, child) and trigger(declaration)
	public <<$ancestors+firstUpperCase...[.].>> $name+firstUpperCase $name;

rule type(component) and trigger(unregister)
	if ($name != null) $name.unregister();

rule type(method, multiple, collapsable)
	<<$editableMethods>>
	<<$editableClass>>
	@Override
	public $componentName add(<<$objectType value, >>String label, String description) {
		$componentName child = new $componentName(box()<<.$componentOwnerBox+lowerCase()>>);
		child.id(java.util.UUID.randomUUID().toString());
		child.properties().put("label", label);
		child.properties().put("description", description);
		add(child, "$name");
		<<child.value($objectTypeValue);>>
		notifyAdd(child<<, $objectTypeValue>>);
		return child;
	}
	@Override
	public void remove($componentName child) {
		removeChild(child, "$name");
	}
	public void clear() {
		super.clear("$name");
	}
	@Override
	protected $componentName add(<<$objectType value>>) {
		return add(value, null, null);
	}

rule type(method, multiple)
	<<$editableMethods>>
	<<$editableClass>>
	@Override
	public $componentName add(<<$objectType value>>) {
		$componentName child = new $componentName(box()<<.$componentOwnerBox+lowerCase()>>);
		child.id(java.util.UUID.randomUUID().toString());
		add(child, "$name");
		<<child.value($objectTypeValue);>>
		notifyAdd(child<<, $objectTypeValue>>);
		return child;
	}
	@Override
	public void remove($componentName child) {
		removeChild(child, "$name");
	}
	public void clear() {
		super.clear("$name");
	}

rule type(method, highlighted)
	public $name+firstUpperCase textColor(String color) {
		this._textColor(color);
		this._refreshHighlight();
		return this;
	}

	public $name+firstUpperCase backgroundColor(String color) {
		this._backgroundColor(color);
		this._refreshHighlight();
		return this;
	}

rule type(method, signed)
	public String signSecret() {
	    return this._signSecret();
	}
	public $name+firstUpperCase signInfoProvider(io.intino.alexandria.ui.displays.components.actionable.SignInfoProvider provider) {
		this._signInfoProvider(provider);
		return this;
	}
	public $name+firstUpperCase signChecker(io.intino.alexandria.ui.displays.components.actionable.SignChecker checker) {
		this._signChecker(checker);
		return this;
	}

rule type(method, addressable)
	@Override
	public $name+firstUpperCase address(java.util.function.Function<String, String> addressFromPathResolver) {
		address(addressFromPathResolver.apply(path()));
		return this;
	}

rule type(method, collectionbox)
	@Override
	public $name+firstUpperCase set(java.util.function.Function<String, String> addressFromPathResolver) {
		address(addressFromPathResolver.apply(path()));
		return this;
	}

rule type(method, collection, table)
	<<$selectionMethod>>

	public $name+firstUpperCase~Row create(<<$itemClass item>>) {
		$name+firstUpperCase~Row row = new $name+firstUpperCase~Row(<<($concreteBox+firstUpperCase~Box)>>box());
		row.id(java.util.UUID.randomUUID().toString());
		<<row.item($itemVariable);>>
		return row;
	}

rule type(method, collection, dynamictable)
	<<$selectionMethod>>

	public $name+firstUpperCase~Row create(<<$itemClass item>>) {
		$name+firstUpperCase~Row row = new $name+firstUpperCase~Row(<<($concreteBox+firstUpperCase~Box)>>box());
		row.id(java.util.UUID.randomUUID().toString());
		<<row.item($itemVariable);>>
		return row;
	}

rule type(method, collection)
	$selectionMethod
	<<$item+addMethod...[$NL$NL]>>

	<<$item+removeMethod...[$NL$NL]>>

rule type(component, child) and trigger(method)

rule type(component, child, displaystamp) and trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		<<$reference+declaration...[$NL]>>
		<<$component+declaration...[$NL]>>

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}

		@Override
		public void $methodName() {
			super.init();
			<<$reference...[$NL]>>
			<<$component+child...[$NL]>>
		}

		@Override
		public void unregister() {
			super.unregister();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}

rule type(component, child, proxystamp) and trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		<<$reference+declaration...[$NL]>>
		<<$component+declaration...[$NL]>>

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}

		@Override
		public void $methodName() {
			super.init();
			<<$reference...[$NL]>>
			<<$component+child...[$NL]>>
		}

		@Override
		public void unregister() {
			super.unregister();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}

rule type(component, child, basestamp, single) and trigger(class)

rule type(component, child, collection, embedded) and trigger(class)
	public class $name+firstUpperCase extends $package.ui.displays<<.$packageType~s>>.$name+firstUpperCase {
		public $name+firstUpperCase($abstractBox+type box) {
			this(($concreteBox+firstUpperCase~Box)box);
		}
		public $name+firstUpperCase($concreteBox+firstUpperCase~Box box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}
	}

rule type(component, child, collection) and trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		<<$reference+declaration...[$NL]>>
		<<$component+declaration...[$NL]>>

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}

		@Override
		public void $methodName() {
			super.$methodName();
			<<$reference...[$NL]>>
			<<$component+child...[$NL]>>
		}

		@Override
		public void unregister() {
			super.unregister();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}

rule attribute(notifyReady)
	notifyReady();

rule type(component, child, block, conditional) and trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		<<$reference+declaration...[$NL]>>
		<<$component+declaration...[$NL]>>

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}

		@Override
		public void $methodName() {
			super.init();
			<<$reference...[$NL]>>
			<<$component+child...[$NL]>>
			<<$component+conditionalReferences...[$NL]>>
		}

		@Override
		public void unregister() {
			super.unregister();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}

rule type(component, child) and trigger(class)
	public class $name+firstUpperCase extends $extends $implements {
		<<$reference+declaration...[$NL]>>
		<<$component+declaration...[$NL]>>

		public $name+firstUpperCase($abstractBox+type box) {
			super(box);
			<<$properties+common>>
			<<$properties+specific>>
		}

		@Override
		public void $methodName() {
			super.init();
			<<$reference...[$NL]>>
			<<$component+child...[$NL]>>
		}

		@Override
		public void unregister() {
			super.unregister();
			<<$component+unregister...[$NL]>>
		}
		$methods
		<<$component+class...[$NL$NL]>>
		<<$component+method...[$NL$NL]>>
	}

rule type(extends, multiple, image)
	io.intino.alexandria.ui.displays.components.MultipleImage<$abstractBox+type, <<$componentPrefix+firstUpperCase~.>>$componentName, $objectType>

rule type(extends, multiple)
	io.intino.alexandria.ui.displays.components.Multiple<$abstractBox+type, <<$componentPrefix+firstUpperCase~.>>$componentName, $objectType>

rule type(extends, collection, grid)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<io.intino.alexandria.ui.displays.notifiers.$type+firstUpperCase$facet...[]~Notifier, $abstractBox+type, $itemClass>

rule type(extends, collection, table)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, io.intino.alexandria.ui.displays.components.Row, $itemClass>

rule type(extends, collection, dynamictable)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, io.intino.alexandria.ui.displays.components.Row, $itemClass>

rule type(extends, collection)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<$abstractBox+type, $componentType, $itemClass>

rule type(extends, item)
	io.intino.alexandria.ui.displays.components.Item<$abstractBox+type, $itemClass>

rule type(extends, displaystamp)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<io.intino.alexandria.ui.displays.notifiers.$type+firstUpperCase$facet...[]~Notifier, $abstractBox+type>

rule type(extends, proxystamp)
	io.intino.alexandria.ui.displays.components.ProxyStamp<io.intino.alexandria.ui.displays.notifiers.ProxyStampNotifier, $abstractBox+type>

rule type(extends, basestamp)
	$type+firstUpperCase

rule type(extends)
	io.intino.alexandria.ui.displays.components.$type+firstUpperCase$facet...[]<io.intino.alexandria.ui.displays.notifiers.$type+firstUpperCase$facet...[]~Notifier, $abstractBox+type>

rule type(component, child, multipleblock) and trigger(rootChildReferences)

rule type(component, child, collection, embedded) and trigger(rootChildReferences)

rule type(component, child, collection) and trigger(rootChildReferences)
	<<if ($parent != null)>> $name = <<$ancestorsNotMe...[.].>>$name;
	<<$component+rootChildReferences...[$NL]>>

rule type(component, child) and trigger(rootChildReferences)
	<<if ($parent != null)>> $name = <<$ancestorsNotMe...[.].>>$name;
	<<$component+rootChildReferences...[$NL]>>

rule type(component, child, collection, embedded) and trigger(childReferences)

rule type(component, child, collection) and trigger(childReferences)
	<<if ($parent != null)>> $name = <<$ancestors...[.].>>$name;
	<<$component+childReferences...[$NL]>>

rule type(component, child) and trigger(childReferences)
	<<if ($parent != null)>> $name = <<$ancestors...[.].>>$name;
	<<$component+childReferences...[$NL]>>

rule type(component, child, collection, embedded) and trigger(rootReferences)

rule type(component, child, collection) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	<<$component+rootChildReferences...[$NL]>>

rule type(component, child, displaystamp) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	<<$component+rootChildReferences...[$NL]>>

rule type(component, child, ownertemplatestamp, multiple) and trigger(rootReferences)
	if ($name == null) $name = register(new $ownerPackage.$name+firstUpperCase(<<($ownerBox~Box)>>box().owner()).<$ownerPackage.$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, proxystamp, multiple) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, basestamp, multiple) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, ownertemplatestamp, single) and trigger(rootReferences)
	if ($name == null) $name = register(new $ownerPackage.$template+firstUpperCase$generic(<<($ownerBox~Box)>>box().owner()).<$ownerPackage.$template+firstUpperCase$generic>id("$id").owner($owner.this));

rule type(component, child, proxystamp, single) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, basestamp, single) and trigger(rootReferences)
	if ($name == null) $name = register(new $template+firstUpperCase$generic(<<($concreteBox+firstUpperCase~Box)>>box()).id("$id"));

rule type(component, child) and trigger(rootReferences)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	<<$component+rootChildReferences...[$NL]>>

rule type(component, child, collection, embedded) and trigger(references)

rule type(component, child, collection) and trigger(references)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	<<$component+childReferences...[$NL]>>

rule type(component, child) and trigger(references)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));
	<<$component+childReferences...[$NL]>>

rule type(component, child, block, conditional) and trigger(conditionalReferences)

rule type(component, child, block) and trigger(conditionalReferences)
	<<$component+conditionalReferences...[$NL]>>

rule type(component, child) and trigger(conditionalReferences)
	if ($owner.this.$name == null) $owner.this.$name = <<$ancestorsNotMe...[.].>>$name;
	<<$binding...[$NL]>>
	<<$attachedTo>>

rule type(component, child, collection, embedded) and trigger(initializations)

rule type(component, child, collection) and trigger(initializations)
	<<$binding...[$NL]>>
	<<$attachedTo>>
	<<$component+initializations...[$NL]>>

rule type(component, child) and trigger(initializations)
	<<$binding...[$NL]>>
	<<$attachedTo>>
	<<$component+initializations...[$NL]>>

rule type(component, child, displaystamp)
	if ($name == null) $name = $owner.this.$name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, ownertemplatestamp, multiple)
	if ($name == null) $name = $owner.this.$name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, basestamp, multiple)
	if ($name == null) $name = $owner.this.$name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, ownertemplatestamp, single)
	if ($name == null) $name = $owner.this.$name = register(new $ownerPackage.$template+firstUpperCase$generic(<<($ownerBox~Box)>>box().owner()).<$ownerPackage.$template+firstUpperCase$generic>id("$id").owner($owner.this));

rule type(component, child, proxystamp, single)
	if ($name == null) $name = $owner.this.$name = register(new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(component, child, basestamp, single)
	if ($name == null) $name = $owner.this.$name = register(new $template+firstUpperCase$generic(<<($concreteBox+firstUpperCase~Box)>>box()).id("$id"));

rule type(component, child)
	if ($name == null) $name = register(new $name+firstUpperCase(box()).<$name+firstUpperCase>id("$id").owner($owner.this));

rule type(facet)
	$name+firstUpperCase

rule type(binding, toolbar)
	if ($name != null) $name.bindTo(<<$ancestorsNotMe...[.].>>$collection);

rule type(binding, grouping)
	if ($name != null) $name.bindTo($collection...[,]);

rule type(binding, datenavigator)
	if ($name != null) $name.bindTo($component...[,]);

rule type(binding, groupingToolbar)
	if ($name != null) $name.bindTo($grouping...[,]);

rule type(binding, sorting)
	if ($name != null) $name.bindTo($collection...[,]);

rule type(binding, searchbox)
	if ($name != null) $name.bindTo($collection...[,]);

rule type(binding, download)
	if ($name != null) $name.bindTo($collection...[,]);

rule type(binding, temporalslider)
	if ($name != null) $name.bindTo($collection...[,]);

rule type(binding, openblock)
	if ($name != null) $name.bindTo($block);

rule type(binding, closeblock)
	if ($name != null) $name.bindTo($block);

rule type(binding, opendialog)
	if ($name != null) $name.bindTo($dialog);

rule type(binding, closedialog)
	if ($name != null) $name.bindTo($dialog);

rule type(binding, opendrawer)
	if ($name != null) $name.bindTo($drawer);

rule type(binding, closedrawer)
	if ($name != null) $name.bindTo($drawer);

rule type(binding, openpopover)
	if ($name != null) $name.bindTo($popover);

rule type(binding, opennextitem)
	if ($name != null) $name.bindTo($collection);

rule type(binding, openpreviousitem)
	if ($name != null) $name.bindTo($collection);

rule type(binding, decisiondialog)
	if ($name != null) $name.bindTo($selector);

rule type(binding, collectiondialog)
	if ($name != null) $name.bindTo($collection);

rule type(binding, collectionbox, add)
	if ($name != null) $name.bindTo($name.$collection);

rule type(binding, collectionbox)
	if ($name != null) $name.bindTo($collection);

rule type(binding)
	if ($name != null) $name.bindTo($selector, "$option");

rule type(attachedTo, grouping)
	if ($name != null) $name.attachTo($grouping);

rule type(implements, selectable)
	implements io.intino.alexandria.ui.displays.components.collection.Selectable

rule type(implements, multiple, collapsable)
	implements io.intino.alexandria.ui.displays.components.multiple.Collapsable<$abstractBox+type, <<$componentPrefix+firstUpperCase~.>>$componentName, $objectType>

rule type(implements, multiple)
	implements io.intino.alexandria.ui.displays.components.multiple.NonCollapsable<$abstractBox+type, <<$componentPrefix+firstUpperCase~.>>$componentName, $objectType>

rule type(implements, option)
	implements io.intino.alexandria.ui.displays.components.selector.SelectorOption

rule type(implements, dynamicloaded)
	implements io.intino.alexandria.ui.displays.components.DynamicLoaded

rule type(implements, addressable, action)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements, addressable, openlayer)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements, addressable, selector)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements, addressable, grouping)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements, addressable, searchbox)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements, addressable, sorting)
	implements io.intino.alexandria.ui.displays.components.addressable.Addressed<$name+firstUpperCase>

rule type(implements)
	implements --undefined--

rule type(properties, actionable) and trigger(common)
	<<_title("$title");>>
	<<_color("$color");>>
	<<_readonly($readonly);>>
	<<_mode(io.intino.alexandria.ui.displays.components.Actionable.Mode.valueOf("$mode+firstUpperCase"));>>
	<<_signMode(io.intino.alexandria.ui.displays.components.Actionable.SignMode.valueOf("$signMode+firstUpperCase"));>>
	<<_signChecker(_$signChecker());>>
	<<$actionableMode>>

rule type(properties, appDirectory) and trigger(common)
	<<_icon("$icon");>>

rule type(properties, dashboard) and trigger(common)
	<<$parameter...[$NL]>>

rule type(properties) and trigger(common)
	<<label("$label");>>
	<<name("$name");>>
	<<_color("$color");>>

rule type(properties, proxyStamp) and trigger(specific)
	_proxy(new $proxyPackage.$proxyDisplay+firstUpperCase(new io.intino.alexandria.ui.server.pages.Unit("$proxyUseName", $proxyUseUrl<<,"$proxyUseSocketPath">>)));
	<<$parameter...[$NL]>>

rule type(properties, selector) and trigger(specific)
	<<_multipleSelection($multipleSelection);>>
	<<_readonly($readonly);>>
	<<_path("$path");>>

rule type(properties, grouping) and trigger(specific)
	<<_path("$path");>>

rule type(properties, kpi) and trigger(specific)
	<<_value($value);>>

rule type(properties, chat) and trigger(specific)
	<<_emptyMessage("$emptyMessage");>>
	<<$loadingImage+resourceMethod>>
	<<$incomingImage+resourceMethod>>
	<<$outgoingImage+resourceMethod>>

rule type(properties, sorting) and trigger(specific)
	<<_path("$path");>>

rule type(properties, searchbox) and trigger(specific)
	<<_path("$path");>>

rule type(properties, materialicon) and trigger(specific)
	<<_icon("$icon");>>
	<<_darkIcon("$darkIcon");>>

rule type(properties, icon) and trigger(specific)
	<<$icon+resourceMethod>>
	<<$darkIcon+resourceMethod>>

rule type(properties, microsite) and trigger(specific)
	<<$site+resourceMethod>>

rule type(properties, block) and trigger(specific)
	<<$background+resourceMethod>>
	<<$badge>>
	<<$drawer>>
	<<$popover>>

rule type(properties, image, avatar) and trigger(specific)
	<<_text("$text");>>

rule type(properties, image, multiple, componentClass) and trigger(specific)
	<<$value+resourceMethod>>
	<<$defaultValue+resourceMethod>>
	<<_readonly($readonly);>>

rule type(properties, image, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, image) and trigger(specific)
	<<$value+resourceMethod>>
	<<$defaultValue+resourceMethod>>
	<<_readonly($readonly);>>

rule type(properties, file, multiple, componentClass) and trigger(specific)
	<<$value+resourceMethod>>
	<<_readonly($readonly);>>

rule type(properties, file, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, file) and trigger(specific)
	<<$value+resourceMethod>>
	<<_readonly($readonly);>>

rule type(properties, openpage) and trigger(specific)
	<<_path("$path");>>

rule type(properties, openlayer) and trigger(specific)
	<<_path("$path");>>
	<<_transition(io.intino.alexandria.ui.displays.components.OpenLayer.Transition.valueOf("$transition"));>>
	<<_showHeader($showHeader);>>

rule type(properties, openpopover) and trigger(specific)
	<< _triggerEvent(io.intino.alexandria.ui.displays.components.OpenPopover.TriggerEvent.$triggerEvent);>>

rule type(properties, opensite) and trigger(specific)
	<<_site("$site");>>

rule type(properties, switch) and trigger(specific)
	<<_path("$path");>>
	<<_state(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.valueOf("$state"));>>

rule type(properties, toggle) and trigger(specific)
	<<_path("$path");>>
	<<_state(io.intino.alexandria.ui.displays.events.actionable.ToggleEvent.State.valueOf("$state"));>>

rule type(properties, copytoclipboard) and trigger(specific)
	<<_text("$text");>>

rule type(properties, signText) and trigger(specific)
	<<_text("$text");>>
	<<_signFormat(io.intino.alexandria.ui.displays.components.SignAction.SignFormat.valueOf("$signFormat"));>>

rule type(properties, signDocument) and trigger(specific)
    <<_document($owner.class.getResource("$value"));>>

rule type(properties, action) and trigger(specific)
	<<_path("$path");>>

rule type(properties, export) and trigger(specific)
	<<_from($from~L);>>
	<<_to($to~L);>>
	<<_min($min~L);>>
	<<_max($max~L);>>
	<<_range($rangeMin,$rangeMax);>>
	<<_options(java.util.Arrays.asList("$option...[","]"));>>

rule type(properties, download) and trigger(specific)
	<<_options(java.util.Arrays.asList("$option...[","]"));>>

rule type(properties, download, selection) and trigger(specific)
	<<_options(java.util.Arrays.asList("$option...[","]"));>>

rule type(properties, chart) and trigger(specific)
	<<_query("$query");>>
	<<_serverUrl("$serverUrl");>>
	<<$input+inputMethod>>
	<<_output("$output");>>

rule type(properties, appDirectory, fromFile) and trigger(specific)
	<<$source+fileMethod>>

rule type(properties, appDirectory, fromResource) and trigger(specific)
	<<$source+resourceMethod>>

rule type(properties, appDirectory, inline) and trigger(specific)
	$application...[$NL]

rule type(properties, datenavigator) and trigger(specific)
	<<_selected(java.time.Instant.ofEpochMilli($value~L));>>
	<<_range(java.time.Instant.ofEpochMilli($from~L), java.time.Instant.ofEpochMilli($to~L));>>
	<<_scales($scale...[,]);>>

rule type(scale)
    io.intino.alexandria.Scale.$value+firstUpperCase

rule type(properties, timeline) and trigger(specific)
	<<_mode(io.intino.alexandria.ui.displays.components.Timeline.Mode.valueOf("$mode+firstUpperCase"));>>

rule type(properties, eventline) and trigger(specific)
	<<_arrangement(io.intino.alexandria.ui.displays.components.Eventline.Arrangement.valueOf("$arrangement+firstUpperCase"));>>

rule type(appDirectoryApplication)
	_add("$name", "$url")<<$translation...[]>>;

rule type(appDirectoryApplicationTranslation)
	.translation("$language", "$name")

rule type(properties, dashboard, shiny) and trigger(specific)
	<<$serverScript+resourceMethod>>
	<<$uiScript+resourceMethod>>
	<<$resource+resourceMethod...[$NL]>>

rule type(properties, documenteditor, collabora) and trigger(specific)
    <<_document("$document");>>
	<<_editorUrl("$editorUrl");>>

rule type(properties, dashboard, metabase) and trigger(specific)
	<<_url("$url");>>
	<<_secretKey("$secretKey");>>
	<<_bordered($bordered);>>
	<<_titled($titled);>>
	<<_theme(io.intino.alexandria.ui.displays.components.DashboardMetabase.Theme.$theme);>>

rule type(properties, number, multiple, componentClass) and trigger(specific)
	<<_value($value);>>
	<<_min($min);>>
	<<_max($max);>>
	<<_readonly($readonly);>>

rule type(properties, number, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, number) and trigger(specific)
	<<_value($value);>>
	<<_min($min);>>
	<<_max($max);>>
	<<_readonly($readonly);>>

rule type(properties, date, multiple, componentClass) and trigger(specific)
	<<_value(java.time.Instant.ofEpochMilli($value~L));>>
	<<_min(java.time.Instant.ofEpochMilli($min~L));>>
	<<_max(java.time.Instant.ofEpochMilli($max~L));>>
	<<_readonly($readonly);>>

rule type(properties, date, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, date) and trigger(specific)
	<<_value(java.time.Instant.ofEpochMilli($value~L));>>
	<<_min(java.time.Instant.ofEpochMilli($min~L));>>
	<<_max(java.time.Instant.ofEpochMilli($max~L));>>
	<<_readonly($readonly);>>

rule type(properties, text, multiple, componentClass) and trigger(specific)
	<<_value("$defaultValue");>>
	<<_readonly($readonly);>>

rule type(properties, text, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, text) and trigger(specific)
	<<_value("$defaultValue");>>
	<<_readonly($readonly);>>
	<<_pattern("$pattern");>>

rule type(properties, location, multiple, componentClass) and trigger(specific)
	<<$icon+resourceMethod>>
	<<_value("$value");>>
	<<_readonly($readonly);>>

rule type(properties, location, multiple) and trigger(specific)
	<<_readonly($readonly);>>

rule type(properties, location) and trigger(specific)
	<<$icon+resourceMethod>>
	<<_value("$value");>>
	<<_readonly($readonly);>>

rule type(properties, collection, map) and trigger(specific)
	<<_type(io.intino.alexandria.ui.displays.components.Map.Type.valueOf("$type"));>>
	<<$icon+resourceMethod>>
	<<$layer+resourceMethod>>

rule type(properties, collection) and trigger(specific)
	<<_source(new io.intino.alexandria.ui.sources.$sourceClass+firstUpperCase());>>
	<<$column...[$NL]>>
	<<_pageSize($pageSize);>>

rule type(properties, slider) and trigger(specific)
	<<_value($value);>>
	<<_range($min,$max);>>
	<<_animation($interval,$loop);>>
	<<_readonly($readonly);>>
	<<$ordinal+ordinalMethod...[$NL]>>

rule type(properties, rangeslider) and trigger(specific)
	<<_value($from,$to);>>
	<<_range($min,$max);>>
	<<_animation($interval,$loop);>>
	<<_readonly($readonly);>>
	<<$ordinal+ordinalMethod...[$NL]>>

rule type(properties, temporalslider) and trigger(specific)
	<<_value($value);>>
	<<_range(java.time.Instant.ofEpochMilli($min~L),java.time.Instant.ofEpochMilli($max~L));>>
	<<_animation($interval,$loop);>>
	<<_readonly($readonly);>>
	<<$ordinal+ordinalMethod...[$NL]>>

rule type(properties, collectiondialog) and trigger(specific)
	<<_allowSearch($allowSearch);>>

rule type(properties, frame) and trigger(specific)
	<<_url("$url");>>

rule type(properties) and trigger(specific)

rule type(inputMethod, csv) and trigger(inputMethod)
	_input(new io.intino.alexandria.ui.displays.components.chart.datasources.CSVDataSource($owner.class.getResource("$value")));

rule type(inputMethod, source) and trigger(inputMethod)
	_input(new $value());

rule type(parameterMethod)
	_add("$name", "$value");

rule trigger(fileMethod)
	_$name(new java.io.File("$value")<<, "$extraParam">>);

rule trigger(resourceMethod)
	_$name($owner.class.getResource("$value")<<, "$extraParam">>);

rule trigger(ordinalMethod)
	_add(new io.intino.alexandria.ui.displays.components.slider.ordinals.$name+firstUpperCase~Ordinal());

rule type(actionableMode, splitbutton)
	<<_options(java.util.Arrays.asList("$option...[","]"));>>
	<<_option("$default");>>

rule type(actionableMode, iconsplitbutton)
	<<_options(java.util.Arrays.asList("$option...[","]"));>>
	<<_option("$default");>>
	<<_icon("$icon");>>
	<<_darkIcon("$darkIcon");>>

rule type(actionableMode, materialiconsplitbutton)
	<<_options(java.util.Arrays.asList("$option...[","]"));>>
	<<_option("$default");>>
	<<_icon("$icon");>>
	<<_darkIcon("$darkIcon");>>

rule type(actionableMode, iconbutton)
	_icon("$icon");
	<<_darkIcon("$darkIcon");>>

rule type(actionableMode, icontoggle)
	_icon("$icon");
	<<_darkIcon("$darkIcon");>>

rule type(actionableMode, materialiconbutton)
	_icon("$icon");
	<<_darkIcon("$darkIcon");>>

rule type(actionableMode, materialicontoggle)
	_icon("$icon");
	<<_darkIcon("$darkIcon");>>

rule type(badge)
	<<_value($value);>>

rule type(drawer)

rule type(popover)

rule type(selectionMethod)
	public void onSelect(io.intino.alexandria.ui.displays.events.SelectionListener listener) {
		super.addSelectionListener(listener);
	}

rule type(editableMethods)
	public void onAdd(io.intino.alexandria.ui.displays.events.editable.AddItemListener listener) {
		super.addItemListener(listener);
	}
	public void onChange(io.intino.alexandria.ui.displays.events.editable.ChangeItemListener listener) {
		super.changeItemListener(listener);
	}
	public void onRemove(io.intino.alexandria.ui.displays.events.editable.RemoveItemListener listener) {
		super.removeItemListener(listener);
	}

rule type(editableClass)
	public class $componentName extends $componentType {
		public $componentName($abstractBox+type box) {
			super(box);
			<<$componentProperties+common>>
			<<$componentProperties+specific>>
		}
	}

rule type(item) and trigger(addDeclaration)
	$name(add$name+firstUpperCase(new $name+firstUpperCase(box())<<, $itemVariable>>))

rule type(item) and trigger(type)
	$name+firstUpperCase

rule type(item) and trigger(addRow)
	$name = register(add$name+firstUpperCase(box()));

rule type(item) and trigger(property)
	public $name+firstUpperCase $name;

rule type(item) and trigger(addMethod)
	$methodAccessibility $name+firstUpperCase create$methodName+firstUpperCase(<<$itemClass element>>) {
		$name+firstUpperCase result = new $name+firstUpperCase(<<($concreteBox+firstUpperCase~Box)>>box());
		result.id(java.util.UUID.randomUUID().toString());
		<<result.item($itemVariable);>>
		<<result.section(source().section($itemVariable));>>
		return result;
	}

rule type(itemClass, map)
	io.intino.alexandria.ui.model.PlaceMark<$value>

rule type(itemClass)
	$value

rule type(itemVariable, map)
	element.item()

rule type(itemVariable)
	element

rule type(useUrl, custom)
	box().configuration().get("$value")

rule type(column)
	_add(new io.intino.alexandria.ui.model.datasource.grid.GridColumn<$itemClass>().name("$name").label("$label").type(io.intino.alexandria.ui.model.datasource.grid.GridColumn.Type.$type)<<.width($width)>><<.sortable($sortable)>><<.address("$address")>><<.fixed($fixed)>><<.pattern("$pattern")>>);

rule type(useUrl)
	"$value"
