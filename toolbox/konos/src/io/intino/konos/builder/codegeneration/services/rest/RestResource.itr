rule type(notification)
	package $package.rest.notifications;

	import java.util.List;
	import java.util.ArrayList;
	import io.intino.alexandria.exceptions.*;
	import $package.*;
	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.rest.Resource;
	import io.intino.alexandria.http.pushservice.Client;
	import io.intino.alexandria.http.pushservice.Session;
	import io.intino.alexandria.http.pushservice.MessageCarrier;
	import io.intino.alexandria.http.spark.SparkManager;
	import io.intino.alexandria.http.spark.SparkNotifier;
	import io.intino.alexandria.http.spark.SparkPushService;

	$schemaImport

	public class $name+PascalCase~Notification implements Resource {

		private $box+FirstUpperCase~Box box;
		private SparkManager<?> manager;

		public $name+PascalCase~Notification($box+FirstUpperCase~Box box, SparkManager manager) {
			this.box = box;
			this.manager = manager;
		}

		public void execute() <<throws $throws...[, ]>> {
			Session session = manager.currentSession();
			String clientId = java.util.UUID.randomUUID().toString();
			$package+validPackage.actions.$name+PascalCase~Action action = fill(new $package+validPackage.actions.$name+firstUpperCase~Action());
			manager.pushService().onOpen(client -> {
				action.onOpen((Client)client, notifier(session, (Client)client));
				return true;
			});
			manager.pushService().onClose(clientId).execute((java.util.function.Consumer<Client>) action::onClose);
			<<$returnType+methodCall>>manager.baseUrl().replace("http", "ws") + "/_alexandria/push?id=" + clientId<<$returnType+ending>>;
		}

		private $package+validPackage.actions.$name+PascalCase~Action fill($package+validPackage.actions.$name+PascalCase~Action action) {
			action.box = this.box;
			action.context = context();
			<<$parameter+assign...[$NL]>>
			return action;
		}

		<<$returnType+method>>

		private SparkNotifier notifier(Session session, Client client) {
			return new SparkNotifier(new MessageCarrier(manager.pushService(), session, client));
		}

		private io.intino.alexandria.http.spark.SparkContext context() {
			io.intino.alexandria.http.spark.SparkContext context = new io.intino.alexandria.http.spark.SparkContext(manager);
			<<$authenticationValidator+put>>
			context.put("ip", manager.ip());
			return context;
		}
	}




rule type(resource)
	package $package.rest.resources;

	import java.util.List;
	import java.util.Set;
	import java.util.ArrayList;
	import io.intino.alexandria.exceptions.*;
	import $package.*;
	import io.intino.alexandria.core.Box;
	import io.intino.alexandria.rest.*;
	import io.intino.alexandria.http.spark.SparkManager;
	import io.intino.alexandria.http.spark.SparkPushService;

	$schemaImport

	public class $operation+firstUpperCase$name+PascalCase~Resource implements Resource {
		<<$word+declaration...[$NL]>>

		private $box+FirstUpperCase~Box box;
		private SparkManager<SparkPushService> manager;

		public $operation+firstUpperCase$name+PascalCase~Resource($box+FirstUpperCase~Box box, SparkManager manager) {
			this.box = box;
			this.manager = manager;
		}

		public void execute() throws AlexandriaException {
			<<$returnType+methodCall>>fill(new $package+validPackage.actions.$operation+firstUpperCase$name+PascalCase~Action()).execute()<<$returnType+ending>>;
		}

		private $package+validPackage.actions.$operation+firstUpperCase$name+PascalCase~Action fill($package+validPackage.actions.$operation+firstUpperCase$name+PascalCase~Action action) throws AlexandriaException {
			action.box = this.box;
			action.context = context();
			try {
				<<$parameter+assign...[$NL]>>
			} catch (Throwable e) {
				action.onMalformedRequest(e);
			}
			return action;
		}

		<<$returnType+method>>

		private io.intino.alexandria.http.spark.SparkContext context() {
			io.intino.alexandria.http.spark.SparkContext context = new io.intino.alexandria.http.spark.SparkContext(manager);
			$authenticationValidator+put
			context.put("ip", manager.ip());
			return context;
		}
	}

rule type(word) and trigger(declaration)
	public enum $name+PascalCase {
		$words...[, ];
	}

rule attribute(void) and trigger(methodCall)


rule type(redirect) and trigger(methodCall)
	redirect(

rule type(response) and trigger(methodCall)
	write(

rule attribute(void) and trigger(ending)

rule trigger(ending)
	)

rule attribute(void) and trigger(write)


rule type(redirect) and trigger(method)
	private void redirect(String url) {
		manager.redirect(url);
	}

rule type(response, multipart) and trigger(method)
	private void write($value object) {
		manager.write(object.content());
	}
rule type(response, file) and trigger(method)
	private void write($value object) {
		manager.write(object);
	}

rule type(response) and trigger(method)
	private void write($value object) {
		manager.write(io.intino.alexandria.rest.ResponseAdapter.adapt(object)<<, "$format">>);
	}

rule type(parameter) and trigger(type)
	$parameterType

rule type(parameter, defaultvalue) and attribute(in, body) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase~OrDefault("$defaultValue"), $parameterType);

rule type(parameter, defaultvalue) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase~OrDefault("$name", "$defaultValue"), $parameterType);

rule type(parameter, file, list) and attribute(in, form) and trigger(assign)
	action.$name+CamelCase = manager.fromPartsAsResources();

rule type(parameter, file) and attribute(in, form) and trigger(assign)
	action.$name+CamelCase = manager.from$in+firstUpperCase~AsResource("$name");

rule type(parameter, required, file) and attribute(in, form) and trigger(assign)
	action.$name+CamelCase = manager.from$in+firstUpperCase~AsResourceOrElseThrow("$name", () -> new BadRequest("Parameter missed: $name"));

rule type(parameter) and attribute(in, form) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase~AsString("$name"), $parameterType);

rule type(parameter, required) and attribute(in, form) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase~AsStringOrElseThrow("$name", () -> new BadRequest("Parameter missed: $name")), $parameterType);

rule type(parameter, file) and  attribute(in, body) and trigger(assign)
	action.$name+CamelCase = new io.intino.alexandria.Resource("$name", manager.fromBodyAsBytes());

rule type(parameter) and attribute(in, body) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase(), $parameterType);

rule type(parameter, required) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase~OrElseThrow("$name", () -> new BadRequest("Parameter missed: $name")), $parameterType);

rule type(parameter) and trigger(assign)
	action.$name+CamelCase = io.intino.alexandria.rest.RequestAdapter.adapt(manager.from$in+firstUpperCase("$name"), $parameterType);

rule type(list) and trigger(parameterType)
	new com.google.gson.reflect.TypeToken<java.util.List<$value>>(){}.getType()

rule type(authenticationValidator, Custom) and trigger(put)

rule type(authenticationValidator) and trigger(put)
	context.put("Authorization", manager.fromHeader("Authorization") != null ? manager.fromHeader("Authorization").replace("$type ", "") : null);

rule trigger(parameterType)
	$value.class

rule type(schemaImport)
	import $package.schemas.*;
