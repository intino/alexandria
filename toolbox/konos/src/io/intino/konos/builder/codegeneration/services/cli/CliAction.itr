def type(command)
	package $package+validPackage.actions;

	import io.intino.alexandria.cli.command.MessageProperties;
    import io.intino.alexandria.cli.response.Text;<<
    $response+import>>
    import $package+validPackage.$box+FirstUpperCase~Box;

    public class $name+firstUppercase~Action {
    	public $box+FirstUpperCase~Box box;
    	public MessageProperties properties;
    	public String state;
    	$parameter+declaration

    	public $response+type execute() {
    		return null;
    	}

        <<$response+method...[$NL]>>
    }
end

def type(condition)
    public io.intino.alexandria.cli.response.Text when$value+firstUpperCase() {
        return null;
    }
end

def type(parameter, list)
    public List<String> $name;
end

def type(parameter)
    public String $name;
end

def type(response, multiline) and trigger(type)
    MultiLineProvider
end

def type(response, attachment) and trigger(type)
    io.intino.alexandria.Resource
end

def type(response, confirmation) and trigger(type)
    io.intino.alexandria.cli.response.QuestionProvider
end

def type(response) and trigger(type)
    String
end

def type(response, multiline) and trigger(import)
    import $package+validPackage.cli.commands.$command+firstUppercase~Command.MultiLineProvider;
end

def type(response) and trigger(type)
    io.intino.alexandria.cli.response.Text
end

def type(response, confirmation) and trigger(method)
    $option...[$NL]
end

def type(response) and trigger(method)
end

def type(option)
    public io.intino.alexandria.cli.response.Text when$value+firstUppercase() {
        return null;
    }
end