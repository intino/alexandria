rule type(factory)
	package $package.mounters;

	import io.intino.alexandria.event.Event;
	import $package+validPackage.$box+firstUpperCase~Box;

	import java.util.HashMap;
	import java.util.List;
	import java.util.Map;
	import java.util.stream.Stream;

	public class MounterFactory {
		private Map<Class<? extends Event>, List<Mounter>> mountersByClass = new HashMap<>();
		private Map<String, List<Mounter>> mountersByType = new HashMap<>();

		public MounterFactory($box+firstUpperCase~Box box) {
			$event+put...[$NL]
		}

		public List<Mounter> mountersOf(Event event) {
			List<Mounter> mounters = mountersByClass.getOrDefault(event.getClass(), List.of());
			if (mounters.isEmpty()) mounters = mountersByType.getOrDefault(event.type(), List.of());
			return mounters;
		}

		public void handle(Event... events) {
			Stream.of(events).forEach(event -> {
				mountersOf(event).forEach(m -> m.handle(event));
			});
		}
	}

rule trigger(put)
	mountersByClass.put($eventType.class, java.util.List.of($mounter...[, ]));
	mountersByType.put("$type", java.util.List.of($mounter...[, ]));

rule trigger(mounter)
	new $package.$datamart+lowercase.mounters.$name+FirstUpperCase(box)
