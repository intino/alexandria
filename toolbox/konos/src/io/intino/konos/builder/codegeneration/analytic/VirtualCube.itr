def type(cube, src)
	package $package.analytic.cubes;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.led.buffers.store.ByteStore;

	import $package.analytic.Axis;
	import $package.analytic.axes.*;

	import java.io.File;
	import java.util.*;
	import java.util.stream.Collectors;
	import java.util.function.Predicate;

	public class $name+FirstUpperCase extends Abstract$name+FirstUpperCase {

		public $name+FirstUpperCase(List<Loader> loaders) {
			super(loaders);
		}

		public static long $name+firstLowerCase~Id($name+FirstUpperCase.Fact fact) {
			return fact.id();//TODO
		}

		<<$customDimension+staticMethod...[$NL$NL]>>

		<<$customFilter+staticMethod...[$NL$NL]>>

		<<$customIndicator+staticMethod...[$NL$NL]>>

		@Override
		public $name+FirstUpperCase execute() {
			super.execute();
			return this;
		}

		public static long idOf($mainCube+idOf) {
			return $mainCube.id(); //TODO
		}

		public static class Loader extends Abstract$name+FirstUpperCase.Loader {

			public static List<Loader> create(File root, Timetag from, Timetag to, Collection<String> divisions) {
				return divisions.stream().map(d -> new Loader(new Loader.Datasource(root, from, to), d)).collect(Collectors.toList());
			}


			public Loader(Datasource datasource<<, $split+parameter>>) {
				super(datasource<<, $split+name>>);
			}

			// TODO write here a cache if necessary
		}

		public static class Aggregation extends Abstract$name+FirstUpperCase.AbstractAggregation {

			public Aggregation(Timetag timetag, List<Axis.Component> components, Map<Axis, Predicate<Fact>> filters) {
				super(timetag, components, filters);
			}

			<<$customIndicator+implementation...[$NL$NL]>>
		}
	}
end
def trigger(idOf)
	$this+FirstUpperCase.Fact $this+firstLowerCase
end

def type(cube)
	package $package.analytic.cubes;

	import io.intino.alexandria.Timetag;
	import io.intino.alexandria.led.LedReader;
	import io.intino.alexandria.led.LedStream;
	import io.intino.alexandria.led.Schema;
	import io.intino.alexandria.led.buffers.store.ByteStore;
	import io.intino.alexandria.led.util.iterators.MergedIterator;
	import io.intino.alexandria.led.util.iterators.StatefulIterator;
	import io.intino.alexandria.led.util.collections.SparseLongList;

	import $package.analytic.axes.*;
	import $package.analytic.Axis;

	import java.io.File;
	import java.util.*;
	import java.util.stream.Collectors;
	import java.util.function.Function;
	import java.util.function.Predicate;
	import java.util.stream.Stream;
	import java.util.stream.StreamSupport;

	import static java.util.Comparator.comparingLong;
	import static java.util.Spliterators.spliteratorUnknownSize;
	import $package.analytic.cubes.$name+FirstUpperCase.Aggregation;

	public abstract class Abstract$name+FirstUpperCase implements Iterable<$name+FirstUpperCase.Aggregation> {

		public static final Fact NULL_FACT = new NullFact();

		private final List<? extends Loader> loaders;
		private Predicate<Fact> filter = fact -> true;
		private final List<Axis> axes = new ArrayList<>();
		private final Map<Axis, Set<Axis.Component>> components = new HashMap<>();
		private final List<Function<Fact, ? extends Axis.Component>> groupByList = new ArrayList<>();
		private final Map<Axis, Predicate<Fact>> filters = new LinkedHashMap<>();
		private Aggregation[] result;

		public Abstract$name+FirstUpperCase(List<? extends Loader> loaders) {
			this.loaders = loaders;
		}

		<<$dimension+method...[$NL$NL]>>

		<<$customDimension+method...[$NL$NL]>>

		<<$customFilter+method...[$NL$NL]>>

		public Abstract$name+FirstUpperCase groupBy(Axis axis) {
			if(axis == null) throw new NullPointerException("Axis cannot be null");
			switch(axis.getTitle()) {
				<<$dimension+switchCaseGroupBy...[$NL]>>
			}
			return this;
		}

		@SuppressWarnings("unchecked")
		public Abstract$name+FirstUpperCase filter(Axis axis, Set<? extends Axis.Component> components) {
			if(axis == null) throw new NullPointerException("Axis cannot be null");
			switch(axis.getTitle()) {
				<<$dimension+switchCaseFilterBy...[$NL]>>
			}
			return this;
		}

		public Abstract$name+firstUpperCase execute() {
			result = new Aggregation[resultsSize()];
			results().forEach(this::append);
			fillCategories();
			calculateTotals();

			return this;
		}

		public Aggregation[] result() {
			if(result == null) return new Aggregation[0];
			return Arrays.stream(result).filter(java.util.Objects::nonNull).toArray(Aggregation[]::new);
		}

		@Override
		public Iterator<Aggregation> iterator() {
			return result == null
				? Stream.<Aggregation>empty().iterator()
				: Arrays.stream(result).filter(java.util.Objects::nonNull).iterator();
		}

		public static List<Axis> dimensions() {
			return List.of(<<$dimension+getInstance...[, ]>>);
		}

		public boolean contains(Axis axis, Axis.Component component) {
			if(!components.containsKey(axis)) return false;
			return components.get(axis).contains(component);
		}

		public Iterator<Fact> detail() {
			MergedIterator<Fact> iterator = new MergedIterator<>(loaders.stream().map(Iterable::iterator), comparingLong(Fact::id));
			return StreamSupport.stream(spliteratorUnknownSize(iterator, Spliterator.SORTED), false).filter(this::check).iterator();
		}

		public Aggregation aggregation(List<Axis.Component> components) {
			if(result == null || result.length == 0) return null;
			final int index = indexOf(components);
			return result[index];
		}

		public Aggregation aggregation(Axis.Component... components) {
			if(result == null || result.length == 0) return null;
			final int index = indexOf(components);
			return result[index];
		}

		private void fillCategories() {
			for (Aggregation aggregation : result) {
				if (aggregation == null) continue;
				List<Axis.Component> components = aggregation.components();
				for (int i = 0; i < components.size(); i++)
					this.components.get(axes.get(i)).add(components.get(i));
			}
		}

		private void calculateTotals() {
			for (Loader loader : loaders) {
				if(loader.axes().size() != axes.size()) return;
				for (int i = 0; i < loader.totals().length; i++) {
					if (result[i] == null) continue;
					result[i].append(loader.totals()[i]);
				}
			}
		}

		private int resultsSize() {
			int accumulator = 1;
			for (Axis axis : axes) accumulator *= axis.getSize() + 1;
			return accumulator;
		}

		private Stream<Aggregation[]~> results() {
			return loaders.parallelStream().map(this::results);
		}

		private Aggregation[] results(Iterable<Fact> facts) {
			Aggregation[] result = new Aggregation[resultsSize()];
			for (Fact fact : facts) {
				fact.setCube(this);
				if (!check(fact)) continue;
				Axis.Component[] components = componentsOf(fact);
				int index = indexOf(components);
				if (result[index] == null) result[index] = new Aggregation(fact.timetag(), Arrays.asList(components), filters);
				result[index].append(fact);
			}
			return result;
		}

		private synchronized void append(Aggregation[] results) {
			for (int i = 0; i < results.length; i++) {
				if (results[i] == null) continue;
				if (result[i] == null) result[i] = results[i];
				else result[i].append(results[i]);
			}
		}

		private int indexOf(Axis.Component[] components) {
			int index = 0;
			for (int i = 0; i < components.length; i++) {
				index *= axes.get(i).getSize();
				index += components[i].index();
			}
			return index;
		}

		private int indexOf(List<Axis.Component> components) {
			int index = 0;
			for (int i = 0; i < components.size(); i++) {
				index *= axes.get(i).getSize();
				index += components.get(i).index();
			}
			return index;
		}

		private boolean check(Fact item) {
			return filter.test(item);
		}

		private Axis.Component[] componentsOf(Fact item) {
			Axis.Component[] components = new Axis.Component[groupByList.size()];
			for (int i = 0; i < components.length; i++) components[i] = groupByList.get(i).apply(item);
			return components;
		}

		public static class Fact {

			<<$cube+fieldFact...[$NL]>>

			private Abstract$name+firstUpperCase cube;

			public Fact($cube+factParameter...[, ]) {
				$cube+assignFact...[$NL]
			}

			public $mainCube+firstUpperCase.Fact $mainCube+firstLowerCase() {
				return $mainCube+firstLowerCase;
			}

			public $joinCube+firstUpperCase.Fact $joinCube+firstLowerCase() {
				return $joinCube+firstLowerCase;
			}

			public Abstract$name+firstUpperCase cube() {
				return cube;
			}

			public Timetag timetag() {
				return $joinCube+firstLowerCase.timetag();
			}

			public long id() {
				return $mainCube+firstLowerCase.id();
			}

			<<$column+factGetter...[$NL$NL]>>

			<<$virtualColumn+factGetter...[$NL$NL]>>

			void setCube(Abstract$name+firstUpperCase cube) {
				this.cube = cube;
			}

			public int size() {
				return $cube+size...[ + ];
			}

			@Override
			public boolean equals(Object o) {
				if(o == null || o.getClass() != getClass()) return false;
				final Fact other = (Fact) o;
				return Objects.equals($mainCube+firstLowerCase, other.$mainCube+firstLowerCase);
			}

			@Override
			public int hashCode() {
				return $mainCube+firstLowerCase.hashCode();
			}

			@Override
			public String toString() {
				return "$name~Fact{" +
						"$mainCube=" + $mainCube+firstLowerCase +
						", $joinCube=" + $joinCube+firstLowerCase +
						"}";
			}
		}

		public static class NullFact extends Fact {

			private NullFact() {
				super($cube+nullFactParameter...[, ]);
			}

			<<$column+nullgetter...[$NL$NL]>>

			@Override
			public long id() {
				return 0;
			}
		}

		public enum Indicator {

			Total("Total", "", Mode.Sum, false),
			Distinct("Distinct", "", Mode.Sum, false),
			<<$indicator+enum...[,$NL]>>
			<<,$customIndicator+enum...[,$NL]>>;


			public static Indicator byName(String name) {
				return Arrays.stream(values()).filter(i -> i.name().equalsIgnoreCase(name)).findFirst().orElse(null);
			}

			public final String title;
			public final String unit;
			public final Mode mode;
			private final boolean virtual;

			Indicator(String title, String unit, Mode mode, boolean virtual) {
				this.title = title;
				this.unit = unit;
				this.mode = mode;
				this.virtual = virtual;
			}

			public enum Mode {
				Sum, Average
			}
		}

		public static abstract class AbstractAggregation {

			private static final long Long_NaN = Long.MIN_VALUE;

			private final Timetag timetag;
			private final List<Axis.Component> components;
			private final Map<Axis, Predicate<Fact>> filters;
			private long aggregationTotal = 0L;
			private long aggregationDistinct = 0L;
			private long lastID = Long.MIN_VALUE;
			<<$index+field>>
			<<$indicator+field...[$NL]>>
			<<$customIndicator+field...[$NL]>>
			private long total$name+FirstUpperCase;

			public AbstractAggregation(Timetag timetag, List<Axis.Component> components, Map<Axis, Predicate<Fact>> filters) {
				this.timetag = timetag;
				this.components = components;
				this.filters = filters;
			}

			public void append(Fact fact) {
				<<$indicator+sum...[$NL]>>
				if(lastID != fact.id()) {
					<<$index+append>>
					++aggregationDistinct;
					lastID = fact.id();
				}
				++aggregationTotal;
			}

			public void append(AbstractAggregation aggregation) {
				<<$indicator+sumAggregation...[$NL]>>
				<<$customIndicator+sumAggregation...[$NL]>>
				<<$index+append2>>
				aggregationDistinct = Math.max(aggregationDistinct, aggregation.aggregationDistinct);
				aggregationTotal += aggregation.aggregationTotal();
			}

			public Aggregation append(long ids) {
				this.total$name+FirstUpperCase += ids;
				return (Aggregation) this;
			}

			public long aggregationTotal() {
				return aggregationTotal;
			}

			public long aggregationDistinct() {
				return aggregationDistinct;
			}

			public long total$name+FirstUpperCase() {
				return total$name+FirstUpperCase;
			}

			<<$index+getter>>

			public Timetag timetag() {
				return timetag;
			}

			public List<Axis.Component> components() {
				return components;
			}

			<<$indicator+getter...[$NL$NL]>>

			<<$customIndicator+getter...[$NL$NL]>>

			public Number indicator(Indicator indicator) {
				switch(indicator) {
					<<$indicator+switchCase...[$NL]>>
					<<$customIndicator+switchCase...[$NL]>>
					case Total: return aggregationTotal;
					case Distinct: return aggregationDistinct;
				}
				return 0L;
			}

			@Override
			public String toString() {
				return "$name+FirstUpperCase.Aggregation{"
					+ "total=" + aggregationTotal
					+ ", distincts=" + aggregationDistinct
					<<$index+toString...[$NL]>>
					<<$indicator+toString...[$NL]>>
					<<$customIndicator+toString...[$NL]>>
					+ "}";
			}
		}

		public static class Loader implements Iterable<Fact> {

			private final StatefulIterator<$joinCube+FirstUpperCase.Fact> ids;
			private final List<Axis> axes = new ArrayList<>();
			private long[] totals;
			private final List<Predicate<$joinCube+FirstUpperCase.Fact>> filters = new ArrayList<>();
			private final List<Function<$joinCube+FirstUpperCase.Fact, Axis.Component>> groupsBy = new ArrayList<>();
			protected final Datasource datasource;
			<<$split+field>>

			public Loader(Datasource datasource<<, $split+parameter>>) {
				this.datasource = datasource;
				<<$split+assign>>
				this.ids = StatefulIterator.of(new $joinCube+FirstUpperCase.Loader(new $joinCube+FirstUpperCase.Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)<<, $split+name>>).iterator());
			}

			@Override
			public Iterator<Fact> iterator() {
				if(!ids.hasNext()) return Stream.<Fact>empty().iterator();
				StatefulIterator<$mainCube+FirstUpperCase.Fact> facts = StatefulIterator.of(new $mainCube+FirstUpperCase.Loader(new $mainCube+FirstUpperCase.Loader.Datasource(this.datasource.root, this.datasource.from, this.datasource.to)<<, $split+name>>).iterator());
				ids.next();
				process(ids.current());
				return StreamSupport.stream(Spliterators.spliteratorUnknownSize(facts, Spliterator.SORTED), false)
						.map(f -> {
							final long mainID = $name+FirstUpperCase.idOf(facts.current());
							while (ids.current() != null && ids.current().id() < mainID) {
								ids.next();
								process(ids.current());
							}
							if (!facts.hasNext()) end();
							return new Fact(f, ids.current() != null && ids.current().id() == mainID ?
									ids.current() : Abstract$joinCube+FirstUpperCase.NULL_FACT);
						})
						.iterator();
			}

			private void end() {
				while (ids.hasNext()) {
					ids.next();
					process(ids.current());
				}
			}

			public Timetag from() {
				return datasource.from;
			}

			private int totalsSize() {
				int accumulator = 1;
				for (Axis axis : axes) accumulator *= axis.getSize();
				return accumulator;
			}

			private void process($joinCube+FirstUpperCase.Fact fact) {
				if (fact == null) return;
				if (totals == null) totals = new long[totalsSize()];
				for (Predicate<$joinCube+FirstUpperCase.Fact> filter : filters) if (!filter.test(fact)) return;
				Axis.Component[] components = componentsOf(fact);
				totals[indexOf(components)] += 1;
			}

			private int indexOf(Axis.Component[] components) {
				int index = 0;
				for (int i = 0; i < components.length; i++) {
					i *= axes.get(i).getSize();
					i += components[i].index();
				}
				return index;
			}

			private Axis.Component[] componentsOf($joinCube+FirstUpperCase.Fact item) {
				Axis.Component[] components = new Axis.Component[axes.size()];
				for (int i = 0; i < components.length; i++) components[i] = groupsBy.get(i).apply(item);
				return components;
			}

			private long totalOf(List<Axis.Component> categories) {
				return totals[indexOf(categories.toArray(new Axis.Component[0]))];
			}

			public Loader filter(Predicate<$joinCube+FirstUpperCase.Fact> filter) {
				if (filter == null) return this;
				filters.add(filter);
				return this;
			}

			public Loader groupBy(Axis axis, Function<$joinCube+FirstUpperCase.Fact, Axis.Component> dimension) {
				if (dimension == null) return this;
				axes.add(axis);
				groupsBy.add(dimension);
				return this;
			}

			public List<Axis> axes() {
				return axes;
			}

			public long[] totals() {
				if(totals == null) totals = new long[totalsSize()];
				return totals;
			}

			public static class Datasource {

				private final File root;
				private final Timetag from;
				private final Timetag to;

				public Datasource(File root, Timetag from, Timetag to) {
					this.root = root;
					this.from = from;
					this.to = to;
				}

				public Timetag from() {
					return from;
				}

				public Timetag to() {
					return to;
				}
			}
		}
	}
end

def type(indicator) and trigger(enum)
	$fieldName+PascalCase~("$label", "$unit", Mode.$mode, false)
end

def type(customIndicator) and trigger(enum)
	$fieldName+PascalCase~("$label", "$unit", Mode.$mode, true)
end

def type(indicator) and trigger(switchCase)
	case $fieldName+PascalCase: return $name+CamelCase;
end

def type(customIndicator) and trigger(switchCase)
	case $fieldName+PascalCase: return $name+CamelCase;
end

def type(index) and trigger(field)
	private final SparseLongList ids = new SparseLongList();
end

def type(index) and trigger(append)
	ids.add(fact.id());
end

def type(index) and trigger(append2)
	ids.addAll(aggregation.ids);
end

def type(index) and trigger(getter)
	public List<Long> ids() {
		return ids.asList();
	}
end

def trigger(assignFact)
	this.$this+FirstLowerCase = $this+FirstLowerCase;
end

def trigger(fieldFact)
	private final $this+FirstUpperCase.Fact $this+FirstLowerCase;
end

def trigger(factParameter)
	$this+FirstUpperCase.Fact $this+FirstLowerCase
end

def trigger(nullFactParameter)
	Abstract$this+FirstUpperCase.NULL_FACT
end

def trigger(size)
	$this+FirstLowerCase.size()
end

def trigger(nbits)
	NBits
end

def type(customFilter) and trigger(method)
	public Abstract$cube+firstUpperCase filter$name+PascalCase() {
		filter = filter.and($cube+PascalCase::$name+CamelCase~Filter);
		return this;
	}
end

def type(customFilter) and trigger(staticMethod)
	public static boolean $name+CamelCase~Filter(Fact fact) {
		return true;
	}
end

def type(dimension) and trigger(switchCaseGroupBy)
	case $axis+PascalCase.TITLE: return groupBy$name+PascalCase();
end

def type(dimension, categorical) and trigger(switchCaseFilter)
	case $axis+PascalCase.TITLE: return filter$name+PascalCase((Set<$axis+PascalCase.Component>) components);
end

def type(dimension, continuous) and trigger(switchCaseFilter)
	case $axis+PascalCase.TITLE: return filter$name+PascalCase((Set<$axis+PascalCase.Range>) components);
end

def type(customDimension, categorical) and trigger(staticMethod)
	public static $axis+PascalCase.Component $name+CamelCase~Function(Fact fact) {
		// TODO
		return $axis+PascalCase.NA;
	}
end

def type(customDimension, continuous) and trigger(staticMethod)
	public static $axis+PascalCase.Range $name+CamelCase~Function(Fact fact) {
		// TODO
		return $axis+PascalCase.component(0);
	}
end

def type(dimension, categorical) and trigger(method)
	public Abstract$cube+firstUpperCase filter$name+PascalCase(Set<$axis+PascalCase.Component> $axis+CamelCase) {
		if(filters.containsKey($axis+PascalCase.get())) return this;
		Predicate<Fact> f = v -> $name+CamelCase~Filter(v, $axis+CamelCase);
		filters.put($axis+PascalCase.get(), f);
		filter = filter.and(f);
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+PascalCase() {
		axes.add($axis+PascalCase.get());
		components.put($axis+PascalCase.get(), new HashSet<>());
		groupByList.add(v -> $name+CamelCase+firstLowerCase~Function(v));
		return this;
	}

	public static boolean $name+CamelCase+firstLowerCase~Filter(Fact fact, Set<$axis+PascalCase.Component> $axis+CamelCase+firstLowerCase) {
		return $axis+CamelCase+firstLowerCase.contains($name+CamelCase+firstLowerCase~Function(fact));
	}

	public static $axis+PascalCase.Component $name+CamelCase+firstLowerCase~Function(Fact fact) {
		return fact.$source+CamelCase+firstLowerCase()<<.$child+CamelCase+firstLowerCase()>>;
	}
end

def type(customDimension, categorical) and trigger(method)
	public Abstract$cube+firstUpperCase filter$name+PascalCase(Set<$axis+PascalCase.Component> $axis+CamelCase+firstLowerCase) {
		if(filters.containsKey($axis+PascalCase.get())) return this;
		Predicate<Fact> f = v -> $name+CamelCase+firstLowerCase~Filter(v, $axis+CamelCase+firstLowerCase);
		filters.put($axis+PascalCase.get(), f);
		filter = filter.and(f);
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+PascalCase() {
		axes.add($axis+PascalCase.get());
		components.put($axis+PascalCase.get(), new HashSet<>());
		groupByList.add(v -> $cube+firstUpperCase.$name+CamelCase+firstLowerCase~Function(v));
		return this;
	}

	public static boolean $name+CamelCase+firstLowerCase~Filter(Fact fact, Set<$axis+PascalCase.Component> $axis+CamelCase+firstLowerCase) {
		return $axis+CamelCase+firstLowerCase.contains($cube+firstUpperCase.$name+CamelCase+firstLowerCase~Function(fact));
	}
end

def type(dimension, continuous) and trigger(method)
	public Abstract$cube+firstUpperCase filter$name+PascalCase(Set<$axis+PascalCase.Range> $axis+CamelCase+firstLowerCase) {
		if(filters.containsKey($axis+PascalCase.get())) return this;
		Predicate<Fact> f = v -> $name+CamelCase+firstLowerCase~Filter(v, $axis+CamelCase+firstLowerCase);
		filters.put($axis+PascalCase.get(), f);
		filter = filter.and(f);
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+PascalCase() {
		axes.add($axis+PascalCase.get());
		components.put($axis+PascalCase.get(), new HashSet<>());
		groupByList.add($cube+FirstUpperCase::$name+CamelCase+firstLowerCase~Function);
		return this;
	}

	public static boolean $name+CamelCase+firstLowerCase~Filter(Fact fact, Set<$axis+PascalCase.Range> $axis+CamelCase+firstLowerCase) {
		return $axis+CamelCase+firstLowerCase.contains($name+CamelCase+firstLowerCase~Function(fact));
	}

	public static $axis+PascalCase.Range $name+CamelCase+firstLowerCase~Function(Fact fact) {
		return $axis+PascalCase.rangeOf(fact.$source+firstLowerCase());
	}
end

def type(customDimension, continuous) and trigger(method)
	public Abstract$cube+firstUpperCase filter$name+PascalCase(Set<$axis+PascalCase.Range> $axis+CamelCase+firstLowerCase) {
		if(filters.containsKey($axis+PascalCase.get())) return this;
		Predicate<Fact> f = v -> $name+CamelCase+firstLowerCase~Filter(v, $axis+CamelCase+firstLowerCase);
		filters.put($axis+PascalCase.get(), f);
		filter = filter.and(f);
		return this;
	}

	public Abstract$cube+FirstUpperCase groupBy$name+PascalCase() {
		axes.add($axis+PascalCase.get());
		components.put($axis+PascalCase.get(), new HashSet<>());
		groupByList.add($cube+FirstUpperCase::$name+CamelCase+firstLowerCase~Function);
		return this;
	}

	public static boolean $name+CamelCase+firstLowerCase~Filter(Fact fact, Set<$axis+PascalCase.Range> $axis+CamelCase+firstLowerCase) {
		return $axis+CamelCase+firstLowerCase.contains($cube+firstUpperCase.$name+CamelCase+firstLowerCase~Function(fact));
	}
end


def type(dimension) and trigger(ifGroupBy)
	if(axis.equals($axis+PascalCase.get())) return groupBy$name+PascalCase();
end

def type(dimension) and trigger(ifFilterBy)
	if(axis.equals($axis+PascalCase.get())) return filter$name+PascalCase();
end

def type(customIndicator) and trigger(toString)
	 + ", $name+firstLowerCase=" + $name+firstLowerCase~()
end

def type(indicator) and trigger(sum)
	$name+firstLowerCase += fact.$source+firstLowerCase();
end

def type(indicator) and trigger(sumAggregation)
	$name+firstLowerCase += aggregation.$name+firstLowerCase;
end

def type(customIndicator, sum) and trigger(sumAggregation)
	if($name+firstLowerCase != Long_NaN && aggregation.$name+firstLowerCase != Long_NaN)
		$name+firstLowerCase += aggregation.$name+firstLowerCase;
end

def type(customIndicator, average) and trigger(sumAggregation)
	if(!Double.isNaN($name+firstLowerCase) && !Double.isNaN(aggregation.$name+firstLowerCase))
		$name+firstLowerCase += aggregation.$name+firstLowerCase;
end

def type(customIndicator, average) and trigger(field)
	protected double $name+firstLowerCase = Double.NaN;
end

def type(indicator, average) and trigger(field)
	protected double $name+firstLowerCase;
end

def type(indicator, sum) and trigger(field)
	protected long $name+firstLowerCase;
end

def type(customIndicator, sum) and trigger(field)
	protected long $name+firstLowerCase = Long_NaN;
end

def type(indicator, average) and trigger(getter)
	public double $name+firstLowerCase() {
		return $name+firstLowerCase / (double) aggregationDistinct;
	}
end

def type(customIndicator, average) and trigger(getter)
	public final double $name+firstLowerCase() {
		if(Double.isNaN($name+firstLowerCase))
			$name+firstLowerCase = calculate$name+firstUpperCase();
		return $name+firstLowerCase;
	}

	protected double calculate$name+firstUpperCase() {
		return 0.0;
	}
end

def type(indicator, sum) and trigger(getter)
	public long $name+firstLowerCase() {
		return $name+firstLowerCase;
	}
end

def type(customIndicator, sum) and trigger(getter)
	public final long $name+firstLowerCase() {
		if($name+firstLowerCase == Long_NaN)
			$name+firstLowerCase = calculate$name+firstUpperCase();
		return $name+firstLowerCase;
	}

	protected long calculate$name+firstUpperCase() {
		return 0L;
	}
end

def type(index) and trigger(index)
	ids.size()
end

def type(indicator, average) and trigger(staticMethod)
	public static double $name(Fact fact) {
		return 0.0;
	}
end

def type(indicator, sum) and trigger(staticMethod)
	public static long $name(Fact fact) {
		return 0;
	}
end

def type(split) and trigger(parameter)
	String $name+firstLowerCase
end

def type(split) and trigger(setParameter)
	java.util.Set<String> $name+firstLowerCase
end

def type(split) and trigger(assign)
	this.$name+firstLowerCase = $name+firstLowerCase;
end

def type(split) and trigger(name)
	$name+firstLowerCase
end

def type(split) and trigger(nameUpper)
	$name+firstUpperCase
end

def type(split) and trigger(field)
	protected final String $name+firstLowerCase;
end

def type(split) and trigger(method)
	private static Set<String> all$name+FirstUpperCase() {
		return java.util.Set.of($value+quoted...[, ]);
	}
end

def type(dimension) and trigger(getInstance)
	$axis+PascalCase.get()
end

def trigger(dimension)
	public static Predicate<$cube+FirstUpperCase.Fact> $axis+CamelCase+firstLowerCase(Set<$axis+PascalCase.Component> $axis+CamelCase+firstLowerCase~List) {
		return r -> $axis+CamelCase+firstLowerCase~List.contains(r.$axis+CamelCase+firstLowerCase());
	}

	public static Function<$cube+FirstUpperCase.Fact, String> $axis+CamelCase+firstLowerCase() {
		return r -> r.$axis+CamelCase+firstLowerCase().id();
	}
end

def type(column, int, unsigned) and trigger(factGetter)
	public long $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, int) and trigger(factGetter)
	public int $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, float) and trigger(factGetter)
	public float $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, double) and trigger(factGetter)
	public double $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and (type(id) or type(long)) and trigger(factGetter)
	public long $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and type(byte, unsigned) and trigger(factGetter)
	public short $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and type(byte) and trigger(factGetter)
	public byte $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and type(short, unsigned) and trigger(factGetter)
	public int $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and type(short) and trigger(factGetter)
	public short $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and type(boolean) and trigger(factGetter)
	public boolean $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, categorical) and trigger(factGetter)
	public $type+firstUpperCase.Component $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column) and trigger(factGetter)
	public $type+firstUpperCase $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, virtual) and trigger(factGetter)
	public $type $name+CamelCase+firstLowerCase() {
		return $cube+firstLowerCase.$name+firstLowerCase();
	}
end

def type(column, categorical) and trigger(nullGetter)
	public $type+firstUpperCase.Component $name+CamelCase+firstLowerCase() {
		return $type+firstUpperCase.NA;
	}
end

def type(column, int, unsigned) and trigger(nullGetter)
	public long $name+firstLowerCase() {
		return 0;
	}
end

def type(column, int) and trigger(nullGetter)
	public int $name+CamelCase+firstLowerCase() {
		return 0;
	}
end

def type(column) and (type(id) or type(long)) and trigger(nullGetter)
	public long $name+CamelCase+firstLowerCase() {
		return 0L;
	}
end

def type(column, short, unsigned) and trigger(nullGetter)
	public int $name+CamelCase+firstLowerCase() {
		return 0;
	}
end

def type(column, short) and trigger(nullGetter)
	public short $name+CamelCase+firstLowerCase() {
		return 0;
	}
end

def type(column, byte, unsigned) and trigger(nullGetter)
	public short $name+CamelCase+firstLowerCase() {
		return 0;
	}
end

def type(column, byte) and trigger(nullGetter)
	public byte $name+CamelCase+firstLowerCase() {
		return 0;
	}
end

def type(column, float) and trigger(nullGetter)
	public float $name+CamelCase+firstLowerCase() {
		return 0.0f;
	}
end

def type(column, double) and trigger(nullGetter)
	public double $name+CamelCase+firstLowerCase() {
		return 0.0f;
	}
end

def type(column, boolean) and trigger(nullGetter)
	public boolean $name+CamelCase+firstLowerCase() {
		return false;
	}
end

def type(column, boolean) and trigger(nullGetter)
	public boolean $name+CamelCase+firstLowerCase() {
		return false;
	}
end

def type(column, boolean) and trigger(nullGetter)
	public boolean $name+CamelCase+firstLowerCase() {
		return false;
	}
end

def type(virtualColumn, primitive) and trigger(factGetter)
	public $type+firstLowerCase $name+CamelCase+firstLowerCase() {
		return $cube.$name+firstLowerCase();
	}
end

def type(virtualColumn) and trigger(factGetter)
	public $type+firstUpperCase $name+CamelCase+firstLowerCase() {
		return $cube.$name+firstLowerCase();
	}
end

def type(customIndicator, sum) and trigger(implementation)
	@Override
	protected long calculate$name+firstUpperCase() {
		// TODO: calculate and return $name+firstLowerCase
		return 0;
	}
end

def type(customIndicator, average) and trigger(implementation)
	@Override
	protected double calculate$name+firstUpperCase() {
		// TODO: calculate and return $name+firstLowerCase
		return 0.0;
	}
end