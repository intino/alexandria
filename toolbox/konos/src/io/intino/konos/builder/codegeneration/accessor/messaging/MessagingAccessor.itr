rule type(accessor)
	package $package+validPackage;

	import io.intino.alexandria.exceptions.*;

	import java.util.function.Consumer;
	import javax.jms.*;
	$schemaImport

	public class $name+PascalCase~Accessor {
		private final io.intino.alexandria.terminal.JmsConnector connector;
		private final String context;

		public $name+PascalCase~Accessor(io.intino.alexandria.terminal.JmsConnector connector, String context) {
			this.connector = connector;
			this.context = context;
		}

		$request+registerCallback...[$NL$NL]

		$request...[$NL$NL]

		private String chainContext() {
			return (context != null && !context.isEmpty() ? "." + context + "." : ".");
		}

	}

rule type(request, reply) and trigger(registerCallback)
	public $service+PascalCase~Accessor register$name+firstUpperCase~CallbackConsumer(Consumer<$response+type> consumer) {
		connector.attachListener("response" + chainContext() + "$name", (r, c) -> consumer.accept(io.intino.alexandria.Json.fromString(r, $response+type.class)));
		return this;
	}

rule type(request)
	public void $name(<<$parameter+signature>>) {
		connector.requestResponse("$path", io.intino.alexandria.Json.toString($parameter+name), "response" + chainContext() + "$name");
	}

rule type(value) and trigger(type)
	$type+FirstUpperCase

rule type(value) and trigger(signature)
	$type $name+CamelCase

rule type(value) and trigger(name)
	$name+CamelCase

rule type(schemaImport)
	import $package.schemas.*;
