package io.intino.konos.builder.codegeneration.accessor.ui.web.templates;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class AbstractDisplaySkeletonTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("display", "exposed")).output(literal("import React from \"react\";\n")).output(expression().output(placeholder("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("parent", "import"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier from \"")).output(placeholder("notifierDirectory")).output(literal("/notifiers/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier\";"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester from \"")).output(placeholder("requesterDirectory")).output(literal("/requesters/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester\";"))).output(literal("\n")).output(expression().output(placeholder("displayRegistration", "import"))).output(literal("\nimport ")).output(placeholder("name", "PascalCase")).output(literal(" from './")).output(placeholder("name", "PascalCase")).output(literal("';\n\nexport default class ")).output(placeholder("name", "PascalCase")).output(literal("Proxy extends ")).output(placeholder("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t")).output(expression().output(literal("this.notifier = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier(this);"))).output(literal("\n\t\t")).output(expression().output(literal("this.requester = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester(this);"))).output(literal("\n\t\t")).output(expression().output(placeholder("properties", "initialization"))).output(literal("\n\t};\n\n}\n\n")).output(expression().output(placeholder("displayRegistration", "declaration"))));
		rules.add(rule().condition(allTypes("display", "noAbstract")).output(literal("import React from \"react\";\nimport { withStyles } from '@material-ui/core/styles';\n")).output(expression().output(placeholder("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("parent", "import"))).output(literal("\n")).output(placeholder("exposedNotifierImport")).output(literal("\nimport ")).output(placeholder("name", "firstUpperCase")).output(literal("Requester from \"alexandria-ui-elements/gen/displays/requesters/")).output(placeholder("requester")).output(literal("Requester\";\nimport DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';\nimport { withSnackbar } from 'notistack';\n\nconst styles = theme => ({});\n\nclass ")).output(placeholder("name", "firstUpperCase")).output(literal(" extends ")).output(placeholder("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.notifier = new ")).output(placeholder("name", "firstUpperCase")).output(literal("Notifier(this);\n\t\tthis.requester = new ")).output(placeholder("name", "firstUpperCase")).output(literal("Requester(this);\n\t\t")).output(expression().output(placeholder("properties", "initialization"))).output(literal("\n\t};\n\n\trender() {\n\t\tconst display = !this.state.visible ? {display:'none'} : undefined;\n\t\tconst className = \"layout vertical center-justified\" + (this.hiddenClass() !== \"\" ? \" \" + this.hiddenClass() : \"\");\n\t\treturn ")).output(expression().output(literal("this.")).output(placeholder("baseMethod"))).output(literal("(\n\t\t\t")).output(expression().output(placeholder("renderTag"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("reference").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("component").multiple("\n"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("renderTag", "end"))).output(literal("\n\t\t);\n\t}\n\n\t")).output(placeholder("notification").multiple("\n\n")).output(literal("\n\t")).output(expression().output(placeholder("notifyProxyMethod"))).output(literal("\n}\n\nexport default withStyles(styles, { withTheme: true })(withSnackbar(")).output(placeholder("name", "firstUpperCase")).output(literal("));\nDisplayFactory.register(\"")).output(placeholder("name", "firstUpperCase")).output(literal("\", withStyles(styles, { withTheme: true })(withSnackbar(")).output(placeholder("name", "firstUpperCase")).output(literal(")));")));
		rules.add(rule().condition(allTypes("exposedNotifierImport", "exposed")).output(literal("import ")).output(placeholder("name", "firstUpperCase")).output(literal("Notifier from \"")).output(placeholder("serviceName")).output(literal("/gen/displays/notifiers/")).output(placeholder("name", "firstUpperCase")).output(literal("Notifier\";")));
		rules.add(rule().condition(allTypes("exposedNotifierImport")).output(literal("import ")).output(placeholder("name", "firstUpperCase")).output(literal("Notifier from \"alexandria-ui-elements/gen/displays/notifiers/")).output(placeholder("notifier")).output(literal("Notifier\";")));
		rules.add(rule().condition(allTypes("notifyProxyMethod")).output(literal("notifyProxyMessage = (name) => {\n\tif (!this.props.onProxyMessage) return;\n\tthis.props.onProxyMessage(name);\n};")));
		rules.add(rule().condition(allTypes("display", "collection")).output(literal("import React from \"react\";\n")).output(expression().output(placeholder("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("parent", "import"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier from \"")).output(placeholder("notifierDirectory")).output(literal("/notifiers/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier\";"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester from \"")).output(placeholder("requesterDirectory")).output(literal("/requesters/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester\";"))).output(literal("\n")).output(expression().output(placeholder("displayRegistration", "import"))).output(literal("\n\nexport default class ")).output(placeholder("abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" extends ")).output(placeholder("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t")).output(expression().output(literal("this.notifier = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier(this);"))).output(literal("\n\t\t")).output(expression().output(literal("this.requester = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester(this);"))).output(literal("\n\t\t")).output(expression().output(placeholder("properties", "initialization"))).output(literal("\n\t};\n\n}\n\n")).output(expression().output(placeholder("displayRegistration", "declaration"))));
		rules.add(rule().condition(allTypes("display")).output(literal("import React from \"react\";\n")).output(expression().output(placeholder("alexandriaBlockImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaTemplateStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaDisplayStampImport"))).output(literal("\n")).output(expression().output(placeholder("alexandriaComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("projectComponentImport").multiple("\n"))).output(literal("\n")).output(expression().output(placeholder("parent", "import"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier from \"")).output(placeholder("notifierDirectory")).output(literal("/notifiers/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier\";"))).output(literal("\n")).output(expression().output(literal("import ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester from \"")).output(placeholder("requesterDirectory")).output(literal("/requesters/")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester\";"))).output(literal("\n")).output(expression().output(placeholder("displayRegistration", "import"))).output(literal("\n\nexport default class ")).output(placeholder("abstract")).output(placeholder("name", "firstUpperCase")).output(literal(" extends ")).output(placeholder("displayExtends")).output(literal(" {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t")).output(expression().output(literal("this.notifier = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Notifier(this);"))).output(literal("\n\t\t")).output(expression().output(literal("this.requester = new ")).output(placeholder("notDecorated", "firstUpperCase")).output(literal("Requester(this);"))).output(literal("\n\t\t")).output(expression().output(placeholder("properties", "initialization"))).output(literal("\n\t};\n\n\trender() {\n\t\tconst display = !this.state.visible ? {display:'none'} : undefined;\n\t\tconst className = \"layout vertical center-justified\" + (this.hiddenClass() !== \"\" ? \" \" + this.hiddenClass() : \"\");\n\t\treturn ")).output(expression().output(literal("this.")).output(placeholder("baseMethod"))).output(literal("(\n\t\t\t")).output(expression().output(placeholder("renderTag"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("reference").multiple("\n"))).output(literal("\n\t\t\t\t")).output(expression().output(placeholder("component").multiple("\n"))).output(literal("\n\t\t\t")).output(expression().output(placeholder("renderTag", "end"))).output(literal("\n\t\t);\n\t}\n}\n\n")).output(expression().output(placeholder("displayRegistration", "declaration"))));
		rules.add(rule().condition(all(allTypes("displayRegistration"), trigger("import"))).output(literal("import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';")));
		rules.add(rule().condition(all(allTypes("displayRegistration", "exposed"), trigger("declaration"))).output(literal("DisplayFactory.register(\"")).output(placeholder("name", "PascalCase")).output(literal("Proxy\", ")).output(placeholder("name", "PascalCase")).output(literal("Proxy);")));
		rules.add(rule().condition(all(allTypes("displayRegistration"), trigger("declaration"))).output(literal("DisplayFactory.register(\"")).output(placeholder("name", "firstUpperCase")).output(literal("\", ")).output(placeholder("name", "firstUpperCase")).output(literal(");")));
		rules.add(rule().condition(allTypes("alexandriaImport")).output(literal("import Ui")).output(placeholder("name", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/components/")).output(placeholder("name", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(allTypes("alexandriaImport", "embedded")).output(literal("import { Embedded")).output(placeholder("name", "firstUpperCase")).output(literal(" as Ui")).output(placeholder("name", "firstUpperCase")).output(literal(" } from \"alexandria-ui-elements/src/displays/components/")).output(placeholder("name", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(allTypes("alexandriaComponentImport")).output(literal("import Ui")).output(placeholder("type", "firstUpperCase")).output(placeholder("facet").multiple("")).output(literal(" from \"alexandria-ui-elements/")).output(expression().output(placeholder("componentTarget"))).output(literal("/displays/")).output(expression().output(placeholder("componentDirectory")).output(literal("/"))).output(placeholder("type", "firstUpperCase")).output(placeholder("facet").multiple("")).output(literal("\";")));
		rules.add(rule().condition(allTypes("projectComponentImport", "inherittemplatestamp")).output(literal("import Displays")).output(placeholder("name", "firstUpperCase")).output(literal(" from \"")).output(placeholder("ownerModuleName")).output(literal("/gen/displays/templates/")).output(placeholder("name", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(allTypes("projectComponentImport")).output(literal("import Displays")).output(placeholder("name", "firstUpperCase")).output(literal(" from \"")).output(placeholder("serviceName")).output(literal("/")).output(expression().output(placeholder("directory"))).output(literal("/displays/")).output(expression().output(placeholder("componentDirectory")).output(literal("/"))).output(placeholder("name", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(allTypes("displayExtends", "generic", "isExtensionOf")).output(literal("Displays")).output(placeholder("parent")));
		rules.add(rule().condition(allTypes("displayExtends", "generic")).output(literal("Ui")).output(placeholder("parent")));
		rules.add(rule().condition(allTypes("displayExtends")).output(literal("Ui")).output(placeholder("type", "firstUpperCase")));
		rules.add(rule().condition(all(allTypes("renderTag", "template"), trigger("end"))).output(literal("</UiBlock>")));
		rules.add(rule().condition(all(allTypes("renderTag", "block"), trigger("end"))).output(literal("</UiBlock>")));
		rules.add(rule().condition(all(allTypes("renderTag", "item"), trigger("end"))).output(literal("</div>")));
		rules.add(rule().condition(all(allTypes("renderTag"), trigger("end"))).output(literal("</React.Fragment>")));
		rules.add(rule().condition(allTypes("renderTag", "template")).output(literal("<UiBlock")).output(expression().output(placeholder("properties", "common")).output(placeholder("properties", "specific"))).output(literal(" style={{...this.props.style,...display}}>")));
		rules.add(rule().condition(allTypes("renderTag", "block")).output(literal("<UiBlock")).output(expression().output(placeholder("properties", "common")).output(placeholder("properties", "specific"))).output(literal(" style={{...this.props.style,...display}}>")));
		rules.add(rule().condition(allTypes("renderTag", "item")).output(literal("<div style={{width:\"100%\",height:\"100%\",...this.props.style,...this.style(),...display}} className={className}>")));
		rules.add(rule().condition(allTypes("renderTag")).output(literal("<React.Fragment>")));
		rules.add(rule().condition(allTypes("renderTagAttributes", "block")).output(placeholder("properties", "common")).output(placeholder("properties", "specific")));
		rules.add(rule().condition(allTypes("renderTagAttributes")));
		rules.add(rule().condition(all(attribute("parent"), trigger("import"))).output(literal("import Displays")).output(placeholder("parent", "firstUpperCase")).output(literal(" from \"../../../src/displays/")).output(placeholder("parentDirectory")).output(literal("/")).output(placeholder("parent", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(all(attribute("exposed"), trigger("import"))).output(literal("import Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/ProxyDisplay\";")));
		rules.add(rule().condition(all(attribute("basedisplay"), trigger("import"))).output(literal("import Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/Display\";")));
		rules.add(rule().condition(all(attribute("basecomponent"), trigger("import"))).output(literal("import Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/components/Component\";")));
		rules.add(rule().condition(all(attribute("embeddedcomponent"), trigger("import"))).output(literal("import { Embedded")).output(placeholder("value", "firstUpperCase")).output(literal(" as Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" } from \"alexandria-ui-elements/src/displays/components/")).output(placeholder("value", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(all(attribute("component"), trigger("import"))).output(literal("import Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/components/")).output(placeholder("value", "firstUpperCase")).output(literal("\";")));
		rules.add(rule().condition(trigger("import")).output(literal("import Ui")).output(placeholder("value", "firstUpperCase")).output(literal(" from \"alexandria-ui-elements/src/displays/")).output(placeholder("value", "firstUpperCase")).output(literal("\";")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}