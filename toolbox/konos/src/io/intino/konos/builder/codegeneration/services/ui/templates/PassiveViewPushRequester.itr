def type(display)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.<<$packageType~s.>>$name+FirstUpperCase;
	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.services.push.UIClient;
	import io.intino.alexandria.ui.services.push.UIMessage;
	import io.intino.alexandria.ui.spark.UISparkManager;

	public class $name+firstUpperCase~PushRequester extends io.intino.alexandria.ui.displays.requesters.<<$type+class+FirstUpperCase>>~PushRequester {

		public void execute(UIClient client, UIMessage message) {
			$name+firstUpperCase display = display(client, message);
			if (display == null) return;
			String operation = operation(message);
			String data = data(message);

			<<$request...[$NL~else ]>>

			super.execute(client, message);
		}

	}
end

def attribute(this, Display) and trigger(class)
	Display
end

def type(request, file) and trigger(request)
end

def type(request, asset) and trigger(request)
end

def type(request) and trigger(request)
	if (operation.equals("$name")) {
		display.$name($parameter);
		return;
	}
end

def type(list) and trigger(parameter)
	java.util.List.of(io.intino.alexandria.Json.fromString(data, $value~[].class))
end

def type(parameter, file) and trigger(parameter)
end

def type(parameter, String) and trigger(parameter)
	data
end

def type(parameter, Double) and trigger(parameter)
	Double.parseDouble(data)
end

def type(parameter, Integer) and trigger(parameter)
	Integer.parseInt(data)
end

def type(parameter, Long) and trigger(parameter)
	Long.parseLong(data)
end

def type(parameter, DateTime) and trigger(parameter)
	data != null ? java.time.Instant.ofEpochMilli(Long.parseLong(data)) : null
end

def type(parameter) and trigger(parameter)
	io.intino.alexandria.Json.fromString(data, $value.class)
end

def	trigger(parameter)
	aaaaa
end

def type(schemaImport)
	import $package.schemas.*;
end