rule type(display)
	package $package+validPackage.ui.displays.requesters;

	import $package+validPackage.ui.displays.<<$packageType~s.>>$name+FirstUpperCase;
	import io.intino.alexandria.exceptions.*;
	import $package+validPackage.*;
	$schemaImport

	import io.intino.alexandria.exceptions.AlexandriaException;
	import io.intino.alexandria.ui.services.push.UIClient;
	import io.intino.alexandria.ui.services.push.UIMessage;
	import io.intino.alexandria.ui.spark.UISparkManager;

	public class $name+firstUpperCase~PushRequester extends io.intino.alexandria.ui.displays.requesters.<<$type+class+FirstUpperCase>>~PushRequester {

		public void execute(UIClient client, UIMessage message) {
			$name+firstUpperCase display = display(client, message);
			if (display == null) return;
			String operation = operation(message);
			String data = data(message);

			<<$request...[$NL~else ]>>

			super.execute(client, message);
		}

	}

rule attribute(this, Display) and trigger(class)
	Display

rule type(request, file) and trigger(request)

rule type(request, asset) and trigger(request)

rule type(request) and trigger(request)
	if (operation.equals("$name")) {
		display.$name($parameter);
		return;
	}

rule type(list) and trigger(parameter)
	java.util.List.of(io.intino.alexandria.Json.fromString(data, $value~[].class))

rule type(parameter, file) and trigger(parameter)

rule type(parameter, String) and trigger(parameter)
	data

rule type(parameter, Double) and trigger(parameter)
	Double.parseDouble(data)

rule type(parameter, Integer) and trigger(parameter)
	Integer.parseInt(data)

rule type(parameter, Long) and trigger(parameter)
	Long.parseLong(data)

rule type(parameter, DateTime) and trigger(parameter)
	data != null ? java.time.Instant.ofEpochMilli(Long.parseLong(data)) : null

rule type(parameter) and trigger(parameter)
	io.intino.alexandria.Json.fromString(data, $value.class)

rule trigger(parameter)
	aaaaa

rule type(schemaImport)
	import $package.schemas.*;
