def type(webpack)
	const path = require("path");
	const HtmlWebPackPlugin = require("html-webpack-plugin");
	const CopyWebpackPlugin = require('copy-webpack-plugin');
	const CircularDependencyPlugin = require('circular-dependency-plugin');

	module.exports = {
		module: {
			rules: [
                {
                    test: /\\.mjs$$/,
                    include: /node_modules/,
                    type: "javascript/auto",
                    loader: "babel-loader"
                },
				{
					test: /\\.js$$/,
					$exclude
					options: {
						rootMode: "upward",
						presets: ['@babel/preset-env'],
						cacheDirectory: true
					},
					loader: "babel-loader"
				},
				{
					test: /\\.html$$/,
					loader: "html-loader"
				},
				{
					test: /\\.css$$/,
					loader: 'style-loader!css-loader'
				}
			]
		},
		entry : {
			$page+gen...[,$NL]
		},
		output: {
			path: "$outDirectory/$serviceName/www/$serviceName",
			publicPath: '$$basePath/$serviceName/',
			filename: "[name].js"
		},
		resolve: {
			alias: {
				<<$alias>>
				"app-elements": path.resolve(__dirname, '.'),
				"$serviceName": path.resolve(__dirname, '.')
			}
		},
		plugins: [
			new CircularDependencyPlugin({
				failOnError: false,
				allowAsyncCycles: false,
				cwd: process.cwd(),
			}),
			new CopyWebpackPlugin([{
				from: 'res',
				to: './res'
			}]),
			$page+plugin...[,$NL]
		]
	};
end

def type(exclude, alexandriaProject)
	exclude: /(node_modules)/,
end

def type(exclude)
	exclude: /node_modules\\/(?!($use...[|])\\/).*/,
end

def type(alias, alexandriaProject)
	"alexandria-ui-elements": path.resolve(__dirname, '.'),
end

def type(page) and trigger(gen)
	'$templateName' : './gen/apps/$templateName+firstUppercase~.js'
end

def type(page) and trigger(plugin)
	new HtmlWebPackPlugin({
		hash: true,
		title: "Test UI",
		chunks: ['$templateName'],
		template: "./src/$templateName.html",
		filename: "./$templateName.html"
	})
end