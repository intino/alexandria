rule type(axis)
	package $package+ValidPackage.analytic.axes;

	import $package+ValidPackage.analytic.Axis;

	import java.util.*;
	import java.util.stream.Stream;
	import java.util.function.Predicate;
	import java.util.function.Function;
	import java.util.stream.Collectors;

	public class $name+PascalCase implements Axis {

		public static final String TITLE = "$label";

		public static final Component NA = new Component(0, "NA"<<, $include+defaultValue...[, ]>>);
		<<$component...[$NL]>>

		private static final class Singleton {
			private static final $name+PascalCase INSTANCE = new $name+PascalCase();
		}

		// === STATIC METHODS === //

		public static $name+PascalCase get() {
			return Singleton.INSTANCE;
		}

		public static String title() {
			return TITLE;
		}

		public static int size() {
			return get().getSize();
		}

		public static List<Component> components() {
			return get().getComponents();
		}

		public static Stream<Component> stream() {
			return get().toStream();
		}

		public static List<Component> components(Predicate<Component> filter) {
			return get().getComponents(filter);
		}

		public static Component component(int index) {
			return get().getComponent(index);
		}

		public static Component component(String name) {
			return get().getComponent(name);
		}

		<<$include+staticGetter...[$NL$NL]>>

		// === === //

		private final Component[] components;
		private final Map<String, Component> componentsByName;

		private $name+PascalCase() {
			<<$components+load>>
			this.componentsByName = toStream().collect(Collectors.toMap(Component::id, Function.identity()));
		}

		@Override
		public String getTitle() {
			return TITLE;
		}

		@Override
		public int getSize() {
			return components.length;
		}

		/**
		* Get all components of this axis as a list, without the NA component (Starts with the component of index 1).
		*/
		@Override
		public List<Component> getComponents() {
			return new AbstractList<>() {
				@Override
				public Component get(int index) {
					return component(index + 1);
				}
				@Override
				public int size() {
					return $name+PascalCase~.size() - 1;
				}
			};
		}

		/**
		* Get all components of this axis as a stream, without the NA component (Starts with the component of index 1).
		*/
		@Override
		public Stream<Component> toStream() {
			return Arrays.stream(components).skip(1);
		}

		public List<Component> getComponents(Predicate<Component> filter) {
			return stream().filter(filter).collect(Collectors.toList());
		}

		@Override
		public Component getComponent(int index) {
			if(index < 0 || index >= components.length) return NA;
			return components[index];
		}

		@Override
		public Component getComponent(String name) {
			return componentsByName.getOrDefault(name, NA);
		}

		@Override
		public String toString() {
			return "$name+PascalCase";
		}


		public static class Component implements Axis.Component {

			private final int index;
			private final String id;
			$include+declaration...[$NL]

			Component(int index, String id<<, $include+parameter...[, ]>>) {
				this.index = index;
				this.id = id;
				$include+assign...[$NL]
			}

			@Override
			public int index() {
				return index;
			}

			@Override
			public String id() {
				return id;
			}

			<<$include+getter...[$NL$NL]>>

			@Override
			public Axis axis() {
				return $name+PascalCase.get();
			}

			@Override
			public boolean equals(Object o) {
				if (this == o) return true;
				if (o == null || getClass() != o.getClass()) return false;
				Component component = (Component) o;
				return index == component.index;
			}

			@Override
			public int hashCode() {
				return Objects.hash(index, id);
			}

			@Override
			public String toString() {
				return id;
			}
		}
	}

rule type(component)
	public static final Component $name = new Component($index, "$id"<<, "$label">><<, $include+constructor...[, ]>>);

rule attribute(name, label) and trigger(declaration)
	private final String $name+firstLowerCase;

rule type(include) and attribute(name, label) and trigger(staticGetter)
	public static $axis+PascalCase.Component componentByLabel(String label) {
		return stream().filter(c -> c.label().equals(label)).findFirst().orElse(NA);
	}

rule type(include) and attribute(type, continuous) and trigger(staticGetter)
	public static $axis+PascalCase.Component componentBy$label+PascalCase($name+PascalCase.Range range) {
		return stream().filter(c -> c.$label+CamelCase().equals(range)).findFirst().orElse(NA);
	}

rule type(include) and attribute(type, categorical) and trigger(staticGetter)
	public static $axis+PascalCase.Component componentBy$label+PascalCase($name+PascalCase.Component component) {
		return stream().filter(c -> c.$label+CamelCase().equals(component)).findFirst().orElse(NA);
	}

rule type(include) and attribute(type, continuous) and trigger(declaration)
	private final $name+PascalCase.Range $label+CamelCase;

rule type(include) and attribute(type, categorical) and trigger(declaration)
	private final $name+PascalCase.Component $label+CamelCase;

rule attribute(name, label) and trigger(getter)
	public String $name+CamelCase() {
		return $name+CamelCase;
	}

rule trigger(getter) and attribute(type, continuous)
	public $name+PascalCase.Range $label+CamelCase() {
		return $label+CamelCase;
	}

rule trigger(getter) and attribute(type, categorical)
	public $name+PascalCase.Component $label+CamelCase() {
		return $label+CamelCase;
	}

rule trigger(toString)
	sb.append(", $label+CamelCase=").append($label+CamelCase);

rule attribute(name, label) and trigger(defaultValue)
	"$id"

rule trigger(defaultValue) and attribute(type, categorical)
	$name+PascalCase.NA

rule trigger(defaultValue) and attribute(type, continuous)
	$name+PascalCase.component(0)

rule attribute(name, label) and trigger(parameter)
	String $name+CamelCase

rule attribute(type, categorical) and trigger(parameter)
	$name+PascalCase.Component $label+CamelCase

rule attribute(type, continuous) and trigger(parameter)
	$name+PascalCase.Range $label+CamelCase

rule attribute(name, label) and trigger(constructorFromTsv)
	l.length > $index ? l[$index] : "NA"

rule trigger(constructorFromTsv) and attribute(type, continuous)
	l.length > $index ? $name+PascalCase.rangeOf(Double.parseDouble(l[$index])) : $name+PascalCase.component(0)

rule trigger(constructorFromTsv) and attribute(type, categorical)
	l.length > $index ? $name+PascalCase.component(l[$index]) : $name+PascalCase.NA

rule trigger(constructor)
	$name+PascalCase.component("$id")

rule trigger(assign)
	this.$label+CamelCase = $label+CamelCase;

rule trigger(put)
	components.put($index, $name+FirstUpperCase);
	componentsByName.put("$name", $name+FirstUpperCase);

rule trigger(field)
	public static final Component $name+PascalCase = new Component($index, "$name"<<, "$label">>);

rule type(components) and attribute(embedded, true) and trigger(load)
	this.components = new Component[] {NA<<, $component...[, ]>>};

rule type(components) and attribute(embedded, false) and trigger(load)
	Component[] components = new Component[0];
	java.io.InputStream resource = getClass().getResourceAsStream("$resource");
	if(resource == null) throw new IllegalStateException("$name+PascalCase: Resource " + "$resource" + " not found");
	try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(resource))) {
			components = Stream.concat(Stream.of(NA),
			reader.lines().map(l -> l.split("\t")).map(l -> new Component(Integer.parseInt(l[0]),l[1]<<,$include+constructorFromTsv...[, ]>>))
			).toArray(Component[]::new);
		} catch (Exception e) {
			io.intino.alexandria.logger.Logger.error("Failed to load components of $name+PascalCase", e);
		}
		this.components = components;
