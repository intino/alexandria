rule type(action, jms, process) and not type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+PascalCase~Box;
	$schemaImport

	public class $name+firstUpperCase~Action implements $package.$service+firstUpperCase~Service.InboxDispatcher<~<<$returnType?Void>>~> {
		private $box+firstUpperCase~Box box;

		public $name+firstUpperCase~Action($box+firstUpperCase~Box box) {
			this.box = box;
		}

		public void onRequest(<<$parameter+onlyType input>>) {
			//TODO save input
		}

		public <<$returnType?Void>> onResponse() {
			return null;
		}
	}

rule type(action, notification) and not type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+PascalCase~Box;
	import io.intino.alexandria.exceptions.*;
	import io.intino.alexandria.http.pushservice.Client;
	import io.intino.alexandria.http.server.AlexandriaHttpNotifier;

	public class $name+PascalCase~Action {
		public $box+PascalCase~Box box;
		$contextProperty
		<<$parameter+type...[$NL]>>

		public void onOpen(Client client, AlexandriaHttpNotifier notifier) {
			//register listener
		}

		public void onClose(Client client) {
			//unregister listener
		}
	}

rule type(action, rest) and not type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+PascalCase~Box;
	import io.intino.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	$schemaImport

	public class $name+PascalCase~Action implements io.intino.alexandria.rest.RequestErrorHandler {
		public $box+PascalCase~Box box;
		$contextProperty
		<<$parameter+type...[$NL]>>

		public <<$returnType?void>> execute() <<throws $throws+FirstUpperCase...[, ]>> {
			$returnType+return
		}

		public void onMalformedRequest(Throwable e) throws AlexandriaException {
			//TODO
			throw new BadRequest("Malformed request");
		}
	}

rule type(action) and not type(ui)
	package $package+validPackage.actions;

	import $package+validPackage.$box+PascalCase~Box;
	$schemaImport

	public class $name+PascalCase~Action {
		public $box+PascalCase~Box box;
		$contextProperty
		<<$parameter+type...[$NL]>>

		public <<$returnType?void>> execute() <<throws $throws+FirstUpperCase...[, ]>> {
			$returnType+return
		}
	}

rule type(ui, exposedDisplay, entryPoint, gen)
	package $package+validPackage.ui.pages;

    import io.intino.alexandria.ui.AlexandriaUiBox;

    public abstract class Abstract$name+PascalCase~Page extends io.intino.alexandria.ui.server.pages.WebPage {
        public AlexandriaUiBox box;

        public Abstract$name+PascalCase~Page() { super("$uiService+camelCaseToKebabCase+lowerCase"); }

		public String execute() <<throws $throws+FirstUpperCase...[, ]>> {
			return super.template("$name+firstLowerCase");
		}

		@Override
		protected String title() {
			return <<$title?"">>;
		}

		@Override
		protected java.net.URL favicon() {
			return <<$favicon?null;>>
		}
    }

rule type(ui, exposedDisplay, entryPoint)
	package $package+validPackage.ui.pages;

	import $package+validPackage.ui.displays<<.$packageType~s>>.$display+PascalCase;

    public class $name+PascalCase~Page extends Abstract$name+PascalCase~Page {
        <<$parameter+type...[$NL]>>

        public io.intino.alexandria.ui.Soul prepareSoul(io.intino.alexandria.ui.services.push.UIClient client) {
            return new io.intino.alexandria.ui.Soul(session) {
                @Override
                public void personify() {
                    $name+PascalCase display = new $name+PascalCase(box);
                    $parameter+methodCall...[$NL]
                    register(display);
                    display.init();
                    display.refresh();
                }
            };
        }

    }

rule type(ui, exposedDisplay)
	package $package+validPackage.ui.pages;

	import io.intino.alexandria.ui.AlexandriaUiBox;
	import $package+validPackage.ui.displays<<.$packageType~s>>.$display+PascalCase;
	import io.intino.alexandria.ui.Soul;

	public class $name+PascalCase~ProxyPage extends io.intino.alexandria.ui.server.pages.ProxyPage {
		public AlexandriaUiBox box;
		<<$parameter+type...[$NL]>>
		public Soul soul;

		public void execute() {
			$display+PascalCase display = new $display+PascalCase(box);
			display.id(personifiedDisplay);
			$parameter+methodCall...[$NL]
			soul.register(display);
			display.init();
			display.refresh();
		}
	}

rule type(ui, mobile, action, gen)
    package $package+validPackage.ui.pages;

	import $package+validPackage.$box+PascalCase~Box;

    import java.util.Collections;
    import java.util.List;

    public abstract class Abstract$name+PascalCase~MobilePage extends io.intino.alexandria.ui.server.pages.MobilePage {
		public $box+PascalCase~Box box;

        public String redirectUrl() { return null; }

        public String execute() <<throws $throws+FirstUpperCase...[, ]>> {
            List<String> connections = pushConnections(Collections.emptyList(), session.id(), session.discoverLanguage(), session.browser());
            return String.join(",", connections);
        }

    }

rule type(ui, mobile, action)
	package $package+validPackage.ui.pages;

	import io.intino.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	import $importTemplates+validPackage.ui.displays.templates.*;

	public class $name+PascalCase~MobilePage extends Abstract$name+PascalCase~MobilePage {
		<<$parameter+type...[$NL]>>
		<<$editor+parameter>>

		$component
	}

rule type(ui, action, gen, asset)
	package $package+validPackage.ui.pages;

	import $package+validPackage.$box+PascalCase~Box;

	public abstract class Abstract$name+PascalCase~Page extends io.intino.alexandria.ui.server.pages.Page {
		public $box+PascalCase~Box box;
	}

rule type(ui, action, gen)
	package $package+validPackage.ui.pages;

	import $package+validPackage.$box+PascalCase~Box;
	import io.intino.alexandria.exceptions.*;
	import java.util.*;

	public abstract class Abstract$name+PascalCase~Page extends io.intino.alexandria.ui.server.pages.WebPage {
		public $box+PascalCase~Box box;

		public Abstract$name+PascalCase~Page() { super("$uiService+camelCaseToKebabCase+lowerCase"); }

		public $returnType execute() <<throws $throws+FirstUpperCase...[, ]>> {
			$executeBody
		}

		@Override
		protected String title() {
			return $title;
		}

		@Override
		protected java.net.URL favicon() {
			return <<$favicon?null;>>
		}
	}

rule type(returnType, asset)
	io.intino.alexandria.Resource

rule type(returnType)
    String

rule type(executeBody, static)
	return "$text";

rule type(executeBody, asset)
	return null;

rule type(executeBody)
	return super.template("$templateName"<<, Arrays.asList($usedUnit...[,])>>);

rule type(title, configuration)
	"{$title}".replace("{$title}", box.configuration().get("$title"))

rule type(title)
	"$title"

rule trigger(favicon)
	this.getClass().getResource("$this");

rule type(ui, action) and not type(gen)
	package $package+validPackage.ui.pages;

	import io.intino.alexandria.exceptions.*;
	import java.time.*;
	import java.util.*;
	import $importTemplates+validPackage.ui.displays.templates.*;

	public class $name+PascalCase~Page extends Abstract$name+PascalCase~Page {
		<<$parameter+type...[$NL]>>
		<<$editor+parameter>>

		$component
	}

rule type(parameter, fileData) and trigger(type)
	public io.intino.alexandria.Resource $name+CamelCase;

rule type(parameter, list) and trigger(type)
	public java.util.List<$type> $name+CamelCase;

rule type(parameter, word) and trigger(type)
	public String $name+CamelCase;

rule type(parameter) and trigger(type)
	public $type $name+CamelCase;

rule type(parameter) and trigger(methodCall)
	display.$name+CamelCase($name+CamelCase);

rule type(fileData) and trigger(onlyType)
	io.intino.alexandria.Resource

rule type(list) and trigger(onlyType)
	java.util.List<$type>

rule trigger(onlyType)
	$type

rule type(editor) and trigger(parameter)
	public io.intino.alexandria.Resource document;
	public io.intino.alexandria.ui.services.EditorService.Permission permission;

rule attribute(this, void) and trigger(return)

rule trigger(return)
	return null;

rule type(schemaImport) and trigger(schemaImport)
	import $package.schemas.*;

rule type(component, static)
	public String execute() {
		return super.execute();
	}

rule type(component, asset)
	public io.intino.alexandria.Resource execute() {
		return null;
	}

rule type(component)
	public io.intino.alexandria.ui.Soul prepareSoul(io.intino.alexandria.ui.services.push.UIClient client) {
		return new io.intino.alexandria.ui.Soul(session) {
			@Override
			public void personify() {
				$value+PascalCase component = new $value+PascalCase(box);
				<<$editor+component>>
				register(component);
				component.init();
			}
		};
	}

rule type(editor) and trigger(component)
	component.document(document);
	component.permission(permission);
	component.display(new $display+PascalCase(box));

rule type(usedUnit, standard)
	new io.intino.alexandria.ui.server.pages.Unit("$name","$url"<<,"$socketPath">>)

rule type(usedUnit, custom)
	new io.intino.alexandria.ui.server.pages.Unit("$name",box.configuration().get("$url")<<,"$socketPath">>)

rule type(contextProperty, server)
	public io.intino.alexandria.http.server.AlexandriaHttpContext context;

rule type(contextProperty)
	public io.intino.alexandria.Context context = new io.intino.alexandria.Context();
