rule type(display)
	$import

	export default class $name+firstUpperCase~$proxy~Notifier extends $parentType {
		constructor(element) {
			super(element);
			this.setup();
		};

		setup() {
			if (this.element == null || this.pushLinked) return;
			super.setup();
			<<$notification...[$NL]>>
			<<$event...[$NL]>>
			this.pushLinked = true;
		};
	}

rule attribute(extensionOf) and trigger(import)
	import $parent+firstUpperCase~Notifier from "./$parent+firstUpperCase~Notifier"

rule attribute(component) and trigger(import)
	import Notifier from "alexandria-ui-elements/src/displays/notifiers/ComponentNotifier";

rule attribute(exposed) and trigger(import)
	import Notifier from "alexandria-ui-elements/gen/displays/notifiers/ProxyDisplayNotifier";

rule attribute(baseType) and trigger(import)
	import Notifier from "alexandria-ui-elements/gen/displays/notifiers/$type+firstUpperCase~Notifier";

rule trigger(import)
	import Notifier from "./Notifier";

rule attribute(exposed) and trigger(proxy)
	Proxy

rule trigger(proxy)

rule attribute(extensionOf) and trigger(parentType)
	$parent+firstUpperCase~Notifier

rule trigger(parentType)
	Notifier

rule trigger(notification)
	this.when("$name")<<$target>>.execute((<<$parameter+call>>) => this.element.$name(<<$parameter+value>>));

rule type(parameter) and trigger(call)
	parameters

rule type(parameter) and trigger(value)
	parameters.v

rule attribute(this, Display) and trigger(target)
	.toSelf()

rule trigger(target)

rule type(event)
	this.when("$name+firstLowerCase").toSelf().execute((parameters) => this.element.notifyProxyMessage("$name+firstLowerCase"));
