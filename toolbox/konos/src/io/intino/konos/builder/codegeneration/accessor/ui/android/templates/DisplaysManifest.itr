rule type(manifest)
    package $package.mobile.android.displays

    import android.content.Context
    import $package.mobile.android.displays.*
    $display+import...[$NL]
    import io.intino.alexandria.mobile.android.displays.PassiveView
    import io.intino.alexandria.mobile.displays.DisplayDefinition

    object $exposed~Displays {

        fun get(definition: DisplayDefinition, context: Context) : PassiveView<*, *>? {
            return when(definition.type()) {
                $display...[$NL]
                //else -> throw Exception("Display not found for type " + definition.type())
                else -> null
            }
        }

    }

rule type(display, row) and trigger(import)
    import $package.mobile.android.displays.rows.$name+firstUppercase

rule type(display, row)
    "$name+firstUppercase" -> $name+firstUppercase~(context)

rule type(display, mold) and trigger(import)
    import $package.mobile.android.displays.components.$name+firstUppercase

rule type(display, mold)
    "$name+firstUppercase" -> $name+firstUppercase~(context)

rule type(display, item) and trigger(import)
    import $package.mobile.android.displays.items.$name+firstUppercase

rule type(display, item)
    "$name+firstUppercase" -> $name+firstUppercase~(context)

rule type(display, template) and trigger(import)
    import $package.mobile.android.displays.templates.$name+firstUppercase

rule type(display, template)
    "$name+firstUppercase" -> $name+firstUppercase~(context)

rule type(component) and trigger(import)
    import $package.mobile.android.displays.components.$name+firstUppercase
    import $package.mobile.displays.notifiers.$name+firstUppercase~Notifier
    import $package.mobile.displays.requesters.$name+firstUppercase~Requester

rule type(display) and trigger(import)
    import $package.mobile.displays.notifiers.$name+firstUppercase~Notifier
    import $package.mobile.displays.requesters.$name+firstUppercase~Requester

rule type(display)
    "$name+firstUppercase" -> $name+firstUppercase~<$name+firstUppercase~Requester, $name+firstUppercase~Notifier>(context)
