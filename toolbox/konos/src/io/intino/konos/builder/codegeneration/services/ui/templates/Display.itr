rule type(display)
	package $package.ui.displays<<.$packageType~s>>;

	import io.intino.alexandria.exceptions.*;
	import $package.*;
	$schemaImport
	import $package+validPackage.$box+firstUpperCase~Box;
	import $package+validPackage.ui.displays<<.$packageType~s>>.Abstract$name+firstUpperCase;
	<<$accessibleNotifier+import>>

	public class $name+firstUpperCase extends Abstract$name+firstUpperCase<~<<$accessibleNotifier, >>$box+firstUpperCase~Box> {

		public $name+firstUpperCase($box+firstUpperCase~Box box) {
			super(box);
		}

		<<$request...[$NL$NL]>>
		<<$parameter+setter...[$NL$NL]>>
	}

rule type(accessibleNotifier) and trigger(import)
	import $package+validPackage.ui.displays.notifiers.$name+firstUpperCase~Notifier;

rule type(accessibleNotifier)
	$name+firstUpperCase~Notifier

rule type(templatesImport)
	import $package+validPackage.ui.displays.templates.*;

rule type(blocksImport)
	import $package+validPackage.ui.displays.blocks.*;

rule type(itemsImport)
	import $package+validPackage.ui.displays.items.*;

rule type(request, asset)
	public io.intino.alexandria.ui.spark.UIFile $name(<<$parameter value>>) {
		return null;
	}

rule type(request)
	public void $name(<<$parameter value>>) {

	}

rule trigger(setter)
	public void $value+firstLowerCase(String value) {

	}

rule (type(dateTime) or type(date)) and type(list) and trigger(parameter)
	$value

rule (type(dateTime) or type(date)) and trigger(parameter)
	$value

rule type(list) and trigger(parameter)
	$value[]

rule trigger(parameter)
	$value

rule type(schemaImport)
	import $package.schemas.*;

rule trigger(import)
	import $package.ui.displays.*;
