def type(interface)
	package $package+ValidPackage.analytic;

	import $package+ValidPackage.analytic.axes.*;

	import java.util.List;
	import java.util.stream.Stream;

	public interface Axis {

		String getTitle();

		int getSize();

		List<? extends Component> getComponents();

		Component getComponent(int index);

		Component getComponent(String id);

		default boolean isDynamic() {
			return false;
		};

		default Stream<? extends Component> toStream() {
			return getComponents().stream();
		}

		default Stream<? extends Component> toParallelStream() {
			return toStream().parallel();
		}


		interface Component {

			int index();

			String id();

			default String label() {
				return id();
			}

			Axis axis();
		}

		static Axis byName(String name) {
			switch(name) {
				<<$axis+NameCase...[$NL]>>
			}
			return null;
		}

		static Axis byLabel(String label) {
			switch(label) {
				<<$axis+LabelCase...[$NL]>>
			}
			return null;
		}

		static List<Axis> all() {
			return List.of(
				<<$axis+ListElement...[,$NL]>>
			);
		}
	}
end

def type(axis) and trigger(NameCase)
	case "$axis+PascalCase": return $axis+PascalCase.get();
end

def type(axis) and trigger(LabelCase)
	case $axis+PascalCase.TITLE: return $axis+PascalCase.get();
end

def type(axis) and trigger(ListElement)
	$axis+PascalCase.get()
end