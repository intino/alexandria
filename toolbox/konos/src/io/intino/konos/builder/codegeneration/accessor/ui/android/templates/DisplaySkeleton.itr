rule type(display, exposed)

rule type(display, template, scrollable)
    package $package.mobile.android.displays<<.$packageType~s>>

    import android.content.Context
    import android.util.AttributeSet
    import android.view.View
    import android.widget.ScrollView
    import $package.mobile.android.R
    import io.intino.alexandria.mobile.displays.notifiers.TemplateNotifier
    import io.intino.alexandria.mobile.displays.requesters.TemplateRequester

    open class $name+firstUpperCase @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) : io.intino.alexandria.mobile.android.displays.components.Template<TemplateRequester, TemplateNotifier>(context, attrs, defStyleAttr, defStyleRes, R.layout.$name+camelCaseToSnakeCase+lowerCase) {
        init {
            this.notifier = TemplateNotifier(this)
            this.requester = TemplateRequester(this)
            val scroller = findViewById<ScrollView>(R.id.$name+camelCaseToSnakeCase~_scroll)
            <<$component+transfer...[$NL]>>
            scroller.setOnTouchListener { _, _ ->
                scroller.requestDisallowInterceptTouchEvent(false)
                false
            }
            <<$component+scrolling...[$NL]>>
        }
    }

rule type(display, template)
    package $package.mobile.android.displays<<.$packageType~s>>

    import android.content.Context
    import android.util.AttributeSet
    import $package.mobile.android.R
    import io.intino.alexandria.mobile.displays.notifiers.TemplateNotifier
    import io.intino.alexandria.mobile.displays.requesters.TemplateRequester

    open class $name+firstUpperCase @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) : io.intino.alexandria.mobile.android.displays.components.Template<TemplateRequester, TemplateNotifier>(context, attrs, defStyleAttr, defStyleRes, R.layout.$name+camelCaseToSnakeCase+lowerCase) {
        init {
            this.notifier = TemplateNotifier(this)
            this.requester = TemplateRequester(this)
            <<$component+transfer...[$NL]>>
        }
    }

rule type(display, collection)
	import React from "react";
	import { withStyles } from '@material-ui/core/styles';
	import Abstract$name+firstUpperCase from "../../$packageTypeRelativeDirectory~gen/displays<</$packageType~s>>/Abstract$name+firstUpperCase";
	import $name+firstUpperCase~Notifier from "../../$packageTypeRelativeDirectory~gen/displays/notifiers/$name+firstUpperCase~Notifier";
	import $name+firstUpperCase~Requester from "../../$packageTypeRelativeDirectory~gen/displays/requesters/$name+firstUpperCase~Requester";
	import DisplayFactory from 'alexandria-ui-elements/src/displays/DisplayFactory';
	import { withSnackbar } from 'notistack';
	import { $type+firstUpperCase~Styles } from "alexandria-ui-elements/src/displays/components/$type+firstUpperCase";

	const styles = theme => ({
		...$type+firstUpperCase~Styles(theme),
	});

	class $name+firstUpperCase extends Abstract$name+firstUpperCase {

		constructor(props) {
			super(props);
			this.notifier = new $name+firstUpperCase~Notifier(this);
			this.requester = new $name+firstUpperCase~Requester(this);
		};

		$notification...[$NL$NL]
	}

	export default withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase));
	DisplayFactory.register("$name+firstUpperCase", withStyles(styles, { withTheme: true })(withSnackbar($name+firstUpperCase)));

rule type(display, interface)
    package $package.mobile.displays<<.$packageType~s>>

    $schemaImport

    interface $name+firstUpperCase $displayExtends+interface {
        $notification+interface...[$NL$NL]
    }

rule type(display)
    package $package.mobile.android.displays<<.$packageType~s>>

    import android.content.Context
    import android.util.AttributeSet
    import androidx.core.content.ContextCompat.*

    import $package.mobile.displays.notifiers.$name+firstUpperCase~Notifier
    import $package.mobile.displays.requesters.$name+firstUpperCase~Requester
    import $package.mobile.android.R
    $schemaImport

    open class $name+firstUpperCase<DR: $name+firstUpperCase~Requester, DN: $name+firstUpperCase~Notifier> @JvmOverloads constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0, defStyleRes: Int = 0, layout: Int? = null) $displayExtends, $package.mobile.displays<<.$packageType~s>>.$name+firstUpperCase {

        init {
			this.requester = $name+firstUpperCase~Requester(this) as DR
			this.notifier = $name+firstUpperCase~Notifier(this) as DN
            inflate(viewContext(), layout ?: R.layout.$name+camelCaseToSnakeCase+lowerCase, this)
        }

		$notification...[$NL$NL]

    }

rule type(notification) and trigger(interface)
    fun $name(<<value : $parameter>>)

rule type(notification)
    override fun $name(<<value: $parameter>>) {
    }

rule trigger(parameterValue)
	value

rule type(date) and trigger(parameter)
    kotlinx.datetime.Instant

rule type(datetime) and trigger(parameter)
    kotlinx.datetime.Instant

rule type(integer) and trigger(parameter)
    Int

rule type(list) and trigger(parameter)
    kotlin.collections.List<$value>

rule trigger(parameter)
    $value

rule type(displayExtends, generic) and trigger(interface)
	: $parentMobileShared

rule type(displayExtends, generic, isExtensionOf)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, generic)
	: $parent<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))

rule type(displayExtends, template) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.Template

rule type(displayExtends, template)
	: io.intino.alexandria.mobile.android.displays.components.Template<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, table) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.$type+firstUpperCase$facet...[]

rule type(displayExtends, table)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, dynamictable) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.$type+firstUpperCase$facet...[]

rule type(displayExtends, dynamictable)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, collection) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.$type+firstUpperCase$facet...[]

rule type(displayExtends, collection)
	: io.intino.alexandria.mobile.android.displays.components.$type+firstUpperCase$facet...[]<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, item) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.Item

rule type(displayExtends, item)
	: io.intino.alexandria.mobile.android.displays.components.Item<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, row) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.Row

rule type(displayExtends, row)
	: io.intino.alexandria.mobile.android.displays.components.Row<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends, dialog) and trigger(interface)
	: io.intino.alexandria.mobile.displays.components.Dialog

rule type(displayExtends, dialog)
	: io.intino.alexandria.mobile.android.displays.components.Dialog<DR, DN>(context, attrs, defStyleAttr, defStyleRes)

rule type(displayExtends) and trigger(interface)
	: io.intino.alexandria.mobile.displays.$type+firstUpperCase

rule type(displayExtends)
	: io.intino.alexandria.mobile.android.displays.$type+firstUpperCase<DR, DN>(context, attrs, defStyleAttr, defStyleRes, IntArray(0))

rule type(schemaImport)
	import $package.mobile.schemas.*;
