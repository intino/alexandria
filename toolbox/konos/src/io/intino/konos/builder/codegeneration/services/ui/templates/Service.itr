rule type(ui, exposedAccessor)
	package $package+validPackage.ui;

	import io.intino.alexandria.ui.AlexandriaUiServer;
	import io.intino.alexandria.ui.services.push.PushService;

	public class $name+PascalCase~Service extends io.intino.alexandria.ui.UI {

		public static void initDisplays(AlexandriaUiServer server, PushService pushService) {
		}

	}

rule type(ui)
	package $package+validPackage.ui;
	<<import $displaysImport+validPackage.ui.displays.*;>>
	<<import $notifiersImport+validPackage.ui.displays.notifiers.*;>>
	<<import $requestersImport+validPackage.ui.displays.requesters.*;>>
	import $package+validPackage.ui.resources.*;
	<<import $package+validPackage.$box+PascalCase~Box;>>
	<<import $package+validPackage.$box+PascalCase~Configuration;>>

	import io.intino.alexandria.ui.AlexandriaUiServer;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifier;
	import io.intino.alexandria.ui.displays.notifiers.DisplayNotifierProvider;
	import io.intino.alexandria.ui.displays.DisplayRouteDispatcher;
	import io.intino.alexandria.ui.resources.AssetResourceLoader;
	import io.intino.alexandria.ui.services.push.PushService;
	import io.intino.alexandria.ui.server.resources.AfterDisplayRequest;
	import io.intino.alexandria.ui.server.resources.AssetResource;
	import io.intino.alexandria.ui.server.resources.AuthenticateCallbackResource;
	import io.intino.alexandria.ui.server.resources.BeforeDisplayRequest;

	import java.net.MalformedURLException;
	import java.net.URL;

	public class $name+PascalCase~Service extends io.intino.alexandria.ui.UI {

		public static void init(AlexandriaUiServer server, $box+PascalCase~Box box, PushService pushService, DisplayRouteDispatcher routeDispatcher) {
			$box+PascalCase~Configuration configuration = ($box+PascalCase~Configuration) box.configuration();
			box.routeManager(routeManager(server, routeDispatcher));
            server.route("/_alexandria/push").register(pushService);
            server.route("/authenticate-callback").get(manager -> new AuthenticateCallbackResource(manager, notifierProvider()).execute());
            server.route("/authenticate-callback/").get(manager -> new AuthenticateCallbackResource(manager, notifierProvider()).execute());
            server.route("/asset/:name").get(manager -> new AssetResource(name -> new AssetResourceLoader(box).load(name), manager, notifierProvider()).execute());
			<<$userHome>>
			<<$resource+path...[$NL]>>
			initExposedResources(box, server, pushService);
			initProxyDisplays(box, server, pushService);
			initDisplays(server, pushService);
		}

		public static void initExposedResources(io.intino.alexandria.ui.AlexandriaUiBox box, AlexandriaUiServer server, PushService pushService) {
			$resource+exposed...[$NL]
		}

		public static void initProxyDisplays(io.intino.alexandria.ui.AlexandriaUiBox box, AlexandriaUiServer server, PushService pushService) {
			$display+path...[$NL]
		}

		public static void initDisplays(AlexandriaUiServer server, PushService pushService) {
			$display+init...[$NL]
			registerNotifiers();
		}

		private static void registerNotifiers() {
			$display+notifier...[$NL]
		}

		$display+method...[$NL]
	}

rule type(resource, exposed) and trigger(exposed)
	$path+exposed...[$NL]

rule type(resource) and trigger(exposed)

rule type(resource) and trigger(path)
	$path...[$NL]

rule trigger(userHome)
	server.route("/alexandria/user").get(manager -> new $this+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(display, exposed, row) and trigger(path)

rule type(display, exposed) and trigger(path)
	server.route("/$name+lowercase~proxy/:displayId/personify").post(manager -> new $name+firstUpperCase~ProxyResource(box, manager, notifierProvider()).execute());

rule type(display) and trigger(path)

rule type(path, editor)
	server.route("$value"<<$custom...[]>>).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());
	server.route("$value"<<$custom...[]>>).post(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(path) and trigger(exposed)
	server.route("$value"<<$custom...[]>>).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(path)
	server.route("$value"<<$custom...[]>>).get(manager -> new $name+firstUpperCase~Resource(box, manager, notifierProvider()).execute());

rule type(display, proxy) and trigger(notifier)
	register($name+firstUpperCase~ProxyNotifier.class).forDisplay($package+validPackage.ui.displays.<<$type~s.>>$name+firstUpperCase~Proxy.class);

rule type(display, genericNotifier) and trigger(notifier)
	register(io.intino.alexandria.ui.displays.notifiers.$generic+firstUpperCase~Notifier.class).forDisplay($package+validPackage.ui.displays.<<$type~s.>>$name+firstUpperCase.class);
	<<$display+notifier>>

rule type(display) and trigger(notifier)
	register($name+firstUpperCase~Notifier.class).forDisplay($package+validPackage.ui.displays.<<$type~s.>>$name+firstUpperCase.class);
	<<$display+notifier>>

rule trigger(custom)
	.replace("{$this}", configuration.get("$this"))

rule type(display, proxy) and trigger(proxy)
	server.route("/$name+lowercase~proxy/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());
	server.route("/$name+lowercase~proxy/:displayId").post(manager -> new $name+firstUpperCase~ProxyRequester(manager, notifierProvider()).execute());
	server.route("/$name+lowercase~proxy/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());

rule type(display) and trigger(init)
	init$name+firstUpperCase(server, pushService);

rule type(display) and trigger(method)
	private static void init$name+firstUpperCase(AlexandriaUiServer server, PushService pushService) {
		server.route("/$name+lowercase/:displayId").before(manager -> new BeforeDisplayRequest(manager).execute());
		server.route("/$name+lowercase/:displayId").post(manager -> new $requesterType~Requester(manager, notifierProvider()).execute());
		<<$asset>>
		server.route("/$name+lowercase/:displayId").after(manager -> new AfterDisplayRequest(manager).execute());
		pushService.register("$name+lowercase", new $requesterType~PushRequester());
		$display+proxy
	}

rule type(display)

rule trigger(asset)
	server.route("/$this+lowercase/:displayId").get(manager -> new $this+firstUppercase~Requester(manager, notifierProvider()).execute());

rule trigger(quoted)
	"$this"

rule type(custom) and trigger(custom)
	.replace("{$this}", configuration.get("$this"))
