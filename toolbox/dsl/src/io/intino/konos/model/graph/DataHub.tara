dsl Proteo

use DataTypes

Concept:{0..1} DataHub
	var string workingDirectory
	Concept Split > var string[] splits
	Concept:Named:RequiresFacet Tank > var string fullName
	has Adapter
	has Mounter
	has Feeder

Concept:Named Mounter is component
Concept:Named Adapter is component

Facet DataHubLocation on DataHub is abstract
	sub Mirrored
		var string originSshUrl
		var string originDatalakePath
		var string user
		var string password = empty
		var string destinationPath
		var string startingTimetag
		has:{0..1} MessageHub
		has:{0..1} Broker
	sub StandAlone
		var string datalakePath
		var word:{Year Month Day Hour Minute} scale
		has:{0..1} Broker
		Concept:{0..1} Seal
			var string when
			var string description
	sub Local
		var string datalakePath
		has:{0..1} MessageHub

Facet TankType on DataHub.Tank
	sub Event > var Schema schema
	sub Set > var DataHub.Split split = empty
Facet Singleton on DataHub.Tank with Set

Concept MessageHub is component
	var string busUrl
	var string user
	var string password
	var string clientId

Facet JmsHub on MessageHub

Concept Broker is component
	var word:{Embed Remote} location = Embed
	var integer port = 63000
	var integer mqtt_port = 1884
	var string connectorId
	Concept User
		var string name
		var string password
	Concept Pipe
		var string origin
		var string destination

Concept:Named Datamart
	var string path

Facet MounterType on Mounter
	sub Population
		Concept:{1..*} Column
			var Set tank
			var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type
		Concept:{0..1}:Named Filter
		Concept:{0..1} Aggregation
			Concept:{1..*} Column
				var string name
				var DataHub.Tank tank
				var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type
		Concept:{1..1} Collect
        	var Datamart datamart
        	var word:{Arff Tabb Csv} format
	sub Realtime
		var string subscriberId
		Concept:{1..*} Select
			var DataHub.Tank tank
			var DataHub.Split split = empty
//	sub TimeLine
//		Concept Select extends Realtime.Select
//			var word:{Sum Average Count Custom} aggregator

//sin faceta, es un mounter generico con datalake.
Facet Id on Population.Column
	var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type = Long
Facet Constant on Population.Column
	var word:{Boolean String Integer Double Nominal Datetime Instant Long Timetag} type = String
	var string value

Concept Feeder is component
	var DataHub.Tank[] tanks
	has:Named Sensor

Concept:Named Sensor is component

Facet UserSensor on Sensor
	var integer:{%} width = 100%
	var integer:{%} height = 100%

Facet FormEdition extends UserSensor on Sensor
	var string path

Facet DocumentEdition extends UserSensor on Sensor
	var word:{Offline Online} mode = Online

Facet DocumentSignature extends UserSensor on Sensor
	var word:{Sign CoSign CounterSign} signType
	var word:{Pkcs7 XadesAttached XadesDetached CadesAttached CadesDetached} signFormat

Facet Poll extends UserSensor on Sensor
	var string defaultOption = empty
	Concept Option
		var string value
		var Schema event
		has Option

Facet Device on Sensor

Concept EventSource is abstract
	var string name = 'io.intino.konos.model.graph.Utils.isUUID(self.name$()) && self.schema() != null ? self.schema().name$() : self.name$()' is private reactive
	var Schema schema
	var string subdomain = ""
