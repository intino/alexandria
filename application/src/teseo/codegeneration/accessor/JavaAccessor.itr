def type(accessor)
	package $package+validname;

	import java.net.URL;
	import java.time.LocalDateTime;
	import teseo.restful.core.Resource;
	import teseo.restful.core.RestfulAccessor;
	import teseo.restful.exceptions.RestfulFailure;
	import com.google.gson.Gson;
	import teseo.exceptions.*;
	$schemaImport

	public class $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor {

		private URL url;
		private RestfulAccessor accessor = new RestfulAccessor();

		public $name+firstUpperCase+SnakeCaseToCamelCase$~Accessor(URL url) {
			this.url = url;
		}

		$resources...[$NL$NL]
	}
end

def type(resource)
	public $returnType+firstUpperCase+ReturnTypeFormatter $name($parameters+declaration...[, ]) $exceptionResponses+declaration {
		try {
			java.util.Map<String, String> parameters = new java.util.HashMap<String,String>(){{
				$parameters+toMap...[$NL]
			}};
			$invokeSentence
		} catch (RestfulFailure e) {
			$exceptionResponses+throws
		}
	}
end

def type(parameter) trigger(declaration)
	$parameterType $name+SnakeCaseToCamelCase+firstLowerCase
end

def type(parameter & query & required) type(dateTimeData | dateData) trigger(toMap)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant(java.time.ZoneOffset.UTC).toEpochMilli()));
end

def type(parameter & query & required) type(htmlData | textData) trigger(toMap)
	put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query & required) type(boolData | integerData | realData) trigger(toMap)
	put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & query & required & objectData) trigger(toMap)
	put("$name", String.valueOf(new Gson().toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(parameter & query) type(dateTimeData | dateData) trigger(toMap)
	if($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase.toInstant(java.time.ZoneOffset.UTC).toEpochMilli()));
end

def type(parameter & query) type(htmlData | textData) trigger(toMap)
	if($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", $name+SnakeCaseToCamelCase+firstLowerCase);
end

def type(parameter & query) type(boolData | integerData | realData) trigger(toMap)
	if($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf($name+SnakeCaseToCamelCase+firstLowerCase));
end

def type(parameter & query & objectData) trigger(toMap)
	if($name+SnakeCaseToCamelCase+firstLowerCase != null) put("$name", String.valueOf(new Gson().toJson($name+SnakeCaseToCamelCase+firstLowerCase)));
end

def type(invokeSentence & void)
	$doInvoke;
end

def type(invokeSentence & object)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & file)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & html)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & date)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & datetime)
	return new Gson().fromJson($doInvoke.content(), $returnType+firstUpperCase.class);
end

def type(invokeSentence & primitive & int)
	return Integer.valueOf($doInvoke.content());
end
def type(invokeSentence & primitive)
	return $returnType+firstUpperCase.valueOf($doInvoke.content());
end

def type(exceptionResponses & none) trigger(throws)
	throw new ErrorUnknown(e.label());
end

def type(exceptionResponses) trigger(throws)
	$exceptionResponse+throws...[$NLelse ]
	throw new ErrorUnknown(e.label());
end

def type(exceptionResponse) trigger(throws)
	if(e.code().equals("$code"))
		throw new $exceptionName(e.label());
end

def type(exceptionResponses) trigger(declaration)
	throws [$exceptionResponse+declaration...[, ], ]ErrorUnknown
end

def type(exceptionResponse) trigger(declaration)
	$exceptionName
end

def type(doInvoke)
	accessor.$type+firstLowerCase(this.url, "$relativePath"[ + "/" + $parameters+SnakeCaseToCamelCase+firstLowerCase...[ + "/" + ]], parameters)
end

def type(schemaImport)
	import $package.schemas.*;
end