def type(scheduler)
	package $package+validname;

	import tara.magritte.Graph;
	import teseo.framework.scheduling.TeseoScheduler;
	import $package+validname.scheduling.*;
	import org.quartz.*;
	import java.util.LinkedHashSet;
	import java.util.Map;
	import java.util.Set;

	import static org.quartz.JobBuilder.newJob;
	import static org.quartz.CronScheduleBuilder.*;
	import static org.quartz.TriggerBuilder.newTrigger;

	public class $name+firstUpperCase+SnakeCaseToCamelCase~Schedules {

		public static void init(TeseoScheduler scheduler, Graph graph) {
			JobDetail job;
			try {
				$schedule+init...[$NL]
				scheduler.start();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}

		$schedule+create...[$NL]

		public static void create(Class triggerClass, TeseoScheduler scheduler, Map<String, Object> parameters) {
			$schedule+switch
		}

		private static Set<Trigger> newSet(Trigger... triggers) {
			LinkedHashSet<Trigger> set = new LinkedHashSet<>();
			java.util.Collections.addAll(set, triggers);
			return set;
		}
	}
end

def type(schedule) !type(onStart) trigger(create)
	public static void $name+SnakeCaseToCamelCase+firstLowerCase(TeseoScheduler scheduler, Map<String, Object> parameters) {
		try {
			JobDetail job = newJob($name+SnakeCaseToCamelCase~Trigger.class).withIdentity("$name").build();
			for (Map.Entry<String, Object> entry : parameters.entrySet())
				job.getJobDataMap().put(entry.getKey(), entry.getValue());
			scheduler.scheduleJob(job, newSet($trigger...[, ]), true);
		} catch (SchedulerException e) {
			e.printStackTrace();
		}
	}
end

def type(schedule) !type(onStart) trigger(switch)
	if ($name+SnakeCaseToCamelCase~Trigger.class.equals(triggerClass)) $name+SnakeCaseToCamelCase+firstLowerCase(scheduler, parameters);
end

def type(schedule & onStart) trigger(init)
	job = newJob($name+SnakeCaseToCamelCase~Trigger.class).withIdentity("$name").build();
	job.getJobDataMap().put("graph", graph);
	scheduler.scheduleJob(job, newSet($trigger...[, ]), true);
end

def type(cronTrigger) trigger(trigger)
	newTrigger().withIdentity("$name").withSchedule(cronSchedule("$pattern")).build()
end

def type(oneTimeTrigger) trigger(trigger)
	newTrigger().startNow().build()
end