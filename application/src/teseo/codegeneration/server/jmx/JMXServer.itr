def type(jmxserver)
	package $package+validname;

    import org.siani.teseo.jmx.JMXServer;
    import tara.magritte.Graph;

    import java.util.HashMap;
    import java.util.Map;

    public class JMX$name+firstUpperCase {

    	public JMXServer init(int port, Graph graph) {
    		JMXServer server = new JMXServer(mbClasses(graph));
    		server.init(port);
    		return server;
    	}

    	private Map<String, Object$[]> mbClasses(Graph graph) {
            Map<String, Object$[]> map = new HashMap<>();
            map.put("$package.jmx.$name+firstUpperCase", new Object$[$]{graph});
            return map;
    	}
    }
end

def type(jmx) type(interface)
	package $package+validname.jmx;

    public interface $name+firstUpperCase~JMX {

        $operation+signature...[$NL$NL]
    }
end

def type(operation) trigger(signature)
    [$returnType?void] execute$name+firstUpperCase($parameter...[, ]);
end

def type(jmx) type(implementation)
	package $package+validname.jmx;

    import tara.magritte.Graph;

    public class $name+firstUpperCase implements $name+firstUpperCase~JMX {

        private final Graph graph;

        public $name+firstUpperCase(Graph graph) {
            this.graph = graph;
        }

        $operation+implementation...[$NL$NL]
    }
end

def type(operation) trigger(implementation)
    public [$returnType?void] execute$name+firstUpperCase($parameter...[, ]) {
        [$returnType+return ]new $package+validname.actions.$action+firstUpperCase~Action(graph).execute($parameter+parameterName...[, ]);
    }
end

def attribute(void) trigger(return)
end

def trigger(return)
    return
end