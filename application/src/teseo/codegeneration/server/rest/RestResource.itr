def type(action) !type(impl)
	package $package.resources;

	import teseo.framework.actions.Action.Input;
	import teseo.framework.actions.Action;
	import teseo.Error;
	import static teseo.Commons.error;
	import static java.util.Collections.emptyMap;
	import teseo.exceptions.*;
	import java.time.LocalDateTime;
	import $package.*;
	import com.google.gson.Gson;
	$schemaImport

	public abstract class $name+firstUpperCase$~AbstractResource implements Action {

		@Override
		public Task<Input, Output> task() {
			return (input, output) -> {
				try {
					$doTask
				} catch(TeseoException e) {
					output.error(error(e.code(), e.message(), e.parameters()));
				}
			};
		}

		protected abstract $returnType+firstUpperCase+ReturnTypeFormatter doTask(Input input) throws $throws...[, ];

		public interface Input extends Action.Input {

			$parameter...[$NL$NL]

		}
	}
end

def type(action & impl)
	package $package.resources;

	import teseo.framework.actions.Action;
	import teseo.Error;
	import teseo.exceptions.*;
	import $package.*;
	import com.google.gson.Gson;
	import tara.magritte.Graph;
	$schemaImport

	import static teseo.Commons.error;
    import static java.util.Collections.emptyMap;

	public class $name+firstUpperCase$~Resource extends $name+firstUpperCase$~AbstractResource {

		private Graph graph;

		public $name+firstUpperCase$~Resource(Graph graph) {
			this.graph = graph;
		}

		public $returnType+firstUpperCase+ReturnTypeFormatter doTask(Input input) throws $throws...[, ] {
			[$returnType+return ]$package+validname.actions.$action+firstUpperCase~Action.execute(graph[, $parameter+name...[, ]]);
		}
	}
end

def attribute(void) trigger(return)
end

def trigger(return)
    return
end

def type(parameter) trigger(name)
	input.$name+SnakeCaseToCamelCase+firstLowerCase()
end


def type(parameter)
	$parameterType $name+SnakeCaseToCamelCase+firstLowerCase();
end

def type(void) trigger(doTask)
	doTask(input);
end

def type(object) trigger(doTask)
	output.write(new Gson().toJson(doTask(input), $returnType+firstUpperCase.class));
end

def trigger(doTask)
	output.write(doTask(input).toString());
end

def type(schemaImport)
	import $package.schemas.*;
end