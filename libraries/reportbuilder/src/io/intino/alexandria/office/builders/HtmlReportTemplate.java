package io.intino.alexandria.office.builders;

import io.intino.itrules.RuleSet;
import io.intino.itrules.Template;

public class HtmlReportTemplate extends Template {

	public RuleSet ruleSet() {
		return new RuleSet().add(
			rule().condition((type("html"))).output(literal("<html>\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400&display=swap\" rel=\"stylesheet\">\n    <head>\n        <style>\n            body {margin:0;padding:0}\n            a, div, td, th {font-weight:lighter;font-size: 11pt;font-family: 'Roboto','Helvetica Neue','Arial','sans-serif','Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol';}\n            a { line-height: 1.5;color: #005b9f;cursor: pointer;text-decoration: none; }\n            th {width: 150px;}\n            th.hidden{display:none;}\n            input[type='checkbox']{margin:5px;}\n            table, th, td {border: 1px solid #e0e0e0;border-collapse: collapse; padding: 6px 10px}\n            tr.header {font-weight: bold;text-align:right;}\n            th.subheader {font-weight:lighter;text-align: left;}\n            th.value {text-align: right;font-weight: lighter;font-size: 11pt;}\n            th.valueRed {color: red;text-align: right;font-weight: lighter;font-size: 11pt;}\n            .highlighted {text-align:left;}\n            .dimensionSelector { width:100%;text-align:right; }\n            .dimensionSelector.alone { float:none; text-align:right; }\n            .dimensionSelector.hidden { display:none; }\n            .dimensionToolbar { float:left; width:calc(10% - 20px); margin:10px; display:block; }\n            .dimensionToolbar.hidden { display:none; }\n            .dimensionContent { float:right; width:90%; margin-top:10px; }\n            .dimensionContent.full { width:100%; }\n            .right { text-align:right !important; }\n            .left { text-align:left !important; }\n            .center { text-align:center !important; }\n        </style>\n        <script type=\"text/javascript\">\n            function toggleColumn(columnId, dimension) {\n                ths = document.getElementsByTagName(\"th\");\n                for (var i = ths.length - 1; i >= 0; i--) {\n                    if(!ths[i].classList.contains(dimension)) continue;\n                    if(ths[i].classList.contains(columnId)){\n                        if(ths[i].classList.contains('hidden'))\n                            ths[i].className = ths[i].className.replace(' hidden', '');\n                        else ths[i].className = ths[i].className + ' hidden';\n                    }\n                }\n            }\n            function showDimension(dimension) {\n                divs = document.getElementsByTagName(\"div\");\n                for (var i = divs.length - 1; i >= 0; i--) {\n                    if(!divs[i].classList.contains('dimension')) continue;\n                    if(divs[i].id === dimension) divs[i].style.display = 'block';\n                    else divs[i].style.display = 'none';\n                }\n                as = document.getElementsByTagName(\"a\");\n                for (var i = as.length - 1; i >= 0; i--) {\n                    if(as[i].id === dimension) as[i].style.color='black';\n                    else as[i].style.color='#005b9f';\n                }\n            }\n        </script>\n    </head>\n\n    <body>\n        <div class=\"dimensionSelector ")).output(mark("dimensionSelectorAlone")).output(literal(" ")).output(mark("dimensionSelectorHidden")).output(literal("\">")).output(expression().output(mark("dimension", "option").multiple(""))).output(literal("</div>\n        ")).output(expression().output(mark("dimension").multiple("\n"))).output(literal("\n    </body>\n\n</html>")),
			rule().condition((type("dimension")), (trigger("option"))).output(literal("<a style=\"")).output(mark("style", "option")).output(literal("\" id=\"")).output(mark("name")).output(literal("\" href=\"javascript:showDimension('")).output(mark("name")).output(literal("');\">")).output(mark("name")).output(literal("</a><span style='display:inline-block;width:10px'></span>")),
			rule().condition((type("dimension"))).output(literal("<div style='")).output(mark("display")).output(literal("' class='dimension' id=\"")).output(mark("name")).output(literal("\">\n    <div class='dimensionToolbar ")).output(mark("toolbarHidden")).output(literal("'>\n        ")).output(expression().output(mark("column", "checkbox").multiple("\n"))).output(literal("<br>\n    </div>\n    <div class='dimensionContent ")).output(mark("contentFull")).output(literal("'>\n        <table>\n            <tr class='header'>")).output(mark("column").multiple("")).output(literal("</tr>\n            ")).output(mark("row").multiple("\n")).output(literal("\n        </table>\n    </div>\n</div>")),
			rule().condition((allTypes("style","first")), (trigger("option"))).output(literal("color: black")),
			rule().condition((type("style")), (trigger("option"))),
			rule().condition((allTypes("display","first"))).output(literal("display:block")),
			rule().condition((type("display"))).output(literal("display:none")),
			rule().condition((type("column")), (trigger("checkbox"))).output(literal("<input id='")).output(mark("name")).output(literal("' type='checkbox' ")).output(mark("checked")).output(literal(" onchange=\"javascript:toggleColumn('")).output(mark("name")).output(literal("', '")).output(mark("dimension")).output(literal("');\"/>\n<label for='")).output(mark("name")).output(literal("'>")).output(mark("label")).output(literal("</label>\n<br>")),
			rule().condition((type("column"))).output(literal("<th class='")).output(mark("dimension")).output(literal(" ")).output(mark("name")).output(literal(" ")).output(mark("hidden")).output(literal(" ")).output(mark("alignment")).output(literal("'")).output(expression().output(literal(" style='border-bottom:4px solid ")).output(mark("borderColor")).output(literal("'"))).output(literal(">")).output(mark("label")).output(literal("</th>")),
			rule().condition((type("row"))).output(literal("<tr>")).output(mark("cell").multiple("")).output(literal("</tr>")),
			rule().condition((type("cell"))).output(literal("<th class='")).output(mark("dimension")).output(literal(" subheader ")).output(mark("name")).output(literal(" ")).output(mark("hidden")).output(literal(" ")).output(mark("alignment")).output(literal("' style=\"")).output(expression().output(literal("color:")).output(mark("color")).output(literal(";"))).output(expression().output(literal("font-weight:")).output(mark("bold")).output(literal(";"))).output(literal("\">")).output(mark("value")).output(literal("</th>"))
		);
	}
}