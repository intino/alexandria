package io.intino.alexandria.office.builders;

import io.intino.itrules.template.Rule;
import io.intino.itrules.template.Template;

import java.util.ArrayList;
import java.util.List;

import static io.intino.itrules.template.condition.predicates.Predicates.*;
import static io.intino.itrules.template.outputs.Outputs.*;

public class HtmlReportTemplate extends Template {

	public List<Rule> ruleSet() {
		List<Rule> rules = new ArrayList<>();
		rules.add(rule().condition(allTypes("html")).output(literal("<html>\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\">\n    <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@300;400&display=swap\" rel=\"stylesheet\">\n    <head>\n        <style>\n            body {margin:0;padding:0}\n            a, div, td, th {font-weight:lighter;font-size: 11pt;font-family: 'Roboto','Helvetica Neue','Arial','sans-serif','Apple Color Emoji','Segoe UI Emoji','Segoe UI Symbol';}\n            a { line-height: 1.5;color: #005b9f;cursor: pointer;text-decoration: none; }\n            th {width: 150px;}\n            th.hidden{display:none;}\n            input[type='checkbox']{margin:5px;}\n            table, th, td {border: 1px solid #e0e0e0;border-collapse: collapse; padding: 6px 10px}\n            tr.header {font-weight: bold;text-align:right;}\n            th.subheader {font-weight:lighter;text-align: left;}\n            th.value {text-align: right;font-weight: lighter;font-size: 11pt;}\n            th.valueRed {color: red;text-align: right;font-weight: lighter;font-size: 11pt;}\n            .highlighted {text-align:left;}\n            .dimensionSelector { width:100%;text-align:right; }\n            .dimensionSelector.alone { float:none; text-align:right; }\n            .dimensionSelector.hidden { display:none; }\n            .dimensionToolbar { float:left; width:calc(10% - 20px); margin:10px; display:block; }\n            .dimensionToolbar.hidden { display:none; }\n            .dimensionContent { float:right; width:90%; margin-top:10px; }\n            .dimensionContent.full { width:100%; }\n            .right { text-align:right !important; }\n            .left { text-align:left !important; }\n            .center { text-align:center !important; }\n        </style>\n        <script type=\"text/javascript\">\n            function toggleColumn(columnId, dimension) {\n                ths = document.getElementsByTagName(\"th\");\n                for (var i = ths.length - 1; i >= 0; i--) {\n                    if(!ths[i].classList.contains(dimension)) continue;\n                    if(ths[i].classList.contains(columnId)){\n                        if(ths[i].classList.contains('hidden'))\n                            ths[i].className = ths[i].className.replace(' hidden', '');\n                        else ths[i].className = ths[i].className + ' hidden';\n                    }\n                }\n            }\n            function showDimension(dimension) {\n                divs = document.getElementsByTagName(\"div\");\n                for (var i = divs.length - 1; i >= 0; i--) {\n                    if(!divs[i].classList.contains('dimension')) continue;\n                    if(divs[i].id === dimension) divs[i].style.display = 'block';\n                    else divs[i].style.display = 'none';\n                }\n                as = document.getElementsByTagName(\"a\");\n                for (var i = as.length - 1; i >= 0; i--) {\n                    if(as[i].id === dimension) as[i].style.color='black';\n                    else as[i].style.color='#005b9f';\n                }\n            }\n        </script>\n    </head>\n\n    <body>\n        <div class=\"dimensionSelector ")).output(placeholder("dimensionSelectorAlone")).output(literal(" ")).output(placeholder("dimensionSelectorHidden")).output(literal("\">")).output(expression().output(placeholder("dimension", "option").multiple("<br/>"))).output(literal("</div>\n        [")).output(placeholder("dimension").multiple("\n")).output(literal("]\n    </body>\n\n</html>")));
		rules.add(rule().condition(all(allTypes("dimension"), trigger("option"))).output(literal("<a style=\"")).output(placeholder("style", "option")).output(literal("\" id=\"")).output(placeholder("name")).output(literal("\" href=\"javascript:showDimension('")).output(placeholder("name")).output(literal("');\">")).output(placeholder("name")).output(literal("</a><span style='display:inline-block;width:10px'></span>")));
		rules.add(rule().condition(allTypes("dimension")).output(literal("<div style='")).output(placeholder("display")).output(literal("' class='dimension' id=\"")).output(placeholder("name")).output(literal("\">\n    <div class='dimensionToolbar ")).output(placeholder("toolbarHidden")).output(literal("'>\n        [")).output(placeholder("column", "checkbox").multiple("\n")).output(literal("]<br>\n    </div>\n    <div class='dimensionContent ")).output(placeholder("contentFull")).output(literal("'>\n        <table>\n            <tr class='header'>")).output(placeholder("column").multiple("")).output(literal("</tr>\n            ")).output(placeholder("row").multiple("\n")).output(literal("\n        </table>\n    </div>\n</div>")));
		rules.add(rule().condition(all(allTypes("style&first"), trigger("option"))).output(literal("color: black")));
		rules.add(rule().condition(all(allTypes("style"), trigger("option"))));
		rules.add(rule().condition(allTypes("display&first")).output(literal("display:block")));
		rules.add(rule().condition(allTypes("display")).output(literal("display:none")));
		rules.add(rule().condition(all(allTypes("column"), trigger("checkbox"))).output(literal("<input id='")).output(placeholder("name")).output(literal("' type='checkbox' ")).output(placeholder("checked")).output(literal(" onchange=\"javascript:toggleColumn('")).output(placeholder("name")).output(literal("', '")).output(placeholder("dimension")).output(literal("');\"/>\n<label for='")).output(placeholder("name")).output(literal("'>")).output(placeholder("label")).output(literal("</label>\n<br>")));
		rules.add(rule().condition(allTypes("column")).output(literal("<th class='")).output(placeholder("dimension")).output(literal(" ")).output(placeholder("name")).output(literal(" ")).output(placeholder("hidden")).output(literal(" ")).output(placeholder("alignment")).output(literal("'[ style='border-bottom:4px solid ")).output(placeholder("borderColor")).output(literal("']>")).output(placeholder("label")).output(literal("</th>")));
		rules.add(rule().condition(allTypes("row")).output(literal("<tr>")).output(placeholder("cell").multiple("")).output(literal("</tr>")));
		rules.add(rule().condition(allTypes("cell")).output(literal("<th class='")).output(placeholder("dimension")).output(literal(" subheader ")).output(placeholder("name")).output(literal(" ")).output(placeholder("hidden")).output(literal(" ")).output(placeholder("alignment")).output(literal("' style=\"[color:")).output(placeholder("color")).output(literal(";][font-weight:")).output(placeholder("bold")).output(literal(";]\">")).output(placeholder("value")).output(literal("</th>")));
		return rules;
	}

	public String render(Object object) {
		return new io.intino.itrules.Engine(this).render(object);
	}

	public String render(Object object, java.util.Map<String, io.intino.itrules.Formatter> formatters) {
		return new io.intino.itrules.Engine(this).addAll(formatters).render(object);
	}
}